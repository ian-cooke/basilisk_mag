# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_navAggregate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_navAggregate')
    _navAggregate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_navAggregate', [dirname(__file__)])
        except ImportError:
            import _navAggregate
            return _navAggregate
        try:
            _mod = imp.load_module('_navAggregate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _navAggregate = swig_import_helper()
    del swig_import_helper
else:
    import _navAggregate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _navAggregate.new_doubleArray(nelements)
new_doubleArray = _navAggregate.new_doubleArray

def delete_doubleArray(ary):
    return _navAggregate.delete_doubleArray(ary)
delete_doubleArray = _navAggregate.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _navAggregate.doubleArray_getitem(ary, index)
doubleArray_getitem = _navAggregate.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _navAggregate.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _navAggregate.doubleArray_setitem

def new_longArray(nelements):
    return _navAggregate.new_longArray(nelements)
new_longArray = _navAggregate.new_longArray

def delete_longArray(ary):
    return _navAggregate.delete_longArray(ary)
delete_longArray = _navAggregate.delete_longArray

def longArray_getitem(ary, index):
    return _navAggregate.longArray_getitem(ary, index)
longArray_getitem = _navAggregate.longArray_getitem

def longArray_setitem(ary, index, value):
    return _navAggregate.longArray_setitem(ary, index, value)
longArray_setitem = _navAggregate.longArray_setitem

def new_intArray(nelements):
    return _navAggregate.new_intArray(nelements)
new_intArray = _navAggregate.new_intArray

def delete_intArray(ary):
    return _navAggregate.delete_intArray(ary)
delete_intArray = _navAggregate.delete_intArray

def intArray_getitem(ary, index):
    return _navAggregate.intArray_getitem(ary, index)
intArray_getitem = _navAggregate.intArray_getitem

def intArray_setitem(ary, index, value):
    return _navAggregate.intArray_setitem(ary, index, value)
intArray_setitem = _navAggregate.intArray_setitem

def new_shortArray(nelements):
    return _navAggregate.new_shortArray(nelements)
new_shortArray = _navAggregate.new_shortArray

def delete_shortArray(ary):
    return _navAggregate.delete_shortArray(ary)
delete_shortArray = _navAggregate.delete_shortArray

def shortArray_getitem(ary, index):
    return _navAggregate.shortArray_getitem(ary, index)
shortArray_getitem = _navAggregate.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _navAggregate.shortArray_setitem(ary, index, value)
shortArray_setitem = _navAggregate.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_aggregateNav = _navAggregate.Update_aggregateNav
SelfInit_aggregateNav = _navAggregate.SelfInit_aggregateNav
CrossInit_aggregateNav = _navAggregate.CrossInit_aggregateNav
sizeof_AggregateAttInput = _navAggregate.sizeof_AggregateAttInput
sizeof_AggregateTransInput = _navAggregate.sizeof_AggregateTransInput
sizeof_NavAggregateData = _navAggregate.sizeof_NavAggregateData
MAX_AGG_NAV_MSG = _navAggregate.MAX_AGG_NAV_MSG
class AggregateAttInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregateAttInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregateAttInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputNavName"] = _navAggregate.AggregateAttInput_inputNavName_set
    __swig_getmethods__["inputNavName"] = _navAggregate.AggregateAttInput_inputNavName_get
    if _newclass:
        inputNavName = _swig_property(_navAggregate.AggregateAttInput_inputNavName_get, _navAggregate.AggregateAttInput_inputNavName_set)
    __swig_setmethods__["inputNavID"] = _navAggregate.AggregateAttInput_inputNavID_set
    __swig_getmethods__["inputNavID"] = _navAggregate.AggregateAttInput_inputNavID_get
    if _newclass:
        inputNavID = _swig_property(_navAggregate.AggregateAttInput_inputNavID_get, _navAggregate.AggregateAttInput_inputNavID_set)
    __swig_setmethods__["msgStorage"] = _navAggregate.AggregateAttInput_msgStorage_set
    __swig_getmethods__["msgStorage"] = _navAggregate.AggregateAttInput_msgStorage_get
    if _newclass:
        msgStorage = _swig_property(_navAggregate.AggregateAttInput_msgStorage_get, _navAggregate.AggregateAttInput_msgStorage_set)

    def __init__(self):
        this = _navAggregate.new_AggregateAttInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _navAggregate.delete_AggregateAttInput
    __del__ = lambda self: None
AggregateAttInput_swigregister = _navAggregate.AggregateAttInput_swigregister
AggregateAttInput_swigregister(AggregateAttInput)

class AggregateTransInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregateTransInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregateTransInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputNavName"] = _navAggregate.AggregateTransInput_inputNavName_set
    __swig_getmethods__["inputNavName"] = _navAggregate.AggregateTransInput_inputNavName_get
    if _newclass:
        inputNavName = _swig_property(_navAggregate.AggregateTransInput_inputNavName_get, _navAggregate.AggregateTransInput_inputNavName_set)
    __swig_setmethods__["inputNavID"] = _navAggregate.AggregateTransInput_inputNavID_set
    __swig_getmethods__["inputNavID"] = _navAggregate.AggregateTransInput_inputNavID_get
    if _newclass:
        inputNavID = _swig_property(_navAggregate.AggregateTransInput_inputNavID_get, _navAggregate.AggregateTransInput_inputNavID_set)
    __swig_setmethods__["msgStorage"] = _navAggregate.AggregateTransInput_msgStorage_set
    __swig_getmethods__["msgStorage"] = _navAggregate.AggregateTransInput_msgStorage_get
    if _newclass:
        msgStorage = _swig_property(_navAggregate.AggregateTransInput_msgStorage_get, _navAggregate.AggregateTransInput_msgStorage_set)

    def __init__(self):
        this = _navAggregate.new_AggregateTransInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _navAggregate.delete_AggregateTransInput
    __del__ = lambda self: None
AggregateTransInput_swigregister = _navAggregate.AggregateTransInput_swigregister
AggregateTransInput_swigregister(AggregateTransInput)

class NavAggregateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavAggregateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavAggregateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attMsgs"] = _navAggregate.NavAggregateData_attMsgs_set
    __swig_getmethods__["attMsgs"] = _navAggregate.NavAggregateData_attMsgs_get
    if _newclass:
        attMsgs = _swig_property(_navAggregate.NavAggregateData_attMsgs_get, _navAggregate.NavAggregateData_attMsgs_set)
    __swig_setmethods__["transMsgs"] = _navAggregate.NavAggregateData_transMsgs_set
    __swig_getmethods__["transMsgs"] = _navAggregate.NavAggregateData_transMsgs_get
    if _newclass:
        transMsgs = _swig_property(_navAggregate.NavAggregateData_transMsgs_get, _navAggregate.NavAggregateData_transMsgs_set)
    __swig_setmethods__["outputAttName"] = _navAggregate.NavAggregateData_outputAttName_set
    __swig_getmethods__["outputAttName"] = _navAggregate.NavAggregateData_outputAttName_get
    if _newclass:
        outputAttName = _swig_property(_navAggregate.NavAggregateData_outputAttName_get, _navAggregate.NavAggregateData_outputAttName_set)
    __swig_setmethods__["outputTransName"] = _navAggregate.NavAggregateData_outputTransName_set
    __swig_getmethods__["outputTransName"] = _navAggregate.NavAggregateData_outputTransName_get
    if _newclass:
        outputTransName = _swig_property(_navAggregate.NavAggregateData_outputTransName_get, _navAggregate.NavAggregateData_outputTransName_set)
    __swig_setmethods__["attTimeIdx"] = _navAggregate.NavAggregateData_attTimeIdx_set
    __swig_getmethods__["attTimeIdx"] = _navAggregate.NavAggregateData_attTimeIdx_get
    if _newclass:
        attTimeIdx = _swig_property(_navAggregate.NavAggregateData_attTimeIdx_get, _navAggregate.NavAggregateData_attTimeIdx_set)
    __swig_setmethods__["transTimeIdx"] = _navAggregate.NavAggregateData_transTimeIdx_set
    __swig_getmethods__["transTimeIdx"] = _navAggregate.NavAggregateData_transTimeIdx_get
    if _newclass:
        transTimeIdx = _swig_property(_navAggregate.NavAggregateData_transTimeIdx_get, _navAggregate.NavAggregateData_transTimeIdx_set)
    __swig_setmethods__["attIdx"] = _navAggregate.NavAggregateData_attIdx_set
    __swig_getmethods__["attIdx"] = _navAggregate.NavAggregateData_attIdx_get
    if _newclass:
        attIdx = _swig_property(_navAggregate.NavAggregateData_attIdx_get, _navAggregate.NavAggregateData_attIdx_set)
    __swig_setmethods__["rateIdx"] = _navAggregate.NavAggregateData_rateIdx_set
    __swig_getmethods__["rateIdx"] = _navAggregate.NavAggregateData_rateIdx_get
    if _newclass:
        rateIdx = _swig_property(_navAggregate.NavAggregateData_rateIdx_get, _navAggregate.NavAggregateData_rateIdx_set)
    __swig_setmethods__["posIdx"] = _navAggregate.NavAggregateData_posIdx_set
    __swig_getmethods__["posIdx"] = _navAggregate.NavAggregateData_posIdx_get
    if _newclass:
        posIdx = _swig_property(_navAggregate.NavAggregateData_posIdx_get, _navAggregate.NavAggregateData_posIdx_set)
    __swig_setmethods__["velIdx"] = _navAggregate.NavAggregateData_velIdx_set
    __swig_getmethods__["velIdx"] = _navAggregate.NavAggregateData_velIdx_get
    if _newclass:
        velIdx = _swig_property(_navAggregate.NavAggregateData_velIdx_get, _navAggregate.NavAggregateData_velIdx_set)
    __swig_setmethods__["dvIdx"] = _navAggregate.NavAggregateData_dvIdx_set
    __swig_getmethods__["dvIdx"] = _navAggregate.NavAggregateData_dvIdx_get
    if _newclass:
        dvIdx = _swig_property(_navAggregate.NavAggregateData_dvIdx_get, _navAggregate.NavAggregateData_dvIdx_set)
    __swig_setmethods__["sunIdx"] = _navAggregate.NavAggregateData_sunIdx_set
    __swig_getmethods__["sunIdx"] = _navAggregate.NavAggregateData_sunIdx_get
    if _newclass:
        sunIdx = _swig_property(_navAggregate.NavAggregateData_sunIdx_get, _navAggregate.NavAggregateData_sunIdx_set)
    __swig_setmethods__["attMsgCount"] = _navAggregate.NavAggregateData_attMsgCount_set
    __swig_getmethods__["attMsgCount"] = _navAggregate.NavAggregateData_attMsgCount_get
    if _newclass:
        attMsgCount = _swig_property(_navAggregate.NavAggregateData_attMsgCount_get, _navAggregate.NavAggregateData_attMsgCount_set)
    __swig_setmethods__["transMsgCount"] = _navAggregate.NavAggregateData_transMsgCount_set
    __swig_getmethods__["transMsgCount"] = _navAggregate.NavAggregateData_transMsgCount_get
    if _newclass:
        transMsgCount = _swig_property(_navAggregate.NavAggregateData_transMsgCount_get, _navAggregate.NavAggregateData_transMsgCount_set)
    __swig_setmethods__["outputTransMsgID"] = _navAggregate.NavAggregateData_outputTransMsgID_set
    __swig_getmethods__["outputTransMsgID"] = _navAggregate.NavAggregateData_outputTransMsgID_get
    if _newclass:
        outputTransMsgID = _swig_property(_navAggregate.NavAggregateData_outputTransMsgID_get, _navAggregate.NavAggregateData_outputTransMsgID_set)
    __swig_setmethods__["outputAttMsgID"] = _navAggregate.NavAggregateData_outputAttMsgID_set
    __swig_getmethods__["outputAttMsgID"] = _navAggregate.NavAggregateData_outputAttMsgID_get
    if _newclass:
        outputAttMsgID = _swig_property(_navAggregate.NavAggregateData_outputAttMsgID_get, _navAggregate.NavAggregateData_outputAttMsgID_set)
    __swig_setmethods__["outAttData"] = _navAggregate.NavAggregateData_outAttData_set
    __swig_getmethods__["outAttData"] = _navAggregate.NavAggregateData_outAttData_get
    if _newclass:
        outAttData = _swig_property(_navAggregate.NavAggregateData_outAttData_get, _navAggregate.NavAggregateData_outAttData_set)
    __swig_setmethods__["outTransData"] = _navAggregate.NavAggregateData_outTransData_set
    __swig_getmethods__["outTransData"] = _navAggregate.NavAggregateData_outTransData_get
    if _newclass:
        outTransData = _swig_property(_navAggregate.NavAggregateData_outTransData_get, _navAggregate.NavAggregateData_outTransData_set)

    def __init__(self):
        this = _navAggregate.new_NavAggregateData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _navAggregate.delete_NavAggregateData
    __del__ = lambda self: None
NavAggregateData_swigregister = _navAggregate.NavAggregateData_swigregister
NavAggregateData_swigregister(NavAggregateData)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


