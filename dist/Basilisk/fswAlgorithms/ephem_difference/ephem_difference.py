# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ephem_difference')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ephem_difference')
    _ephem_difference = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ephem_difference', [dirname(__file__)])
        except ImportError:
            import _ephem_difference
            return _ephem_difference
        try:
            _mod = imp.load_module('_ephem_difference', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ephem_difference = swig_import_helper()
    del swig_import_helper
else:
    import _ephem_difference
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _ephem_difference.new_doubleArray(nelements)
new_doubleArray = _ephem_difference.new_doubleArray

def delete_doubleArray(ary):
    return _ephem_difference.delete_doubleArray(ary)
delete_doubleArray = _ephem_difference.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _ephem_difference.doubleArray_getitem(ary, index)
doubleArray_getitem = _ephem_difference.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _ephem_difference.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _ephem_difference.doubleArray_setitem

def new_longArray(nelements):
    return _ephem_difference.new_longArray(nelements)
new_longArray = _ephem_difference.new_longArray

def delete_longArray(ary):
    return _ephem_difference.delete_longArray(ary)
delete_longArray = _ephem_difference.delete_longArray

def longArray_getitem(ary, index):
    return _ephem_difference.longArray_getitem(ary, index)
longArray_getitem = _ephem_difference.longArray_getitem

def longArray_setitem(ary, index, value):
    return _ephem_difference.longArray_setitem(ary, index, value)
longArray_setitem = _ephem_difference.longArray_setitem

def new_intArray(nelements):
    return _ephem_difference.new_intArray(nelements)
new_intArray = _ephem_difference.new_intArray

def delete_intArray(ary):
    return _ephem_difference.delete_intArray(ary)
delete_intArray = _ephem_difference.delete_intArray

def intArray_getitem(ary, index):
    return _ephem_difference.intArray_getitem(ary, index)
intArray_getitem = _ephem_difference.intArray_getitem

def intArray_setitem(ary, index, value):
    return _ephem_difference.intArray_setitem(ary, index, value)
intArray_setitem = _ephem_difference.intArray_setitem

def new_shortArray(nelements):
    return _ephem_difference.new_shortArray(nelements)
new_shortArray = _ephem_difference.new_shortArray

def delete_shortArray(ary):
    return _ephem_difference.delete_shortArray(ary)
delete_shortArray = _ephem_difference.delete_shortArray

def shortArray_getitem(ary, index):
    return _ephem_difference.shortArray_getitem(ary, index)
shortArray_getitem = _ephem_difference.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _ephem_difference.shortArray_setitem(ary, index, value)
shortArray_setitem = _ephem_difference.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_ephemDifference = _ephem_difference.Update_ephemDifference
SelfInit_ephemDifference = _ephem_difference.SelfInit_ephemDifference
CrossInit_ephemDifference = _ephem_difference.CrossInit_ephemDifference
Reset_ephemDifference = _ephem_difference.Reset_ephemDifference
sizeof_EphemerisIntMsg = _ephem_difference.sizeof_EphemerisIntMsg
MAX_NUM_CHANGE_BODIES = _ephem_difference.MAX_NUM_CHANGE_BODIES
class EphemChangeConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemChangeConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemChangeConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ephInMsgName"] = _ephem_difference.EphemChangeConfig_ephInMsgName_set
    __swig_getmethods__["ephInMsgName"] = _ephem_difference.EphemChangeConfig_ephInMsgName_get
    if _newclass:
        ephInMsgName = _swig_property(_ephem_difference.EphemChangeConfig_ephInMsgName_get, _ephem_difference.EphemChangeConfig_ephInMsgName_set)
    __swig_setmethods__["ephInMsgID"] = _ephem_difference.EphemChangeConfig_ephInMsgID_set
    __swig_getmethods__["ephInMsgID"] = _ephem_difference.EphemChangeConfig_ephInMsgID_get
    if _newclass:
        ephInMsgID = _swig_property(_ephem_difference.EphemChangeConfig_ephInMsgID_get, _ephem_difference.EphemChangeConfig_ephInMsgID_set)
    __swig_setmethods__["ephOutMsgName"] = _ephem_difference.EphemChangeConfig_ephOutMsgName_set
    __swig_getmethods__["ephOutMsgName"] = _ephem_difference.EphemChangeConfig_ephOutMsgName_get
    if _newclass:
        ephOutMsgName = _swig_property(_ephem_difference.EphemChangeConfig_ephOutMsgName_get, _ephem_difference.EphemChangeConfig_ephOutMsgName_set)
    __swig_setmethods__["ephOutMsgID"] = _ephem_difference.EphemChangeConfig_ephOutMsgID_set
    __swig_getmethods__["ephOutMsgID"] = _ephem_difference.EphemChangeConfig_ephOutMsgID_get
    if _newclass:
        ephOutMsgID = _swig_property(_ephem_difference.EphemChangeConfig_ephOutMsgID_get, _ephem_difference.EphemChangeConfig_ephOutMsgID_set)
    __swig_setmethods__["ephStore"] = _ephem_difference.EphemChangeConfig_ephStore_set
    __swig_getmethods__["ephStore"] = _ephem_difference.EphemChangeConfig_ephStore_get
    if _newclass:
        ephStore = _swig_property(_ephem_difference.EphemChangeConfig_ephStore_get, _ephem_difference.EphemChangeConfig_ephStore_set)

    def __init__(self):
        this = _ephem_difference.new_EphemChangeConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ephem_difference.delete_EphemChangeConfig
    __del__ = lambda self: None
EphemChangeConfig_swigregister = _ephem_difference.EphemChangeConfig_swigregister
EphemChangeConfig_swigregister(EphemChangeConfig)

class EphemDifferenceData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemDifferenceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemDifferenceData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ephBaseInMsgName"] = _ephem_difference.EphemDifferenceData_ephBaseInMsgName_set
    __swig_getmethods__["ephBaseInMsgName"] = _ephem_difference.EphemDifferenceData_ephBaseInMsgName_get
    if _newclass:
        ephBaseInMsgName = _swig_property(_ephem_difference.EphemDifferenceData_ephBaseInMsgName_get, _ephem_difference.EphemDifferenceData_ephBaseInMsgName_set)
    __swig_setmethods__["baseScale"] = _ephem_difference.EphemDifferenceData_baseScale_set
    __swig_getmethods__["baseScale"] = _ephem_difference.EphemDifferenceData_baseScale_get
    if _newclass:
        baseScale = _swig_property(_ephem_difference.EphemDifferenceData_baseScale_get, _ephem_difference.EphemDifferenceData_baseScale_set)
    __swig_setmethods__["changeBodies"] = _ephem_difference.EphemDifferenceData_changeBodies_set
    __swig_getmethods__["changeBodies"] = _ephem_difference.EphemDifferenceData_changeBodies_get
    if _newclass:
        changeBodies = _swig_property(_ephem_difference.EphemDifferenceData_changeBodies_get, _ephem_difference.EphemDifferenceData_changeBodies_set)
    __swig_setmethods__["ephBdyCount"] = _ephem_difference.EphemDifferenceData_ephBdyCount_set
    __swig_getmethods__["ephBdyCount"] = _ephem_difference.EphemDifferenceData_ephBdyCount_get
    if _newclass:
        ephBdyCount = _swig_property(_ephem_difference.EphemDifferenceData_ephBdyCount_get, _ephem_difference.EphemDifferenceData_ephBdyCount_set)
    __swig_setmethods__["ephBaseInMsgID"] = _ephem_difference.EphemDifferenceData_ephBaseInMsgID_set
    __swig_getmethods__["ephBaseInMsgID"] = _ephem_difference.EphemDifferenceData_ephBaseInMsgID_get
    if _newclass:
        ephBaseInMsgID = _swig_property(_ephem_difference.EphemDifferenceData_ephBaseInMsgID_get, _ephem_difference.EphemDifferenceData_ephBaseInMsgID_set)
    __swig_setmethods__["baseEphem"] = _ephem_difference.EphemDifferenceData_baseEphem_set
    __swig_getmethods__["baseEphem"] = _ephem_difference.EphemDifferenceData_baseEphem_get
    if _newclass:
        baseEphem = _swig_property(_ephem_difference.EphemDifferenceData_baseEphem_get, _ephem_difference.EphemDifferenceData_baseEphem_set)

    def __init__(self):
        this = _ephem_difference.new_EphemDifferenceData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ephem_difference.delete_EphemDifferenceData
    __del__ = lambda self: None
EphemDifferenceData_swigregister = _ephem_difference.EphemDifferenceData_swigregister
EphemDifferenceData_swigregister(EphemDifferenceData)

class EphemerisIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemerisIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemerisIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BdyZero_N"] = _ephem_difference.EphemerisIntMsg_r_BdyZero_N_set
    __swig_getmethods__["r_BdyZero_N"] = _ephem_difference.EphemerisIntMsg_r_BdyZero_N_get
    if _newclass:
        r_BdyZero_N = _swig_property(_ephem_difference.EphemerisIntMsg_r_BdyZero_N_get, _ephem_difference.EphemerisIntMsg_r_BdyZero_N_set)
    __swig_setmethods__["v_BdyZero_N"] = _ephem_difference.EphemerisIntMsg_v_BdyZero_N_set
    __swig_getmethods__["v_BdyZero_N"] = _ephem_difference.EphemerisIntMsg_v_BdyZero_N_get
    if _newclass:
        v_BdyZero_N = _swig_property(_ephem_difference.EphemerisIntMsg_v_BdyZero_N_get, _ephem_difference.EphemerisIntMsg_v_BdyZero_N_set)
    __swig_setmethods__["timeTag"] = _ephem_difference.EphemerisIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _ephem_difference.EphemerisIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_ephem_difference.EphemerisIntMsg_timeTag_get, _ephem_difference.EphemerisIntMsg_timeTag_set)

    def __init__(self):
        this = _ephem_difference.new_EphemerisIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ephem_difference.delete_EphemerisIntMsg
    __del__ = lambda self: None
EphemerisIntMsg_swigregister = _ephem_difference.EphemerisIntMsg_swigregister
EphemerisIntMsg_swigregister(EphemerisIntMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


