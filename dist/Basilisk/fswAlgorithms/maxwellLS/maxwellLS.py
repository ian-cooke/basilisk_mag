# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_maxwellLS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_maxwellLS')
    _maxwellLS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_maxwellLS', [dirname(__file__)])
        except ImportError:
            import _maxwellLS
            return _maxwellLS
        try:
            _mod = imp.load_module('_maxwellLS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _maxwellLS = swig_import_helper()
    del swig_import_helper
else:
    import _maxwellLS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _maxwellLS.new_doubleArray(nelements)
new_doubleArray = _maxwellLS.new_doubleArray

def delete_doubleArray(ary):
    return _maxwellLS.delete_doubleArray(ary)
delete_doubleArray = _maxwellLS.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _maxwellLS.doubleArray_getitem(ary, index)
doubleArray_getitem = _maxwellLS.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _maxwellLS.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _maxwellLS.doubleArray_setitem

def new_longArray(nelements):
    return _maxwellLS.new_longArray(nelements)
new_longArray = _maxwellLS.new_longArray

def delete_longArray(ary):
    return _maxwellLS.delete_longArray(ary)
delete_longArray = _maxwellLS.delete_longArray

def longArray_getitem(ary, index):
    return _maxwellLS.longArray_getitem(ary, index)
longArray_getitem = _maxwellLS.longArray_getitem

def longArray_setitem(ary, index, value):
    return _maxwellLS.longArray_setitem(ary, index, value)
longArray_setitem = _maxwellLS.longArray_setitem

def new_intArray(nelements):
    return _maxwellLS.new_intArray(nelements)
new_intArray = _maxwellLS.new_intArray

def delete_intArray(ary):
    return _maxwellLS.delete_intArray(ary)
delete_intArray = _maxwellLS.delete_intArray

def intArray_getitem(ary, index):
    return _maxwellLS.intArray_getitem(ary, index)
intArray_getitem = _maxwellLS.intArray_getitem

def intArray_setitem(ary, index, value):
    return _maxwellLS.intArray_setitem(ary, index, value)
intArray_setitem = _maxwellLS.intArray_setitem

def new_shortArray(nelements):
    return _maxwellLS.new_shortArray(nelements)
new_shortArray = _maxwellLS.new_shortArray

def delete_shortArray(ary):
    return _maxwellLS.delete_shortArray(ary)
delete_shortArray = _maxwellLS.delete_shortArray

def shortArray_getitem(ary, index):
    return _maxwellLS.shortArray_getitem(ary, index)
shortArray_getitem = _maxwellLS.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _maxwellLS.shortArray_setitem(ary, index, value)
shortArray_setitem = _maxwellLS.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_maxwellLS = _maxwellLS.Update_maxwellLS
SelfInit_maxwellLS = _maxwellLS.SelfInit_maxwellLS
CrossInit_maxwellLS = _maxwellLS.CrossInit_maxwellLS
Reset_maxwellLS = _maxwellLS.Reset_maxwellLS
sizeof_CSSConfigFswMsg = _maxwellLS.sizeof_CSSConfigFswMsg
sizeof_CSSUnitConfigFswMsg = _maxwellLS.sizeof_CSSUnitConfigFswMsg
sizeof_maxwellLSConfig = _maxwellLS.sizeof_maxwellLSConfig
class maxwellLSConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxwellLSConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maxwellLSConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minUnitMag"] = _maxwellLS.maxwellLSConfig_minUnitMag_set
    __swig_getmethods__["minUnitMag"] = _maxwellLS.maxwellLSConfig_minUnitMag_get
    if _newclass:
        minUnitMag = _swig_property(_maxwellLS.maxwellLSConfig_minUnitMag_get, _maxwellLS.maxwellLSConfig_minUnitMag_set)
    __swig_setmethods__["smallAngle"] = _maxwellLS.maxwellLSConfig_smallAngle_set
    __swig_getmethods__["smallAngle"] = _maxwellLS.maxwellLSConfig_smallAngle_get
    if _newclass:
        smallAngle = _swig_property(_maxwellLS.maxwellLSConfig_smallAngle_get, _maxwellLS.maxwellLSConfig_smallAngle_set)
    __swig_setmethods__["eHat180_B"] = _maxwellLS.maxwellLSConfig_eHat180_B_set
    __swig_getmethods__["eHat180_B"] = _maxwellLS.maxwellLSConfig_eHat180_B_get
    if _newclass:
        eHat180_B = _swig_property(_maxwellLS.maxwellLSConfig_eHat180_B_get, _maxwellLS.maxwellLSConfig_eHat180_B_set)
    __swig_setmethods__["sunMnvrVec"] = _maxwellLS.maxwellLSConfig_sunMnvrVec_set
    __swig_getmethods__["sunMnvrVec"] = _maxwellLS.maxwellLSConfig_sunMnvrVec_get
    if _newclass:
        sunMnvrVec = _swig_property(_maxwellLS.maxwellLSConfig_sunMnvrVec_get, _maxwellLS.maxwellLSConfig_sunMnvrVec_set)
    __swig_setmethods__["cssDataInMsgName"] = _maxwellLS.maxwellLSConfig_cssDataInMsgName_set
    __swig_getmethods__["cssDataInMsgName"] = _maxwellLS.maxwellLSConfig_cssDataInMsgName_get
    if _newclass:
        cssDataInMsgName = _swig_property(_maxwellLS.maxwellLSConfig_cssDataInMsgName_get, _maxwellLS.maxwellLSConfig_cssDataInMsgName_set)
    __swig_setmethods__["cssConfigInMsgName"] = _maxwellLS.maxwellLSConfig_cssConfigInMsgName_set
    __swig_getmethods__["cssConfigInMsgName"] = _maxwellLS.maxwellLSConfig_cssConfigInMsgName_get
    if _newclass:
        cssConfigInMsgName = _swig_property(_maxwellLS.maxwellLSConfig_cssConfigInMsgName_get, _maxwellLS.maxwellLSConfig_cssConfigInMsgName_set)
    __swig_setmethods__["navStateOutMsgName"] = _maxwellLS.maxwellLSConfig_navStateOutMsgName_set
    __swig_getmethods__["navStateOutMsgName"] = _maxwellLS.maxwellLSConfig_navStateOutMsgName_get
    if _newclass:
        navStateOutMsgName = _swig_property(_maxwellLS.maxwellLSConfig_navStateOutMsgName_get, _maxwellLS.maxwellLSConfig_navStateOutMsgName_set)
    __swig_setmethods__["sunpointOutMsgName"] = _maxwellLS.maxwellLSConfig_sunpointOutMsgName_set
    __swig_getmethods__["sunpointOutMsgName"] = _maxwellLS.maxwellLSConfig_sunpointOutMsgName_get
    if _newclass:
        sunpointOutMsgName = _swig_property(_maxwellLS.maxwellLSConfig_sunpointOutMsgName_get, _maxwellLS.maxwellLSConfig_sunpointOutMsgName_set)
    __swig_setmethods__["numActiveCss"] = _maxwellLS.maxwellLSConfig_numActiveCss_set
    __swig_getmethods__["numActiveCss"] = _maxwellLS.maxwellLSConfig_numActiveCss_get
    if _newclass:
        numActiveCss = _swig_property(_maxwellLS.maxwellLSConfig_numActiveCss_get, _maxwellLS.maxwellLSConfig_numActiveCss_set)
    __swig_setmethods__["sensorUseThresh"] = _maxwellLS.maxwellLSConfig_sensorUseThresh_set
    __swig_getmethods__["sensorUseThresh"] = _maxwellLS.maxwellLSConfig_sensorUseThresh_get
    if _newclass:
        sensorUseThresh = _swig_property(_maxwellLS.maxwellLSConfig_sensorUseThresh_get, _maxwellLS.maxwellLSConfig_sensorUseThresh_set)
    __swig_setmethods__["cssConfigInBuffer"] = _maxwellLS.maxwellLSConfig_cssConfigInBuffer_set
    __swig_getmethods__["cssConfigInBuffer"] = _maxwellLS.maxwellLSConfig_cssConfigInBuffer_get
    if _newclass:
        cssConfigInBuffer = _swig_property(_maxwellLS.maxwellLSConfig_cssConfigInBuffer_get, _maxwellLS.maxwellLSConfig_cssConfigInBuffer_set)
    __swig_setmethods__["sunlineOutBuffer"] = _maxwellLS.maxwellLSConfig_sunlineOutBuffer_set
    __swig_getmethods__["sunlineOutBuffer"] = _maxwellLS.maxwellLSConfig_sunlineOutBuffer_get
    if _newclass:
        sunlineOutBuffer = _swig_property(_maxwellLS.maxwellLSConfig_sunlineOutBuffer_get, _maxwellLS.maxwellLSConfig_sunlineOutBuffer_set)
    __swig_setmethods__["sunDirection"] = _maxwellLS.maxwellLSConfig_sunDirection_set
    __swig_getmethods__["sunDirection"] = _maxwellLS.maxwellLSConfig_sunDirection_get
    if _newclass:
        sunDirection = _swig_property(_maxwellLS.maxwellLSConfig_sunDirection_get, _maxwellLS.maxwellLSConfig_sunDirection_set)
    __swig_setmethods__["sunpointOutMsgID"] = _maxwellLS.maxwellLSConfig_sunpointOutMsgID_set
    __swig_getmethods__["sunpointOutMsgID"] = _maxwellLS.maxwellLSConfig_sunpointOutMsgID_get
    if _newclass:
        sunpointOutMsgID = _swig_property(_maxwellLS.maxwellLSConfig_sunpointOutMsgID_get, _maxwellLS.maxwellLSConfig_sunpointOutMsgID_set)
    __swig_setmethods__["cssDataInMsgID"] = _maxwellLS.maxwellLSConfig_cssDataInMsgID_set
    __swig_getmethods__["cssDataInMsgID"] = _maxwellLS.maxwellLSConfig_cssDataInMsgID_get
    if _newclass:
        cssDataInMsgID = _swig_property(_maxwellLS.maxwellLSConfig_cssDataInMsgID_get, _maxwellLS.maxwellLSConfig_cssDataInMsgID_set)
    __swig_setmethods__["cssConfigInMsgID"] = _maxwellLS.maxwellLSConfig_cssConfigInMsgID_set
    __swig_getmethods__["cssConfigInMsgID"] = _maxwellLS.maxwellLSConfig_cssConfigInMsgID_get
    if _newclass:
        cssConfigInMsgID = _swig_property(_maxwellLS.maxwellLSConfig_cssConfigInMsgID_get, _maxwellLS.maxwellLSConfig_cssConfigInMsgID_set)
    __swig_setmethods__["navStateOutMsgId"] = _maxwellLS.maxwellLSConfig_navStateOutMsgId_set
    __swig_getmethods__["navStateOutMsgId"] = _maxwellLS.maxwellLSConfig_navStateOutMsgId_get
    if _newclass:
        navStateOutMsgId = _swig_property(_maxwellLS.maxwellLSConfig_navStateOutMsgId_get, _maxwellLS.maxwellLSConfig_navStateOutMsgId_set)

    def __init__(self):
        this = _maxwellLS.new_maxwellLSConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _maxwellLS.delete_maxwellLSConfig
    __del__ = lambda self: None
maxwellLSConfig_swigregister = _maxwellLS.maxwellLSConfig_swigregister
maxwellLSConfig_swigregister(maxwellLSConfig)


def cal_sun_sens(sun_sens_volt, sun_sens_bfmtx, sun_sens_cal_bfmtx, ss_v_cutoff):
    return _maxwellLS.cal_sun_sens(sun_sens_volt, sun_sens_bfmtx, sun_sens_cal_bfmtx, ss_v_cutoff)
cal_sun_sens = _maxwellLS.cal_sun_sens

def create_qBR(sun_vec, qBR, sHatBdyCmd):
    return _maxwellLS.create_qBR(sun_vec, qBR, sHatBdyCmd)
create_qBR = _maxwellLS.create_qBR

def compute_LS(num_active_css, sun_sens_map, y, x):
    return _maxwellLS.compute_LS(num_active_css, sun_sens_map, y, x)
compute_LS = _maxwellLS.compute_LS
class NavAttIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavAttIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavAttIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _maxwellLS.NavAttIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _maxwellLS.NavAttIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_maxwellLS.NavAttIntMsg_timeTag_get, _maxwellLS.NavAttIntMsg_timeTag_set)
    __swig_setmethods__["sigma_BN"] = _maxwellLS.NavAttIntMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _maxwellLS.NavAttIntMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_maxwellLS.NavAttIntMsg_sigma_BN_get, _maxwellLS.NavAttIntMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _maxwellLS.NavAttIntMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _maxwellLS.NavAttIntMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_maxwellLS.NavAttIntMsg_omega_BN_B_get, _maxwellLS.NavAttIntMsg_omega_BN_B_set)
    __swig_setmethods__["vehSunPntBdy"] = _maxwellLS.NavAttIntMsg_vehSunPntBdy_set
    __swig_getmethods__["vehSunPntBdy"] = _maxwellLS.NavAttIntMsg_vehSunPntBdy_get
    if _newclass:
        vehSunPntBdy = _swig_property(_maxwellLS.NavAttIntMsg_vehSunPntBdy_get, _maxwellLS.NavAttIntMsg_vehSunPntBdy_set)

    def __init__(self):
        this = _maxwellLS.new_NavAttIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _maxwellLS.delete_NavAttIntMsg
    __del__ = lambda self: None
NavAttIntMsg_swigregister = _maxwellLS.NavAttIntMsg_swigregister
NavAttIntMsg_swigregister(NavAttIntMsg)

class sunpointIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sunpointIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sunpointIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["q_des_RN"] = _maxwellLS.sunpointIntMsg_q_des_RN_set
    __swig_getmethods__["q_des_RN"] = _maxwellLS.sunpointIntMsg_q_des_RN_get
    if _newclass:
        q_des_RN = _swig_property(_maxwellLS.sunpointIntMsg_q_des_RN_get, _maxwellLS.sunpointIntMsg_q_des_RN_set)
    __swig_setmethods__["q_BR"] = _maxwellLS.sunpointIntMsg_q_BR_set
    __swig_getmethods__["q_BR"] = _maxwellLS.sunpointIntMsg_q_BR_get
    if _newclass:
        q_BR = _swig_property(_maxwellLS.sunpointIntMsg_q_BR_get, _maxwellLS.sunpointIntMsg_q_BR_set)
    __swig_setmethods__["sunAngleError"] = _maxwellLS.sunpointIntMsg_sunAngleError_set
    __swig_getmethods__["sunAngleError"] = _maxwellLS.sunpointIntMsg_sunAngleError_get
    if _newclass:
        sunAngleError = _swig_property(_maxwellLS.sunpointIntMsg_sunAngleError_get, _maxwellLS.sunpointIntMsg_sunAngleError_set)
    __swig_setmethods__["timeTag"] = _maxwellLS.sunpointIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _maxwellLS.sunpointIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_maxwellLS.sunpointIntMsg_timeTag_get, _maxwellLS.sunpointIntMsg_timeTag_set)

    def __init__(self):
        this = _maxwellLS.new_sunpointIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _maxwellLS.delete_sunpointIntMsg
    __del__ = lambda self: None
sunpointIntMsg_swigregister = _maxwellLS.sunpointIntMsg_swigregister
sunpointIntMsg_swigregister(sunpointIntMsg)

class CSSConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCSS"] = _maxwellLS.CSSConfigFswMsg_nCSS_set
    __swig_getmethods__["nCSS"] = _maxwellLS.CSSConfigFswMsg_nCSS_get
    if _newclass:
        nCSS = _swig_property(_maxwellLS.CSSConfigFswMsg_nCSS_get, _maxwellLS.CSSConfigFswMsg_nCSS_set)
    __swig_setmethods__["cssVals"] = _maxwellLS.CSSConfigFswMsg_cssVals_set
    __swig_getmethods__["cssVals"] = _maxwellLS.CSSConfigFswMsg_cssVals_get
    if _newclass:
        cssVals = _swig_property(_maxwellLS.CSSConfigFswMsg_cssVals_get, _maxwellLS.CSSConfigFswMsg_cssVals_set)

    def __init__(self):
        this = _maxwellLS.new_CSSConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _maxwellLS.delete_CSSConfigFswMsg
    __del__ = lambda self: None
CSSConfigFswMsg_swigregister = _maxwellLS.CSSConfigFswMsg_swigregister
CSSConfigFswMsg_swigregister(CSSConfigFswMsg)

class CSSUnitConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSUnitConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSUnitConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nHat_B"] = _maxwellLS.CSSUnitConfigFswMsg_nHat_B_set
    __swig_getmethods__["nHat_B"] = _maxwellLS.CSSUnitConfigFswMsg_nHat_B_get
    if _newclass:
        nHat_B = _swig_property(_maxwellLS.CSSUnitConfigFswMsg_nHat_B_get, _maxwellLS.CSSUnitConfigFswMsg_nHat_B_set)
    __swig_setmethods__["CBias"] = _maxwellLS.CSSUnitConfigFswMsg_CBias_set
    __swig_getmethods__["CBias"] = _maxwellLS.CSSUnitConfigFswMsg_CBias_get
    if _newclass:
        CBias = _swig_property(_maxwellLS.CSSUnitConfigFswMsg_CBias_get, _maxwellLS.CSSUnitConfigFswMsg_CBias_set)

    def __init__(self):
        this = _maxwellLS.new_CSSUnitConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _maxwellLS.delete_CSSUnitConfigFswMsg
    __del__ = lambda self: None
CSSUnitConfigFswMsg_swigregister = _maxwellLS.CSSUnitConfigFswMsg_swigregister
CSSUnitConfigFswMsg_swigregister(CSSUnitConfigFswMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


