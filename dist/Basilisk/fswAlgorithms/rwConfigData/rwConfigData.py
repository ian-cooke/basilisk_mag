# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rwConfigData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rwConfigData')
    _rwConfigData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rwConfigData', [dirname(__file__)])
        except ImportError:
            import _rwConfigData
            return _rwConfigData
        try:
            _mod = imp.load_module('_rwConfigData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rwConfigData = swig_import_helper()
    del swig_import_helper
else:
    import _rwConfigData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _rwConfigData.new_doubleArray(nelements)
new_doubleArray = _rwConfigData.new_doubleArray

def delete_doubleArray(ary):
    return _rwConfigData.delete_doubleArray(ary)
delete_doubleArray = _rwConfigData.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _rwConfigData.doubleArray_getitem(ary, index)
doubleArray_getitem = _rwConfigData.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _rwConfigData.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _rwConfigData.doubleArray_setitem

def new_longArray(nelements):
    return _rwConfigData.new_longArray(nelements)
new_longArray = _rwConfigData.new_longArray

def delete_longArray(ary):
    return _rwConfigData.delete_longArray(ary)
delete_longArray = _rwConfigData.delete_longArray

def longArray_getitem(ary, index):
    return _rwConfigData.longArray_getitem(ary, index)
longArray_getitem = _rwConfigData.longArray_getitem

def longArray_setitem(ary, index, value):
    return _rwConfigData.longArray_setitem(ary, index, value)
longArray_setitem = _rwConfigData.longArray_setitem

def new_intArray(nelements):
    return _rwConfigData.new_intArray(nelements)
new_intArray = _rwConfigData.new_intArray

def delete_intArray(ary):
    return _rwConfigData.delete_intArray(ary)
delete_intArray = _rwConfigData.delete_intArray

def intArray_getitem(ary, index):
    return _rwConfigData.intArray_getitem(ary, index)
intArray_getitem = _rwConfigData.intArray_getitem

def intArray_setitem(ary, index, value):
    return _rwConfigData.intArray_setitem(ary, index, value)
intArray_setitem = _rwConfigData.intArray_setitem

def new_shortArray(nelements):
    return _rwConfigData.new_shortArray(nelements)
new_shortArray = _rwConfigData.new_shortArray

def delete_shortArray(ary):
    return _rwConfigData.delete_shortArray(ary)
delete_shortArray = _rwConfigData.delete_shortArray

def shortArray_getitem(ary, index):
    return _rwConfigData.shortArray_getitem(ary, index)
shortArray_getitem = _rwConfigData.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _rwConfigData.shortArray_setitem(ary, index, value)
shortArray_setitem = _rwConfigData.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_rwConfigData = _rwConfigData.Update_rwConfigData
SelfInit_rwConfigData = _rwConfigData.SelfInit_rwConfigData
CrossInit_rwConfigData = _rwConfigData.CrossInit_rwConfigData
Reset_rwConfigData = _rwConfigData.Reset_rwConfigData
sizeof_RWArrayConfigFswMsg = _rwConfigData.sizeof_RWArrayConfigFswMsg
sizeof_rwConfigData_Config = _rwConfigData.sizeof_rwConfigData_Config
sizeof_VehicleConfigFswMsg = _rwConfigData.sizeof_VehicleConfigFswMsg
class rwConfigData_Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwConfigData_Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwConfigData_Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rwConstellation"] = _rwConfigData.rwConfigData_Config_rwConstellation_set
    __swig_getmethods__["rwConstellation"] = _rwConfigData.rwConfigData_Config_rwConstellation_get
    if _newclass:
        rwConstellation = _swig_property(_rwConfigData.rwConfigData_Config_rwConstellation_get, _rwConfigData.rwConfigData_Config_rwConstellation_set)
    __swig_setmethods__["rwConfigParamsOut"] = _rwConfigData.rwConfigData_Config_rwConfigParamsOut_set
    __swig_getmethods__["rwConfigParamsOut"] = _rwConfigData.rwConfigData_Config_rwConfigParamsOut_get
    if _newclass:
        rwConfigParamsOut = _swig_property(_rwConfigData.rwConfigData_Config_rwConfigParamsOut_get, _rwConfigData.rwConfigData_Config_rwConfigParamsOut_set)
    __swig_setmethods__["rwConstellationInMsgName"] = _rwConfigData.rwConfigData_Config_rwConstellationInMsgName_set
    __swig_getmethods__["rwConstellationInMsgName"] = _rwConfigData.rwConfigData_Config_rwConstellationInMsgName_get
    if _newclass:
        rwConstellationInMsgName = _swig_property(_rwConfigData.rwConfigData_Config_rwConstellationInMsgName_get, _rwConfigData.rwConfigData_Config_rwConstellationInMsgName_set)
    __swig_setmethods__["rwConstellationInMsgID"] = _rwConfigData.rwConfigData_Config_rwConstellationInMsgID_set
    __swig_getmethods__["rwConstellationInMsgID"] = _rwConfigData.rwConfigData_Config_rwConstellationInMsgID_get
    if _newclass:
        rwConstellationInMsgID = _swig_property(_rwConfigData.rwConfigData_Config_rwConstellationInMsgID_get, _rwConfigData.rwConfigData_Config_rwConstellationInMsgID_set)
    __swig_setmethods__["rwParamsOutMsgName"] = _rwConfigData.rwConfigData_Config_rwParamsOutMsgName_set
    __swig_getmethods__["rwParamsOutMsgName"] = _rwConfigData.rwConfigData_Config_rwParamsOutMsgName_get
    if _newclass:
        rwParamsOutMsgName = _swig_property(_rwConfigData.rwConfigData_Config_rwParamsOutMsgName_get, _rwConfigData.rwConfigData_Config_rwParamsOutMsgName_set)
    __swig_setmethods__["rwParamsOutMsgID"] = _rwConfigData.rwConfigData_Config_rwParamsOutMsgID_set
    __swig_getmethods__["rwParamsOutMsgID"] = _rwConfigData.rwConfigData_Config_rwParamsOutMsgID_get
    if _newclass:
        rwParamsOutMsgID = _swig_property(_rwConfigData.rwConfigData_Config_rwParamsOutMsgID_get, _rwConfigData.rwConfigData_Config_rwParamsOutMsgID_set)
    __swig_setmethods__["vehConfigInMsgName"] = _rwConfigData.rwConfigData_Config_vehConfigInMsgName_set
    __swig_getmethods__["vehConfigInMsgName"] = _rwConfigData.rwConfigData_Config_vehConfigInMsgName_get
    if _newclass:
        vehConfigInMsgName = _swig_property(_rwConfigData.rwConfigData_Config_vehConfigInMsgName_get, _rwConfigData.rwConfigData_Config_vehConfigInMsgName_set)
    __swig_setmethods__["vehConfigInMsgID"] = _rwConfigData.rwConfigData_Config_vehConfigInMsgID_set
    __swig_getmethods__["vehConfigInMsgID"] = _rwConfigData.rwConfigData_Config_vehConfigInMsgID_get
    if _newclass:
        vehConfigInMsgID = _swig_property(_rwConfigData.rwConfigData_Config_vehConfigInMsgID_get, _rwConfigData.rwConfigData_Config_vehConfigInMsgID_set)

    def __init__(self):
        this = _rwConfigData.new_rwConfigData_Config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwConfigData.delete_rwConfigData_Config
    __del__ = lambda self: None
rwConfigData_Config_swigregister = _rwConfigData.rwConfigData_Config_swigregister
rwConfigData_Config_swigregister(rwConfigData_Config)

class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _rwConfigData.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _rwConfigData.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_rwConfigData.VehicleConfigFswMsg_ISCPntB_B_get, _rwConfigData.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _rwConfigData.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _rwConfigData.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_rwConfigData.VehicleConfigFswMsg_CoM_B_get, _rwConfigData.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _rwConfigData.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _rwConfigData.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_rwConfigData.VehicleConfigFswMsg_CurrentADCSState_get, _rwConfigData.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _rwConfigData.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwConfigData.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _rwConfigData.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

class RWArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GsMatrix_B"] = _rwConfigData.RWArrayConfigFswMsg_GsMatrix_B_set
    __swig_getmethods__["GsMatrix_B"] = _rwConfigData.RWArrayConfigFswMsg_GsMatrix_B_get
    if _newclass:
        GsMatrix_B = _swig_property(_rwConfigData.RWArrayConfigFswMsg_GsMatrix_B_get, _rwConfigData.RWArrayConfigFswMsg_GsMatrix_B_set)
    __swig_setmethods__["JsList"] = _rwConfigData.RWArrayConfigFswMsg_JsList_set
    __swig_getmethods__["JsList"] = _rwConfigData.RWArrayConfigFswMsg_JsList_get
    if _newclass:
        JsList = _swig_property(_rwConfigData.RWArrayConfigFswMsg_JsList_get, _rwConfigData.RWArrayConfigFswMsg_JsList_set)
    __swig_setmethods__["numRW"] = _rwConfigData.RWArrayConfigFswMsg_numRW_set
    __swig_getmethods__["numRW"] = _rwConfigData.RWArrayConfigFswMsg_numRW_get
    if _newclass:
        numRW = _swig_property(_rwConfigData.RWArrayConfigFswMsg_numRW_get, _rwConfigData.RWArrayConfigFswMsg_numRW_set)
    __swig_setmethods__["uMax"] = _rwConfigData.RWArrayConfigFswMsg_uMax_set
    __swig_getmethods__["uMax"] = _rwConfigData.RWArrayConfigFswMsg_uMax_get
    if _newclass:
        uMax = _swig_property(_rwConfigData.RWArrayConfigFswMsg_uMax_get, _rwConfigData.RWArrayConfigFswMsg_uMax_set)

    def __init__(self):
        this = _rwConfigData.new_RWArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwConfigData.delete_RWArrayConfigFswMsg
    __del__ = lambda self: None
RWArrayConfigFswMsg_swigregister = _rwConfigData.RWArrayConfigFswMsg_swigregister
RWArrayConfigFswMsg_swigregister(RWArrayConfigFswMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


