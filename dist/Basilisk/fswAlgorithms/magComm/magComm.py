# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_magComm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_magComm')
    _magComm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_magComm', [dirname(__file__)])
        except ImportError:
            import _magComm
            return _magComm
        try:
            _mod = imp.load_module('_magComm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _magComm = swig_import_helper()
    del swig_import_helper
else:
    import _magComm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _magComm.new_doubleArray(nelements)
new_doubleArray = _magComm.new_doubleArray

def delete_doubleArray(ary):
    return _magComm.delete_doubleArray(ary)
delete_doubleArray = _magComm.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _magComm.doubleArray_getitem(ary, index)
doubleArray_getitem = _magComm.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _magComm.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _magComm.doubleArray_setitem

def new_longArray(nelements):
    return _magComm.new_longArray(nelements)
new_longArray = _magComm.new_longArray

def delete_longArray(ary):
    return _magComm.delete_longArray(ary)
delete_longArray = _magComm.delete_longArray

def longArray_getitem(ary, index):
    return _magComm.longArray_getitem(ary, index)
longArray_getitem = _magComm.longArray_getitem

def longArray_setitem(ary, index, value):
    return _magComm.longArray_setitem(ary, index, value)
longArray_setitem = _magComm.longArray_setitem

def new_intArray(nelements):
    return _magComm.new_intArray(nelements)
new_intArray = _magComm.new_intArray

def delete_intArray(ary):
    return _magComm.delete_intArray(ary)
delete_intArray = _magComm.delete_intArray

def intArray_getitem(ary, index):
    return _magComm.intArray_getitem(ary, index)
intArray_getitem = _magComm.intArray_getitem

def intArray_setitem(ary, index, value):
    return _magComm.intArray_setitem(ary, index, value)
intArray_setitem = _magComm.intArray_setitem

def new_shortArray(nelements):
    return _magComm.new_shortArray(nelements)
new_shortArray = _magComm.new_shortArray

def delete_shortArray(ary):
    return _magComm.delete_shortArray(ary)
delete_shortArray = _magComm.delete_shortArray

def shortArray_getitem(ary, index):
    return _magComm.shortArray_getitem(ary, index)
shortArray_getitem = _magComm.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _magComm.shortArray_setitem(ary, index, value)
shortArray_setitem = _magComm.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_magProcessTelem = _magComm.Update_magProcessTelem
SelfInit_magProcessTelem = _magComm.SelfInit_magProcessTelem
CrossInit_magProcessTelem = _magComm.CrossInit_magProcessTelem
class MagMeterIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagMeterIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagMeterIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _magComm.MagMeterIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _magComm.MagMeterIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_magComm.MagMeterIntMsg_timeTag_get, _magComm.MagMeterIntMsg_timeTag_set)
    __swig_setmethods__["mag_bf"] = _magComm.MagMeterIntMsg_mag_bf_set
    __swig_getmethods__["mag_bf"] = _magComm.MagMeterIntMsg_mag_bf_get
    if _newclass:
        mag_bf = _swig_property(_magComm.MagMeterIntMsg_mag_bf_get, _magComm.MagMeterIntMsg_mag_bf_set)
    __swig_setmethods__["mag_hill"] = _magComm.MagMeterIntMsg_mag_hill_set
    __swig_getmethods__["mag_hill"] = _magComm.MagMeterIntMsg_mag_hill_get
    if _newclass:
        mag_hill = _swig_property(_magComm.MagMeterIntMsg_mag_hill_get, _magComm.MagMeterIntMsg_mag_hill_set)

    def __init__(self):
        this = _magComm.new_MagMeterIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _magComm.delete_MagMeterIntMsg
    __del__ = lambda self: None
MagMeterIntMsg_swigregister = _magComm.MagMeterIntMsg_swigregister
MagMeterIntMsg_swigregister(MagMeterIntMsg)

class MagFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _magComm.MagFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _magComm.MagFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_magComm.MagFswMsg_timeTag_get, _magComm.MagFswMsg_timeTag_set)

    def __init__(self):
        this = _magComm.new_MagFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _magComm.delete_MagFswMsg
    __del__ = lambda self: None
MagFswMsg_swigregister = _magComm.MagFswMsg_swigregister
MagFswMsg_swigregister(MagFswMsg)

class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _magComm.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _magComm.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_magComm.VehicleConfigFswMsg_ISCPntB_B_get, _magComm.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _magComm.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _magComm.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_magComm.VehicleConfigFswMsg_CoM_B_get, _magComm.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _magComm.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _magComm.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_magComm.VehicleConfigFswMsg_CurrentADCSState_get, _magComm.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _magComm.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _magComm.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _magComm.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

sizeof_MagFswMsg = _magComm.sizeof_MagFswMsg
sizeof_MagConfigData = _magComm.sizeof_MagConfigData
sizeof_MagMeterIntMsg = _magComm.sizeof_MagMeterIntMsg
sizeof_VehicleConfigFswMsg = _magComm.sizeof_VehicleConfigFswMsg
class MagConfigData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagConfigData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagConfigData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dcm_BP"] = _magComm.MagConfigData_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _magComm.MagConfigData_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_magComm.MagConfigData_dcm_BP_get, _magComm.MagConfigData_dcm_BP_set)
    __swig_setmethods__["InputDataName"] = _magComm.MagConfigData_InputDataName_set
    __swig_getmethods__["InputDataName"] = _magComm.MagConfigData_InputDataName_get
    if _newclass:
        InputDataName = _swig_property(_magComm.MagConfigData_InputDataName_get, _magComm.MagConfigData_InputDataName_set)
    __swig_setmethods__["InputPropsName"] = _magComm.MagConfigData_InputPropsName_set
    __swig_getmethods__["InputPropsName"] = _magComm.MagConfigData_InputPropsName_get
    if _newclass:
        InputPropsName = _swig_property(_magComm.MagConfigData_InputPropsName_get, _magComm.MagConfigData_InputPropsName_set)
    __swig_setmethods__["OutputDataName"] = _magComm.MagConfigData_OutputDataName_set
    __swig_getmethods__["OutputDataName"] = _magComm.MagConfigData_OutputDataName_get
    if _newclass:
        OutputDataName = _swig_property(_magComm.MagConfigData_OutputDataName_get, _magComm.MagConfigData_OutputDataName_set)
    __swig_setmethods__["SensorMsgID"] = _magComm.MagConfigData_SensorMsgID_set
    __swig_getmethods__["SensorMsgID"] = _magComm.MagConfigData_SensorMsgID_get
    if _newclass:
        SensorMsgID = _swig_property(_magComm.MagConfigData_SensorMsgID_get, _magComm.MagConfigData_SensorMsgID_set)
    __swig_setmethods__["PropsMsgID"] = _magComm.MagConfigData_PropsMsgID_set
    __swig_getmethods__["PropsMsgID"] = _magComm.MagConfigData_PropsMsgID_get
    if _newclass:
        PropsMsgID = _swig_property(_magComm.MagConfigData_PropsMsgID_get, _magComm.MagConfigData_PropsMsgID_set)
    __swig_setmethods__["OutputMsgID"] = _magComm.MagConfigData_OutputMsgID_set
    __swig_getmethods__["OutputMsgID"] = _magComm.MagConfigData_OutputMsgID_get
    if _newclass:
        OutputMsgID = _swig_property(_magComm.MagConfigData_OutputMsgID_get, _magComm.MagConfigData_OutputMsgID_set)
    __swig_setmethods__["LocalOutput"] = _magComm.MagConfigData_LocalOutput_set
    __swig_getmethods__["LocalOutput"] = _magComm.MagConfigData_LocalOutput_get
    if _newclass:
        LocalOutput = _swig_property(_magComm.MagConfigData_LocalOutput_get, _magComm.MagConfigData_LocalOutput_set)

    def __init__(self):
        this = _magComm.new_MagConfigData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _magComm.delete_MagConfigData
    __del__ = lambda self: None
MagConfigData_swigregister = _magComm.MagConfigData_swigregister
MagConfigData_swigregister(MagConfigData)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


