# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dvAttEffect')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dvAttEffect')
    _dvAttEffect = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dvAttEffect', [dirname(__file__)])
        except ImportError:
            import _dvAttEffect
            return _dvAttEffect
        try:
            _mod = imp.load_module('_dvAttEffect', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dvAttEffect = swig_import_helper()
    del swig_import_helper
else:
    import _dvAttEffect
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _dvAttEffect.new_doubleArray(nelements)
new_doubleArray = _dvAttEffect.new_doubleArray

def delete_doubleArray(ary):
    return _dvAttEffect.delete_doubleArray(ary)
delete_doubleArray = _dvAttEffect.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _dvAttEffect.doubleArray_getitem(ary, index)
doubleArray_getitem = _dvAttEffect.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _dvAttEffect.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _dvAttEffect.doubleArray_setitem

def new_longArray(nelements):
    return _dvAttEffect.new_longArray(nelements)
new_longArray = _dvAttEffect.new_longArray

def delete_longArray(ary):
    return _dvAttEffect.delete_longArray(ary)
delete_longArray = _dvAttEffect.delete_longArray

def longArray_getitem(ary, index):
    return _dvAttEffect.longArray_getitem(ary, index)
longArray_getitem = _dvAttEffect.longArray_getitem

def longArray_setitem(ary, index, value):
    return _dvAttEffect.longArray_setitem(ary, index, value)
longArray_setitem = _dvAttEffect.longArray_setitem

def new_intArray(nelements):
    return _dvAttEffect.new_intArray(nelements)
new_intArray = _dvAttEffect.new_intArray

def delete_intArray(ary):
    return _dvAttEffect.delete_intArray(ary)
delete_intArray = _dvAttEffect.delete_intArray

def intArray_getitem(ary, index):
    return _dvAttEffect.intArray_getitem(ary, index)
intArray_getitem = _dvAttEffect.intArray_getitem

def intArray_setitem(ary, index, value):
    return _dvAttEffect.intArray_setitem(ary, index, value)
intArray_setitem = _dvAttEffect.intArray_setitem

def new_shortArray(nelements):
    return _dvAttEffect.new_shortArray(nelements)
new_shortArray = _dvAttEffect.new_shortArray

def delete_shortArray(ary):
    return _dvAttEffect.delete_shortArray(ary)
delete_shortArray = _dvAttEffect.delete_shortArray

def shortArray_getitem(ary, index):
    return _dvAttEffect.shortArray_getitem(ary, index)
shortArray_getitem = _dvAttEffect.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _dvAttEffect.shortArray_setitem(ary, index, value)
shortArray_setitem = _dvAttEffect.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_dvAttEffect = _dvAttEffect.Update_dvAttEffect
SelfInit_dvAttEffect = _dvAttEffect.SelfInit_dvAttEffect
CrossInit_dvAttEffect = _dvAttEffect.CrossInit_dvAttEffect
Reset_dvAttEffect = _dvAttEffect.Reset_dvAttEffect
class THRArrayOnTimeCmdIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayOnTimeCmdIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayOnTimeCmdIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OnTimeRequest"] = _dvAttEffect.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set
    __swig_getmethods__["OnTimeRequest"] = _dvAttEffect.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get
    if _newclass:
        OnTimeRequest = _swig_property(_dvAttEffect.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get, _dvAttEffect.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set)

    def __init__(self):
        this = _dvAttEffect.new_THRArrayOnTimeCmdIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dvAttEffect.delete_THRArrayOnTimeCmdIntMsg
    __del__ = lambda self: None
THRArrayOnTimeCmdIntMsg_swigregister = _dvAttEffect.THRArrayOnTimeCmdIntMsg_swigregister
THRArrayOnTimeCmdIntMsg_swigregister(THRArrayOnTimeCmdIntMsg)

sizeof_effPairs = _dvAttEffect.sizeof_effPairs
sizeof_ThrustGroupData = _dvAttEffect.sizeof_ThrustGroupData
sizeof_dvAttEffectConfig = _dvAttEffect.sizeof_dvAttEffectConfig
sizeof_THRArrayOnTimeCmdIntMsg = _dvAttEffect.sizeof_THRArrayOnTimeCmdIntMsg
MAX_NUM_THR_GROUPS = _dvAttEffect.MAX_NUM_THR_GROUPS
class effPairs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, effPairs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, effPairs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["onTime"] = _dvAttEffect.effPairs_onTime_set
    __swig_getmethods__["onTime"] = _dvAttEffect.effPairs_onTime_get
    if _newclass:
        onTime = _swig_property(_dvAttEffect.effPairs_onTime_get, _dvAttEffect.effPairs_onTime_set)
    __swig_setmethods__["thrustIndex"] = _dvAttEffect.effPairs_thrustIndex_set
    __swig_getmethods__["thrustIndex"] = _dvAttEffect.effPairs_thrustIndex_get
    if _newclass:
        thrustIndex = _swig_property(_dvAttEffect.effPairs_thrustIndex_get, _dvAttEffect.effPairs_thrustIndex_set)

    def __init__(self):
        this = _dvAttEffect.new_effPairs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dvAttEffect.delete_effPairs
    __del__ = lambda self: None
effPairs_swigregister = _dvAttEffect.effPairs_swigregister
effPairs_swigregister(effPairs)

class dvAttEffectConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvAttEffectConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvAttEffectConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputControlName"] = _dvAttEffect.dvAttEffectConfig_inputControlName_set
    __swig_getmethods__["inputControlName"] = _dvAttEffect.dvAttEffectConfig_inputControlName_get
    if _newclass:
        inputControlName = _swig_property(_dvAttEffect.dvAttEffectConfig_inputControlName_get, _dvAttEffect.dvAttEffectConfig_inputControlName_set)
    __swig_setmethods__["inputMsgID"] = _dvAttEffect.dvAttEffectConfig_inputMsgID_set
    __swig_getmethods__["inputMsgID"] = _dvAttEffect.dvAttEffectConfig_inputMsgID_get
    if _newclass:
        inputMsgID = _swig_property(_dvAttEffect.dvAttEffectConfig_inputMsgID_get, _dvAttEffect.dvAttEffectConfig_inputMsgID_set)
    __swig_setmethods__["numThrGroups"] = _dvAttEffect.dvAttEffectConfig_numThrGroups_set
    __swig_getmethods__["numThrGroups"] = _dvAttEffect.dvAttEffectConfig_numThrGroups_get
    if _newclass:
        numThrGroups = _swig_property(_dvAttEffect.dvAttEffectConfig_numThrGroups_get, _dvAttEffect.dvAttEffectConfig_numThrGroups_set)
    __swig_setmethods__["thrGroups"] = _dvAttEffect.dvAttEffectConfig_thrGroups_set
    __swig_getmethods__["thrGroups"] = _dvAttEffect.dvAttEffectConfig_thrGroups_get
    if _newclass:
        thrGroups = _swig_property(_dvAttEffect.dvAttEffectConfig_thrGroups_get, _dvAttEffect.dvAttEffectConfig_thrGroups_set)

    def __init__(self):
        this = _dvAttEffect.new_dvAttEffectConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dvAttEffect.delete_dvAttEffectConfig
    __del__ = lambda self: None
dvAttEffectConfig_swigregister = _dvAttEffect.dvAttEffectConfig_swigregister
dvAttEffectConfig_swigregister(dvAttEffectConfig)


def effectorVSort(Input, Output, dim):
    return _dvAttEffect.effectorVSort(Input, Output, dim)
effectorVSort = _dvAttEffect.effectorVSort

def computeSingleThrustBlock(thrData, callTime, contrReq, moduleID):
    return _dvAttEffect.computeSingleThrustBlock(thrData, callTime, contrReq, moduleID)
computeSingleThrustBlock = _dvAttEffect.computeSingleThrustBlock

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


