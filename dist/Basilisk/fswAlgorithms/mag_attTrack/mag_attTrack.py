# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mag_attTrack')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mag_attTrack')
    _mag_attTrack = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mag_attTrack', [dirname(__file__)])
        except ImportError:
            import _mag_attTrack
            return _mag_attTrack
        try:
            _mod = imp.load_module('_mag_attTrack', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mag_attTrack = swig_import_helper()
    del swig_import_helper
else:
    import _mag_attTrack
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _mag_attTrack.new_doubleArray(nelements)
new_doubleArray = _mag_attTrack.new_doubleArray

def delete_doubleArray(ary):
    return _mag_attTrack.delete_doubleArray(ary)
delete_doubleArray = _mag_attTrack.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _mag_attTrack.doubleArray_getitem(ary, index)
doubleArray_getitem = _mag_attTrack.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _mag_attTrack.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _mag_attTrack.doubleArray_setitem

def new_longArray(nelements):
    return _mag_attTrack.new_longArray(nelements)
new_longArray = _mag_attTrack.new_longArray

def delete_longArray(ary):
    return _mag_attTrack.delete_longArray(ary)
delete_longArray = _mag_attTrack.delete_longArray

def longArray_getitem(ary, index):
    return _mag_attTrack.longArray_getitem(ary, index)
longArray_getitem = _mag_attTrack.longArray_getitem

def longArray_setitem(ary, index, value):
    return _mag_attTrack.longArray_setitem(ary, index, value)
longArray_setitem = _mag_attTrack.longArray_setitem

def new_intArray(nelements):
    return _mag_attTrack.new_intArray(nelements)
new_intArray = _mag_attTrack.new_intArray

def delete_intArray(ary):
    return _mag_attTrack.delete_intArray(ary)
delete_intArray = _mag_attTrack.delete_intArray

def intArray_getitem(ary, index):
    return _mag_attTrack.intArray_getitem(ary, index)
intArray_getitem = _mag_attTrack.intArray_getitem

def intArray_setitem(ary, index, value):
    return _mag_attTrack.intArray_setitem(ary, index, value)
intArray_setitem = _mag_attTrack.intArray_setitem

def new_shortArray(nelements):
    return _mag_attTrack.new_shortArray(nelements)
new_shortArray = _mag_attTrack.new_shortArray

def delete_shortArray(ary):
    return _mag_attTrack.delete_shortArray(ary)
delete_shortArray = _mag_attTrack.delete_shortArray

def shortArray_getitem(ary, index):
    return _mag_attTrack.shortArray_getitem(ary, index)
shortArray_getitem = _mag_attTrack.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _mag_attTrack.shortArray_setitem(ary, index, value)
shortArray_setitem = _mag_attTrack.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_mag_attTrack = _mag_attTrack.Update_mag_attTrack
SelfInit_mag_attTrack = _mag_attTrack.SelfInit_mag_attTrack
CrossInit_mag_attTrack = _mag_attTrack.CrossInit_mag_attTrack
Reset_mag_attTrack = _mag_attTrack.Reset_mag_attTrack
class AttGuidFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttGuidFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttGuidFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_BR"] = _mag_attTrack.AttGuidFswMsg_sigma_BR_set
    __swig_getmethods__["sigma_BR"] = _mag_attTrack.AttGuidFswMsg_sigma_BR_get
    if _newclass:
        sigma_BR = _swig_property(_mag_attTrack.AttGuidFswMsg_sigma_BR_get, _mag_attTrack.AttGuidFswMsg_sigma_BR_set)
    __swig_setmethods__["omega_BR_B"] = _mag_attTrack.AttGuidFswMsg_omega_BR_B_set
    __swig_getmethods__["omega_BR_B"] = _mag_attTrack.AttGuidFswMsg_omega_BR_B_get
    if _newclass:
        omega_BR_B = _swig_property(_mag_attTrack.AttGuidFswMsg_omega_BR_B_get, _mag_attTrack.AttGuidFswMsg_omega_BR_B_set)
    __swig_setmethods__["omega_RN_B"] = _mag_attTrack.AttGuidFswMsg_omega_RN_B_set
    __swig_getmethods__["omega_RN_B"] = _mag_attTrack.AttGuidFswMsg_omega_RN_B_get
    if _newclass:
        omega_RN_B = _swig_property(_mag_attTrack.AttGuidFswMsg_omega_RN_B_get, _mag_attTrack.AttGuidFswMsg_omega_RN_B_set)
    __swig_setmethods__["domega_RN_B"] = _mag_attTrack.AttGuidFswMsg_domega_RN_B_set
    __swig_getmethods__["domega_RN_B"] = _mag_attTrack.AttGuidFswMsg_domega_RN_B_get
    if _newclass:
        domega_RN_B = _swig_property(_mag_attTrack.AttGuidFswMsg_domega_RN_B_get, _mag_attTrack.AttGuidFswMsg_domega_RN_B_set)
    __swig_setmethods__["PRV"] = _mag_attTrack.AttGuidFswMsg_PRV_set
    __swig_getmethods__["PRV"] = _mag_attTrack.AttGuidFswMsg_PRV_get
    if _newclass:
        PRV = _swig_property(_mag_attTrack.AttGuidFswMsg_PRV_get, _mag_attTrack.AttGuidFswMsg_PRV_set)

    def __init__(self):
        this = _mag_attTrack.new_AttGuidFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mag_attTrack.delete_AttGuidFswMsg
    __del__ = lambda self: None
AttGuidFswMsg_swigregister = _mag_attTrack.AttGuidFswMsg_swigregister
AttGuidFswMsg_swigregister(AttGuidFswMsg)

class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _mag_attTrack.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _mag_attTrack.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_mag_attTrack.VehicleConfigFswMsg_ISCPntB_B_get, _mag_attTrack.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _mag_attTrack.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _mag_attTrack.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_mag_attTrack.VehicleConfigFswMsg_CoM_B_get, _mag_attTrack.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _mag_attTrack.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _mag_attTrack.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_mag_attTrack.VehicleConfigFswMsg_CurrentADCSState_get, _mag_attTrack.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _mag_attTrack.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mag_attTrack.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _mag_attTrack.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

sizeof_mag_attTrackConfig = _mag_attTrack.sizeof_mag_attTrackConfig
sizeof_AttGuidFswMsg = _mag_attTrack.sizeof_AttGuidFswMsg
sizeof_VehicleConfigFswMsg = _mag_attTrack.sizeof_VehicleConfigFswMsg
class CmdTorqueBodyIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdTorqueBodyIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdTorqueBodyIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["torqueRequestBody"] = _mag_attTrack.CmdTorqueBodyIntMsg_torqueRequestBody_set
    __swig_getmethods__["torqueRequestBody"] = _mag_attTrack.CmdTorqueBodyIntMsg_torqueRequestBody_get
    if _newclass:
        torqueRequestBody = _swig_property(_mag_attTrack.CmdTorqueBodyIntMsg_torqueRequestBody_get, _mag_attTrack.CmdTorqueBodyIntMsg_torqueRequestBody_set)

    def __init__(self):
        this = _mag_attTrack.new_CmdTorqueBodyIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mag_attTrack.delete_CmdTorqueBodyIntMsg
    __del__ = lambda self: None
CmdTorqueBodyIntMsg_swigregister = _mag_attTrack.CmdTorqueBodyIntMsg_swigregister
CmdTorqueBodyIntMsg_swigregister(CmdTorqueBodyIntMsg)

sizeof_CmdTorqueBodyIntMsg = _mag_attTrack.sizeof_CmdTorqueBodyIntMsg
class NavAttIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavAttIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavAttIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _mag_attTrack.NavAttIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _mag_attTrack.NavAttIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_mag_attTrack.NavAttIntMsg_timeTag_get, _mag_attTrack.NavAttIntMsg_timeTag_set)
    __swig_setmethods__["sigma_BN"] = _mag_attTrack.NavAttIntMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _mag_attTrack.NavAttIntMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_mag_attTrack.NavAttIntMsg_sigma_BN_get, _mag_attTrack.NavAttIntMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _mag_attTrack.NavAttIntMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _mag_attTrack.NavAttIntMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_mag_attTrack.NavAttIntMsg_omega_BN_B_get, _mag_attTrack.NavAttIntMsg_omega_BN_B_set)
    __swig_setmethods__["vehSunPntBdy"] = _mag_attTrack.NavAttIntMsg_vehSunPntBdy_set
    __swig_getmethods__["vehSunPntBdy"] = _mag_attTrack.NavAttIntMsg_vehSunPntBdy_get
    if _newclass:
        vehSunPntBdy = _swig_property(_mag_attTrack.NavAttIntMsg_vehSunPntBdy_get, _mag_attTrack.NavAttIntMsg_vehSunPntBdy_set)

    def __init__(self):
        this = _mag_attTrack.new_NavAttIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mag_attTrack.delete_NavAttIntMsg
    __del__ = lambda self: None
NavAttIntMsg_swigregister = _mag_attTrack.NavAttIntMsg_swigregister
NavAttIntMsg_swigregister(NavAttIntMsg)

sizeof_NavAttIntMsg = _mag_attTrack.sizeof_NavAttIntMsg
class mag_attTrackConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mag_attTrackConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mag_attTrackConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["K_sigma"] = _mag_attTrack.mag_attTrackConfig_K_sigma_set
    __swig_getmethods__["K_sigma"] = _mag_attTrack.mag_attTrackConfig_K_sigma_get
    if _newclass:
        K_sigma = _swig_property(_mag_attTrack.mag_attTrackConfig_K_sigma_get, _mag_attTrack.mag_attTrackConfig_K_sigma_set)
    __swig_setmethods__["K_omega"] = _mag_attTrack.mag_attTrackConfig_K_omega_set
    __swig_getmethods__["K_omega"] = _mag_attTrack.mag_attTrackConfig_K_omega_get
    if _newclass:
        K_omega = _swig_property(_mag_attTrack.mag_attTrackConfig_K_omega_get, _mag_attTrack.mag_attTrackConfig_K_omega_set)
    __swig_setmethods__["use_rw_wheels"] = _mag_attTrack.mag_attTrackConfig_use_rw_wheels_set
    __swig_getmethods__["use_rw_wheels"] = _mag_attTrack.mag_attTrackConfig_use_rw_wheels_get
    if _newclass:
        use_rw_wheels = _swig_property(_mag_attTrack.mag_attTrackConfig_use_rw_wheels_get, _mag_attTrack.mag_attTrackConfig_use_rw_wheels_set)
    __swig_setmethods__["knownTorquePntB_B"] = _mag_attTrack.mag_attTrackConfig_knownTorquePntB_B_set
    __swig_getmethods__["knownTorquePntB_B"] = _mag_attTrack.mag_attTrackConfig_knownTorquePntB_B_get
    if _newclass:
        knownTorquePntB_B = _swig_property(_mag_attTrack.mag_attTrackConfig_knownTorquePntB_B_get, _mag_attTrack.mag_attTrackConfig_knownTorquePntB_B_set)
    __swig_setmethods__["controlLaw"] = _mag_attTrack.mag_attTrackConfig_controlLaw_set
    __swig_getmethods__["controlLaw"] = _mag_attTrack.mag_attTrackConfig_controlLaw_get
    if _newclass:
        controlLaw = _swig_property(_mag_attTrack.mag_attTrackConfig_controlLaw_get, _mag_attTrack.mag_attTrackConfig_controlLaw_set)
    __swig_setmethods__["vehConfigInMsgName"] = _mag_attTrack.mag_attTrackConfig_vehConfigInMsgName_set
    __swig_getmethods__["vehConfigInMsgName"] = _mag_attTrack.mag_attTrackConfig_vehConfigInMsgName_get
    if _newclass:
        vehConfigInMsgName = _swig_property(_mag_attTrack.mag_attTrackConfig_vehConfigInMsgName_get, _mag_attTrack.mag_attTrackConfig_vehConfigInMsgName_set)
    __swig_setmethods__["vehConfigInMsgID"] = _mag_attTrack.mag_attTrackConfig_vehConfigInMsgID_set
    __swig_getmethods__["vehConfigInMsgID"] = _mag_attTrack.mag_attTrackConfig_vehConfigInMsgID_get
    if _newclass:
        vehConfigInMsgID = _swig_property(_mag_attTrack.mag_attTrackConfig_vehConfigInMsgID_get, _mag_attTrack.mag_attTrackConfig_vehConfigInMsgID_set)
    __swig_setmethods__["rwParamsInMsgName"] = _mag_attTrack.mag_attTrackConfig_rwParamsInMsgName_set
    __swig_getmethods__["rwParamsInMsgName"] = _mag_attTrack.mag_attTrackConfig_rwParamsInMsgName_get
    if _newclass:
        rwParamsInMsgName = _swig_property(_mag_attTrack.mag_attTrackConfig_rwParamsInMsgName_get, _mag_attTrack.mag_attTrackConfig_rwParamsInMsgName_set)
    __swig_setmethods__["rwParamsInMsgID"] = _mag_attTrack.mag_attTrackConfig_rwParamsInMsgID_set
    __swig_getmethods__["rwParamsInMsgID"] = _mag_attTrack.mag_attTrackConfig_rwParamsInMsgID_get
    if _newclass:
        rwParamsInMsgID = _swig_property(_mag_attTrack.mag_attTrackConfig_rwParamsInMsgID_get, _mag_attTrack.mag_attTrackConfig_rwParamsInMsgID_set)
    __swig_setmethods__["rwAvailInMsgName"] = _mag_attTrack.mag_attTrackConfig_rwAvailInMsgName_set
    __swig_getmethods__["rwAvailInMsgName"] = _mag_attTrack.mag_attTrackConfig_rwAvailInMsgName_get
    if _newclass:
        rwAvailInMsgName = _swig_property(_mag_attTrack.mag_attTrackConfig_rwAvailInMsgName_get, _mag_attTrack.mag_attTrackConfig_rwAvailInMsgName_set)
    __swig_setmethods__["rwAvailInMsgID"] = _mag_attTrack.mag_attTrackConfig_rwAvailInMsgID_set
    __swig_getmethods__["rwAvailInMsgID"] = _mag_attTrack.mag_attTrackConfig_rwAvailInMsgID_get
    if _newclass:
        rwAvailInMsgID = _swig_property(_mag_attTrack.mag_attTrackConfig_rwAvailInMsgID_get, _mag_attTrack.mag_attTrackConfig_rwAvailInMsgID_set)
    __swig_setmethods__["inputGuidName"] = _mag_attTrack.mag_attTrackConfig_inputGuidName_set
    __swig_getmethods__["inputGuidName"] = _mag_attTrack.mag_attTrackConfig_inputGuidName_get
    if _newclass:
        inputGuidName = _swig_property(_mag_attTrack.mag_attTrackConfig_inputGuidName_get, _mag_attTrack.mag_attTrackConfig_inputGuidName_set)
    __swig_setmethods__["inputGuidID"] = _mag_attTrack.mag_attTrackConfig_inputGuidID_set
    __swig_getmethods__["inputGuidID"] = _mag_attTrack.mag_attTrackConfig_inputGuidID_get
    if _newclass:
        inputGuidID = _swig_property(_mag_attTrack.mag_attTrackConfig_inputGuidID_get, _mag_attTrack.mag_attTrackConfig_inputGuidID_set)
    __swig_setmethods__["inputNavAttName"] = _mag_attTrack.mag_attTrackConfig_inputNavAttName_set
    __swig_getmethods__["inputNavAttName"] = _mag_attTrack.mag_attTrackConfig_inputNavAttName_get
    if _newclass:
        inputNavAttName = _swig_property(_mag_attTrack.mag_attTrackConfig_inputNavAttName_get, _mag_attTrack.mag_attTrackConfig_inputNavAttName_set)
    __swig_setmethods__["inputNavAttID"] = _mag_attTrack.mag_attTrackConfig_inputNavAttID_set
    __swig_getmethods__["inputNavAttID"] = _mag_attTrack.mag_attTrackConfig_inputNavAttID_get
    if _newclass:
        inputNavAttID = _swig_property(_mag_attTrack.mag_attTrackConfig_inputNavAttID_get, _mag_attTrack.mag_attTrackConfig_inputNavAttID_set)
    __swig_setmethods__["outputDataName"] = _mag_attTrack.mag_attTrackConfig_outputDataName_set
    __swig_getmethods__["outputDataName"] = _mag_attTrack.mag_attTrackConfig_outputDataName_get
    if _newclass:
        outputDataName = _swig_property(_mag_attTrack.mag_attTrackConfig_outputDataName_get, _mag_attTrack.mag_attTrackConfig_outputDataName_set)
    __swig_setmethods__["inputMagMeterName"] = _mag_attTrack.mag_attTrackConfig_inputMagMeterName_set
    __swig_getmethods__["inputMagMeterName"] = _mag_attTrack.mag_attTrackConfig_inputMagMeterName_get
    if _newclass:
        inputMagMeterName = _swig_property(_mag_attTrack.mag_attTrackConfig_inputMagMeterName_get, _mag_attTrack.mag_attTrackConfig_inputMagMeterName_set)
    __swig_setmethods__["inputVehicleConfigDataName"] = _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataName_set
    __swig_getmethods__["inputVehicleConfigDataName"] = _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataName_get
    if _newclass:
        inputVehicleConfigDataName = _swig_property(_mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataName_get, _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataName_set)
    __swig_setmethods__["inputRWSpeedsName"] = _mag_attTrack.mag_attTrackConfig_inputRWSpeedsName_set
    __swig_getmethods__["inputRWSpeedsName"] = _mag_attTrack.mag_attTrackConfig_inputRWSpeedsName_get
    if _newclass:
        inputRWSpeedsName = _swig_property(_mag_attTrack.mag_attTrackConfig_inputRWSpeedsName_get, _mag_attTrack.mag_attTrackConfig_inputRWSpeedsName_set)
    __swig_setmethods__["inputRWSpeedsID"] = _mag_attTrack.mag_attTrackConfig_inputRWSpeedsID_set
    __swig_getmethods__["inputRWSpeedsID"] = _mag_attTrack.mag_attTrackConfig_inputRWSpeedsID_get
    if _newclass:
        inputRWSpeedsID = _swig_property(_mag_attTrack.mag_attTrackConfig_inputRWSpeedsID_get, _mag_attTrack.mag_attTrackConfig_inputRWSpeedsID_set)
    __swig_setmethods__["inputMagMeterID"] = _mag_attTrack.mag_attTrackConfig_inputMagMeterID_set
    __swig_getmethods__["inputMagMeterID"] = _mag_attTrack.mag_attTrackConfig_inputMagMeterID_get
    if _newclass:
        inputMagMeterID = _swig_property(_mag_attTrack.mag_attTrackConfig_inputMagMeterID_get, _mag_attTrack.mag_attTrackConfig_inputMagMeterID_set)
    __swig_setmethods__["outputMsgID"] = _mag_attTrack.mag_attTrackConfig_outputMsgID_set
    __swig_getmethods__["outputMsgID"] = _mag_attTrack.mag_attTrackConfig_outputMsgID_get
    if _newclass:
        outputMsgID = _swig_property(_mag_attTrack.mag_attTrackConfig_outputMsgID_get, _mag_attTrack.mag_attTrackConfig_outputMsgID_set)
    __swig_setmethods__["inputVehicleConfigDataID"] = _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataID_set
    __swig_getmethods__["inputVehicleConfigDataID"] = _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataID_get
    if _newclass:
        inputVehicleConfigDataID = _swig_property(_mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataID_get, _mag_attTrack.mag_attTrackConfig_inputVehicleConfigDataID_set)
    __swig_setmethods__["controlOutTR"] = _mag_attTrack.mag_attTrackConfig_controlOutTR_set
    __swig_getmethods__["controlOutTR"] = _mag_attTrack.mag_attTrackConfig_controlOutTR_get
    if _newclass:
        controlOutTR = _swig_property(_mag_attTrack.mag_attTrackConfig_controlOutTR_get, _mag_attTrack.mag_attTrackConfig_controlOutTR_set)
    __swig_setmethods__["controlOut"] = _mag_attTrack.mag_attTrackConfig_controlOut_set
    __swig_getmethods__["controlOut"] = _mag_attTrack.mag_attTrackConfig_controlOut_get
    if _newclass:
        controlOut = _swig_property(_mag_attTrack.mag_attTrackConfig_controlOut_get, _mag_attTrack.mag_attTrackConfig_controlOut_set)
    __swig_setmethods__["rwConfigParams"] = _mag_attTrack.mag_attTrackConfig_rwConfigParams_set
    __swig_getmethods__["rwConfigParams"] = _mag_attTrack.mag_attTrackConfig_rwConfigParams_get
    if _newclass:
        rwConfigParams = _swig_property(_mag_attTrack.mag_attTrackConfig_rwConfigParams_get, _mag_attTrack.mag_attTrackConfig_rwConfigParams_set)

    def __init__(self):
        this = _mag_attTrack.new_mag_attTrackConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mag_attTrack.delete_mag_attTrackConfig
    __del__ = lambda self: None
mag_attTrackConfig_swigregister = _mag_attTrack.mag_attTrackConfig_swigregister
mag_attTrackConfig_swigregister(mag_attTrackConfig)


def ctl_mag_att_track_one(mag_bf, ctl_gain, out_m, sigma_BR, omega_BR_B, omega_RN_B, domega_RN_B, omega_BN_B, I):
    return _mag_attTrack.ctl_mag_att_track_one(mag_bf, ctl_gain, out_m, sigma_BR, omega_BR_B, omega_RN_B, domega_RN_B, omega_BN_B, I)
ctl_mag_att_track_one = _mag_attTrack.ctl_mag_att_track_one

def ctl_mag_att_track_two(mag_bf, ctl_gain, out_m, sigma_BR, omega_BN_B):
    return _mag_attTrack.ctl_mag_att_track_two(mag_bf, ctl_gain, out_m, sigma_BR, omega_BN_B)
ctl_mag_att_track_two = _mag_attTrack.ctl_mag_att_track_two

def ctl_mag_att_track_three(mag_bf, ctl_gain, out_m, omega_BN_B):
    return _mag_attTrack.ctl_mag_att_track_three(mag_bf, ctl_gain, out_m, omega_BN_B)
ctl_mag_att_track_three = _mag_attTrack.ctl_mag_att_track_three

def ctl_mag_att_track_four(mag_bf, ctl_gain, out_m):
    return _mag_attTrack.ctl_mag_att_track_four(mag_bf, ctl_gain, out_m)
ctl_mag_att_track_four = _mag_attTrack.ctl_mag_att_track_four

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


