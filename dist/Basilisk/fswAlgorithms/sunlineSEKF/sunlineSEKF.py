# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sunlineSEKF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sunlineSEKF')
    _sunlineSEKF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sunlineSEKF', [dirname(__file__)])
        except ImportError:
            import _sunlineSEKF
            return _sunlineSEKF
        try:
            _mod = imp.load_module('_sunlineSEKF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sunlineSEKF = swig_import_helper()
    del swig_import_helper
else:
    import _sunlineSEKF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _sunlineSEKF.new_doubleArray(nelements)
new_doubleArray = _sunlineSEKF.new_doubleArray

def delete_doubleArray(ary):
    return _sunlineSEKF.delete_doubleArray(ary)
delete_doubleArray = _sunlineSEKF.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _sunlineSEKF.doubleArray_getitem(ary, index)
doubleArray_getitem = _sunlineSEKF.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _sunlineSEKF.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _sunlineSEKF.doubleArray_setitem

def new_longArray(nelements):
    return _sunlineSEKF.new_longArray(nelements)
new_longArray = _sunlineSEKF.new_longArray

def delete_longArray(ary):
    return _sunlineSEKF.delete_longArray(ary)
delete_longArray = _sunlineSEKF.delete_longArray

def longArray_getitem(ary, index):
    return _sunlineSEKF.longArray_getitem(ary, index)
longArray_getitem = _sunlineSEKF.longArray_getitem

def longArray_setitem(ary, index, value):
    return _sunlineSEKF.longArray_setitem(ary, index, value)
longArray_setitem = _sunlineSEKF.longArray_setitem

def new_intArray(nelements):
    return _sunlineSEKF.new_intArray(nelements)
new_intArray = _sunlineSEKF.new_intArray

def delete_intArray(ary):
    return _sunlineSEKF.delete_intArray(ary)
delete_intArray = _sunlineSEKF.delete_intArray

def intArray_getitem(ary, index):
    return _sunlineSEKF.intArray_getitem(ary, index)
intArray_getitem = _sunlineSEKF.intArray_getitem

def intArray_setitem(ary, index, value):
    return _sunlineSEKF.intArray_setitem(ary, index, value)
intArray_setitem = _sunlineSEKF.intArray_setitem

def new_shortArray(nelements):
    return _sunlineSEKF.new_shortArray(nelements)
new_shortArray = _sunlineSEKF.new_shortArray

def delete_shortArray(ary):
    return _sunlineSEKF.delete_shortArray(ary)
delete_shortArray = _sunlineSEKF.delete_shortArray

def shortArray_getitem(ary, index):
    return _sunlineSEKF.shortArray_getitem(ary, index)
shortArray_getitem = _sunlineSEKF.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _sunlineSEKF.shortArray_setitem(ary, index, value)
shortArray_setitem = _sunlineSEKF.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_sunlineSEKF = _sunlineSEKF.Update_sunlineSEKF
SelfInit_sunlineSEKF = _sunlineSEKF.SelfInit_sunlineSEKF
CrossInit_sunlineSEKF = _sunlineSEKF.CrossInit_sunlineSEKF
Reset_sunlineSEKF = _sunlineSEKF.Reset_sunlineSEKF
sizeof_CSSConfigFswMsg = _sunlineSEKF.sizeof_CSSConfigFswMsg
sizeof_SunlineFilterFswMsg = _sunlineSEKF.sizeof_SunlineFilterFswMsg
sizeof_sunlineSEKFConfig = _sunlineSEKF.sizeof_sunlineSEKFConfig
sizeof_VehicleConfigFswMsg = _sunlineSEKF.sizeof_VehicleConfigFswMsg
UKF_MAX_DIM = _sunlineSEKF.UKF_MAX_DIM

def ukfQRDJustR(sourceMat, nRow, nCol, destMat):
    return _sunlineSEKF.ukfQRDJustR(sourceMat, nRow, nCol, destMat)
ukfQRDJustR = _sunlineSEKF.ukfQRDJustR

def ukfLInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSEKF.ukfLInv(sourceMat, nRow, nCol, destMat)
ukfLInv = _sunlineSEKF.ukfLInv

def ukfUInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSEKF.ukfUInv(sourceMat, nRow, nCol, destMat)
ukfUInv = _sunlineSEKF.ukfUInv

def ukfLUD(sourceMat, nRow, nCol, destMat, indx):
    return _sunlineSEKF.ukfLUD(sourceMat, nRow, nCol, destMat, indx)
ukfLUD = _sunlineSEKF.ukfLUD

def ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat):
    return _sunlineSEKF.ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat)
ukfLUBckSlv = _sunlineSEKF.ukfLUBckSlv

def ukfMatInv(sourceMat, nRow, nCol, destMat):
    return _sunlineSEKF.ukfMatInv(sourceMat, nRow, nCol, destMat)
ukfMatInv = _sunlineSEKF.ukfMatInv

def ukfCholDecomp(sourceMat, nRow, nCol, destMat):
    return _sunlineSEKF.ukfCholDecomp(sourceMat, nRow, nCol, destMat)
ukfCholDecomp = _sunlineSEKF.ukfCholDecomp

def ukfCholDownDate(rMat, xVec, beta, nStates, rOut):
    return _sunlineSEKF.ukfCholDownDate(rMat, xVec, beta, nStates, rOut)
ukfCholDownDate = _sunlineSEKF.ukfCholDownDate
class CSSConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCSS"] = _sunlineSEKF.CSSConfigFswMsg_nCSS_set
    __swig_getmethods__["nCSS"] = _sunlineSEKF.CSSConfigFswMsg_nCSS_get
    if _newclass:
        nCSS = _swig_property(_sunlineSEKF.CSSConfigFswMsg_nCSS_get, _sunlineSEKF.CSSConfigFswMsg_nCSS_set)
    __swig_setmethods__["cssVals"] = _sunlineSEKF.CSSConfigFswMsg_cssVals_set
    __swig_getmethods__["cssVals"] = _sunlineSEKF.CSSConfigFswMsg_cssVals_get
    if _newclass:
        cssVals = _swig_property(_sunlineSEKF.CSSConfigFswMsg_cssVals_get, _sunlineSEKF.CSSConfigFswMsg_cssVals_set)

    def __init__(self):
        this = _sunlineSEKF.new_CSSConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sunlineSEKF.delete_CSSConfigFswMsg
    __del__ = lambda self: None
CSSConfigFswMsg_swigregister = _sunlineSEKF.CSSConfigFswMsg_swigregister
CSSConfigFswMsg_swigregister(CSSConfigFswMsg)

class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _sunlineSEKF.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _sunlineSEKF.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_sunlineSEKF.VehicleConfigFswMsg_ISCPntB_B_get, _sunlineSEKF.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _sunlineSEKF.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _sunlineSEKF.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_sunlineSEKF.VehicleConfigFswMsg_CoM_B_get, _sunlineSEKF.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _sunlineSEKF.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _sunlineSEKF.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_sunlineSEKF.VehicleConfigFswMsg_CurrentADCSState_get, _sunlineSEKF.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _sunlineSEKF.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sunlineSEKF.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _sunlineSEKF.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

SKF_N_STATES = _sunlineSEKF.SKF_N_STATES
SKF_N_STATES_SWITCH = _sunlineSEKF.SKF_N_STATES_SWITCH
SKF_N_STATES_HALF = _sunlineSEKF.SKF_N_STATES_HALF
MAX_N_CSS_MEAS = _sunlineSEKF.MAX_N_CSS_MEAS
class SunlineFilterFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SunlineFilterFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SunlineFilterFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _sunlineSEKF.SunlineFilterFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _sunlineSEKF.SunlineFilterFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_timeTag_get, _sunlineSEKF.SunlineFilterFswMsg_timeTag_set)
    __swig_setmethods__["covar"] = _sunlineSEKF.SunlineFilterFswMsg_covar_set
    __swig_getmethods__["covar"] = _sunlineSEKF.SunlineFilterFswMsg_covar_get
    if _newclass:
        covar = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_covar_get, _sunlineSEKF.SunlineFilterFswMsg_covar_set)
    __swig_setmethods__["state"] = _sunlineSEKF.SunlineFilterFswMsg_state_set
    __swig_getmethods__["state"] = _sunlineSEKF.SunlineFilterFswMsg_state_get
    if _newclass:
        state = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_state_get, _sunlineSEKF.SunlineFilterFswMsg_state_set)
    __swig_setmethods__["stateError"] = _sunlineSEKF.SunlineFilterFswMsg_stateError_set
    __swig_getmethods__["stateError"] = _sunlineSEKF.SunlineFilterFswMsg_stateError_get
    if _newclass:
        stateError = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_stateError_get, _sunlineSEKF.SunlineFilterFswMsg_stateError_set)
    __swig_setmethods__["postFitRes"] = _sunlineSEKF.SunlineFilterFswMsg_postFitRes_set
    __swig_getmethods__["postFitRes"] = _sunlineSEKF.SunlineFilterFswMsg_postFitRes_get
    if _newclass:
        postFitRes = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_postFitRes_get, _sunlineSEKF.SunlineFilterFswMsg_postFitRes_set)
    __swig_setmethods__["numObs"] = _sunlineSEKF.SunlineFilterFswMsg_numObs_set
    __swig_getmethods__["numObs"] = _sunlineSEKF.SunlineFilterFswMsg_numObs_get
    if _newclass:
        numObs = _swig_property(_sunlineSEKF.SunlineFilterFswMsg_numObs_get, _sunlineSEKF.SunlineFilterFswMsg_numObs_set)

    def __init__(self):
        this = _sunlineSEKF.new_SunlineFilterFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sunlineSEKF.delete_SunlineFilterFswMsg
    __del__ = lambda self: None
SunlineFilterFswMsg_swigregister = _sunlineSEKF.SunlineFilterFswMsg_swigregister
SunlineFilterFswMsg_swigregister(SunlineFilterFswMsg)

class sunlineSEKFConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sunlineSEKFConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sunlineSEKFConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["navStateOutMsgName"] = _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgName_set
    __swig_getmethods__["navStateOutMsgName"] = _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgName_get
    if _newclass:
        navStateOutMsgName = _swig_property(_sunlineSEKF.sunlineSEKFConfig_navStateOutMsgName_get, _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgName_set)
    __swig_setmethods__["filtDataOutMsgName"] = _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgName_set
    __swig_getmethods__["filtDataOutMsgName"] = _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgName_get
    if _newclass:
        filtDataOutMsgName = _swig_property(_sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgName_get, _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgName_set)
    __swig_setmethods__["cssDataInMsgName"] = _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgName_set
    __swig_getmethods__["cssDataInMsgName"] = _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgName_get
    if _newclass:
        cssDataInMsgName = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssDataInMsgName_get, _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgName_set)
    __swig_setmethods__["cssConfigInMsgName"] = _sunlineSEKF.sunlineSEKFConfig_cssConfigInMsgName_set
    __swig_getmethods__["cssConfigInMsgName"] = _sunlineSEKF.sunlineSEKFConfig_cssConfigInMsgName_get
    if _newclass:
        cssConfigInMsgName = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssConfigInMsgName_get, _sunlineSEKF.sunlineSEKFConfig_cssConfigInMsgName_set)
    __swig_setmethods__["qObsVal"] = _sunlineSEKF.sunlineSEKFConfig_qObsVal_set
    __swig_getmethods__["qObsVal"] = _sunlineSEKF.sunlineSEKFConfig_qObsVal_get
    if _newclass:
        qObsVal = _swig_property(_sunlineSEKF.sunlineSEKFConfig_qObsVal_get, _sunlineSEKF.sunlineSEKFConfig_qObsVal_set)
    __swig_setmethods__["qProcVal"] = _sunlineSEKF.sunlineSEKFConfig_qProcVal_set
    __swig_getmethods__["qProcVal"] = _sunlineSEKF.sunlineSEKFConfig_qProcVal_get
    if _newclass:
        qProcVal = _swig_property(_sunlineSEKF.sunlineSEKFConfig_qProcVal_get, _sunlineSEKF.sunlineSEKFConfig_qProcVal_set)
    __swig_setmethods__["dt"] = _sunlineSEKF.sunlineSEKFConfig_dt_set
    __swig_getmethods__["dt"] = _sunlineSEKF.sunlineSEKFConfig_dt_get
    if _newclass:
        dt = _swig_property(_sunlineSEKF.sunlineSEKFConfig_dt_get, _sunlineSEKF.sunlineSEKFConfig_dt_set)
    __swig_setmethods__["timeTag"] = _sunlineSEKF.sunlineSEKFConfig_timeTag_set
    __swig_getmethods__["timeTag"] = _sunlineSEKF.sunlineSEKFConfig_timeTag_get
    if _newclass:
        timeTag = _swig_property(_sunlineSEKF.sunlineSEKFConfig_timeTag_get, _sunlineSEKF.sunlineSEKFConfig_timeTag_set)
    __swig_setmethods__["bVec_B"] = _sunlineSEKF.sunlineSEKFConfig_bVec_B_set
    __swig_getmethods__["bVec_B"] = _sunlineSEKF.sunlineSEKFConfig_bVec_B_get
    if _newclass:
        bVec_B = _swig_property(_sunlineSEKF.sunlineSEKFConfig_bVec_B_get, _sunlineSEKF.sunlineSEKFConfig_bVec_B_set)
    __swig_setmethods__["switchTresh"] = _sunlineSEKF.sunlineSEKFConfig_switchTresh_set
    __swig_getmethods__["switchTresh"] = _sunlineSEKF.sunlineSEKFConfig_switchTresh_get
    if _newclass:
        switchTresh = _swig_property(_sunlineSEKF.sunlineSEKFConfig_switchTresh_get, _sunlineSEKF.sunlineSEKFConfig_switchTresh_set)
    __swig_setmethods__["state"] = _sunlineSEKF.sunlineSEKFConfig_state_set
    __swig_getmethods__["state"] = _sunlineSEKF.sunlineSEKFConfig_state_get
    if _newclass:
        state = _swig_property(_sunlineSEKF.sunlineSEKFConfig_state_get, _sunlineSEKF.sunlineSEKFConfig_state_set)
    __swig_setmethods__["x"] = _sunlineSEKF.sunlineSEKFConfig_x_set
    __swig_getmethods__["x"] = _sunlineSEKF.sunlineSEKFConfig_x_get
    if _newclass:
        x = _swig_property(_sunlineSEKF.sunlineSEKFConfig_x_get, _sunlineSEKF.sunlineSEKFConfig_x_set)
    __swig_setmethods__["xBar"] = _sunlineSEKF.sunlineSEKFConfig_xBar_set
    __swig_getmethods__["xBar"] = _sunlineSEKF.sunlineSEKFConfig_xBar_get
    if _newclass:
        xBar = _swig_property(_sunlineSEKF.sunlineSEKFConfig_xBar_get, _sunlineSEKF.sunlineSEKFConfig_xBar_set)
    __swig_setmethods__["covarBar"] = _sunlineSEKF.sunlineSEKFConfig_covarBar_set
    __swig_getmethods__["covarBar"] = _sunlineSEKF.sunlineSEKFConfig_covarBar_get
    if _newclass:
        covarBar = _swig_property(_sunlineSEKF.sunlineSEKFConfig_covarBar_get, _sunlineSEKF.sunlineSEKFConfig_covarBar_set)
    __swig_setmethods__["covar"] = _sunlineSEKF.sunlineSEKFConfig_covar_set
    __swig_getmethods__["covar"] = _sunlineSEKF.sunlineSEKFConfig_covar_get
    if _newclass:
        covar = _swig_property(_sunlineSEKF.sunlineSEKFConfig_covar_get, _sunlineSEKF.sunlineSEKFConfig_covar_set)
    __swig_setmethods__["stateTransition"] = _sunlineSEKF.sunlineSEKFConfig_stateTransition_set
    __swig_getmethods__["stateTransition"] = _sunlineSEKF.sunlineSEKFConfig_stateTransition_get
    if _newclass:
        stateTransition = _swig_property(_sunlineSEKF.sunlineSEKFConfig_stateTransition_get, _sunlineSEKF.sunlineSEKFConfig_stateTransition_set)
    __swig_setmethods__["kalmanGain"] = _sunlineSEKF.sunlineSEKFConfig_kalmanGain_set
    __swig_getmethods__["kalmanGain"] = _sunlineSEKF.sunlineSEKFConfig_kalmanGain_get
    if _newclass:
        kalmanGain = _swig_property(_sunlineSEKF.sunlineSEKFConfig_kalmanGain_get, _sunlineSEKF.sunlineSEKFConfig_kalmanGain_set)
    __swig_setmethods__["dynMat"] = _sunlineSEKF.sunlineSEKFConfig_dynMat_set
    __swig_getmethods__["dynMat"] = _sunlineSEKF.sunlineSEKFConfig_dynMat_get
    if _newclass:
        dynMat = _swig_property(_sunlineSEKF.sunlineSEKFConfig_dynMat_get, _sunlineSEKF.sunlineSEKFConfig_dynMat_set)
    __swig_setmethods__["measMat"] = _sunlineSEKF.sunlineSEKFConfig_measMat_set
    __swig_getmethods__["measMat"] = _sunlineSEKF.sunlineSEKFConfig_measMat_get
    if _newclass:
        measMat = _swig_property(_sunlineSEKF.sunlineSEKFConfig_measMat_get, _sunlineSEKF.sunlineSEKFConfig_measMat_set)
    __swig_setmethods__["W_BS"] = _sunlineSEKF.sunlineSEKFConfig_W_BS_set
    __swig_getmethods__["W_BS"] = _sunlineSEKF.sunlineSEKFConfig_W_BS_get
    if _newclass:
        W_BS = _swig_property(_sunlineSEKF.sunlineSEKFConfig_W_BS_get, _sunlineSEKF.sunlineSEKFConfig_W_BS_set)
    __swig_setmethods__["obs"] = _sunlineSEKF.sunlineSEKFConfig_obs_set
    __swig_getmethods__["obs"] = _sunlineSEKF.sunlineSEKFConfig_obs_get
    if _newclass:
        obs = _swig_property(_sunlineSEKF.sunlineSEKFConfig_obs_get, _sunlineSEKF.sunlineSEKFConfig_obs_set)
    __swig_setmethods__["yMeas"] = _sunlineSEKF.sunlineSEKFConfig_yMeas_set
    __swig_getmethods__["yMeas"] = _sunlineSEKF.sunlineSEKFConfig_yMeas_get
    if _newclass:
        yMeas = _swig_property(_sunlineSEKF.sunlineSEKFConfig_yMeas_get, _sunlineSEKF.sunlineSEKFConfig_yMeas_set)
    __swig_setmethods__["postFits"] = _sunlineSEKF.sunlineSEKFConfig_postFits_set
    __swig_getmethods__["postFits"] = _sunlineSEKF.sunlineSEKFConfig_postFits_get
    if _newclass:
        postFits = _swig_property(_sunlineSEKF.sunlineSEKFConfig_postFits_get, _sunlineSEKF.sunlineSEKFConfig_postFits_set)
    __swig_setmethods__["procNoise"] = _sunlineSEKF.sunlineSEKFConfig_procNoise_set
    __swig_getmethods__["procNoise"] = _sunlineSEKF.sunlineSEKFConfig_procNoise_get
    if _newclass:
        procNoise = _swig_property(_sunlineSEKF.sunlineSEKFConfig_procNoise_get, _sunlineSEKF.sunlineSEKFConfig_procNoise_set)
    __swig_setmethods__["measNoise"] = _sunlineSEKF.sunlineSEKFConfig_measNoise_set
    __swig_getmethods__["measNoise"] = _sunlineSEKF.sunlineSEKFConfig_measNoise_get
    if _newclass:
        measNoise = _swig_property(_sunlineSEKF.sunlineSEKFConfig_measNoise_get, _sunlineSEKF.sunlineSEKFConfig_measNoise_set)
    __swig_setmethods__["cssNHat_B"] = _sunlineSEKF.sunlineSEKFConfig_cssNHat_B_set
    __swig_getmethods__["cssNHat_B"] = _sunlineSEKF.sunlineSEKFConfig_cssNHat_B_get
    if _newclass:
        cssNHat_B = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssNHat_B_get, _sunlineSEKF.sunlineSEKFConfig_cssNHat_B_set)
    __swig_setmethods__["numStates"] = _sunlineSEKF.sunlineSEKFConfig_numStates_set
    __swig_getmethods__["numStates"] = _sunlineSEKF.sunlineSEKFConfig_numStates_get
    if _newclass:
        numStates = _swig_property(_sunlineSEKF.sunlineSEKFConfig_numStates_get, _sunlineSEKF.sunlineSEKFConfig_numStates_set)
    __swig_setmethods__["numObs"] = _sunlineSEKF.sunlineSEKFConfig_numObs_set
    __swig_getmethods__["numObs"] = _sunlineSEKF.sunlineSEKFConfig_numObs_get
    if _newclass:
        numObs = _swig_property(_sunlineSEKF.sunlineSEKFConfig_numObs_get, _sunlineSEKF.sunlineSEKFConfig_numObs_set)
    __swig_setmethods__["numActiveCss"] = _sunlineSEKF.sunlineSEKFConfig_numActiveCss_set
    __swig_getmethods__["numActiveCss"] = _sunlineSEKF.sunlineSEKFConfig_numActiveCss_get
    if _newclass:
        numActiveCss = _swig_property(_sunlineSEKF.sunlineSEKFConfig_numActiveCss_get, _sunlineSEKF.sunlineSEKFConfig_numActiveCss_set)
    __swig_setmethods__["numCSSTotal"] = _sunlineSEKF.sunlineSEKFConfig_numCSSTotal_set
    __swig_getmethods__["numCSSTotal"] = _sunlineSEKF.sunlineSEKFConfig_numCSSTotal_get
    if _newclass:
        numCSSTotal = _swig_property(_sunlineSEKF.sunlineSEKFConfig_numCSSTotal_get, _sunlineSEKF.sunlineSEKFConfig_numCSSTotal_set)
    __swig_setmethods__["sensorUseThresh"] = _sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_set
    __swig_getmethods__["sensorUseThresh"] = _sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_get
    if _newclass:
        sensorUseThresh = _swig_property(_sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_get, _sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_set)
    __swig_setmethods__["eKFSwitch"] = _sunlineSEKF.sunlineSEKFConfig_eKFSwitch_set
    __swig_getmethods__["eKFSwitch"] = _sunlineSEKF.sunlineSEKFConfig_eKFSwitch_get
    if _newclass:
        eKFSwitch = _swig_property(_sunlineSEKF.sunlineSEKFConfig_eKFSwitch_get, _sunlineSEKF.sunlineSEKFConfig_eKFSwitch_set)
    __swig_setmethods__["outputSunline"] = _sunlineSEKF.sunlineSEKFConfig_outputSunline_set
    __swig_getmethods__["outputSunline"] = _sunlineSEKF.sunlineSEKFConfig_outputSunline_get
    if _newclass:
        outputSunline = _swig_property(_sunlineSEKF.sunlineSEKFConfig_outputSunline_get, _sunlineSEKF.sunlineSEKFConfig_outputSunline_set)
    __swig_setmethods__["cssSensorInBuffer"] = _sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_set
    __swig_getmethods__["cssSensorInBuffer"] = _sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_get
    if _newclass:
        cssSensorInBuffer = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_get, _sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_set)
    __swig_setmethods__["navStateOutMsgId"] = _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgId_set
    __swig_getmethods__["navStateOutMsgId"] = _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgId_get
    if _newclass:
        navStateOutMsgId = _swig_property(_sunlineSEKF.sunlineSEKFConfig_navStateOutMsgId_get, _sunlineSEKF.sunlineSEKFConfig_navStateOutMsgId_set)
    __swig_setmethods__["filtDataOutMsgId"] = _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgId_set
    __swig_getmethods__["filtDataOutMsgId"] = _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgId_get
    if _newclass:
        filtDataOutMsgId = _swig_property(_sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgId_get, _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsgId_set)
    __swig_setmethods__["cssDataInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgId_set
    __swig_getmethods__["cssDataInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgId_get
    if _newclass:
        cssDataInMsgId = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssDataInMsgId_get, _sunlineSEKF.sunlineSEKFConfig_cssDataInMsgId_set)
    __swig_setmethods__["massPropsInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_massPropsInMsgId_set
    __swig_getmethods__["massPropsInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_massPropsInMsgId_get
    if _newclass:
        massPropsInMsgId = _swig_property(_sunlineSEKF.sunlineSEKFConfig_massPropsInMsgId_get, _sunlineSEKF.sunlineSEKFConfig_massPropsInMsgId_set)
    __swig_setmethods__["cssConfInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_cssConfInMsgId_set
    __swig_getmethods__["cssConfInMsgId"] = _sunlineSEKF.sunlineSEKFConfig_cssConfInMsgId_get
    if _newclass:
        cssConfInMsgId = _swig_property(_sunlineSEKF.sunlineSEKFConfig_cssConfInMsgId_get, _sunlineSEKF.sunlineSEKFConfig_cssConfInMsgId_set)

    def __init__(self):
        this = _sunlineSEKF.new_sunlineSEKFConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sunlineSEKF.delete_sunlineSEKFConfig
    __del__ = lambda self: None
sunlineSEKFConfig_swigregister = _sunlineSEKF.sunlineSEKFConfig_swigregister
sunlineSEKFConfig_swigregister(sunlineSEKFConfig)


def sunlineTimeUpdate(ConfigData, updateTime):
    return _sunlineSEKF.sunlineTimeUpdate(ConfigData, updateTime)
sunlineTimeUpdate = _sunlineSEKF.sunlineTimeUpdate

def sunlineMeasUpdate(ConfigData, updateTime):
    return _sunlineSEKF.sunlineMeasUpdate(ConfigData, updateTime)
sunlineMeasUpdate = _sunlineSEKF.sunlineMeasUpdate

def sunlineStateSTMProp(dynMat, bVec, dt, stateInOut, stateTransition):
    return _sunlineSEKF.sunlineStateSTMProp(dynMat, bVec, dt, stateInOut, stateTransition)
sunlineStateSTMProp = _sunlineSEKF.sunlineStateSTMProp

def sunlineHMatrixYMeas(states, numCSS, cssSensorCos, sensorUseThresh, cssNHat_B, obs, yMeas, numObs, measMat):
    return _sunlineSEKF.sunlineHMatrixYMeas(states, numCSS, cssSensorCos, sensorUseThresh, cssNHat_B, obs, yMeas, numObs, measMat)
sunlineHMatrixYMeas = _sunlineSEKF.sunlineHMatrixYMeas

def sunlineKalmanGain(covarBar, hObs, qObsVal, numObs, kalmanGain):
    return _sunlineSEKF.sunlineKalmanGain(covarBar, hObs, qObsVal, numObs, kalmanGain)
sunlineKalmanGain = _sunlineSEKF.sunlineKalmanGain

def sunlineDynMatrix(stateInOut, bVec, dt, dynMat):
    return _sunlineSEKF.sunlineDynMatrix(stateInOut, bVec, dt, dynMat)
sunlineDynMatrix = _sunlineSEKF.sunlineDynMatrix

def sunlineCKFUpdate(xBar, kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, x, covar):
    return _sunlineSEKF.sunlineCKFUpdate(xBar, kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, x, covar)
sunlineCKFUpdate = _sunlineSEKF.sunlineCKFUpdate

def sunlineSEKFUpdate(kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, states, x, covar):
    return _sunlineSEKF.sunlineSEKFUpdate(kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, states, x, covar)
sunlineSEKFUpdate = _sunlineSEKF.sunlineSEKFUpdate

def sunlineSEKFSwitch(bVec_B, states, covar):
    return _sunlineSEKF.sunlineSEKFSwitch(bVec_B, states, covar)
sunlineSEKFSwitch = _sunlineSEKF.sunlineSEKFSwitch

def sunlineSEKFComputeDCM_BS(sunheading, bVec, dcm):
    return _sunlineSEKF.sunlineSEKFComputeDCM_BS(sunheading, bVec, dcm)
sunlineSEKFComputeDCM_BS = _sunlineSEKF.sunlineSEKFComputeDCM_BS

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


