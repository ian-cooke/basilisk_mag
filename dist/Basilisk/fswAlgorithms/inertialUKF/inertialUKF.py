# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_inertialUKF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_inertialUKF')
    _inertialUKF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_inertialUKF', [dirname(__file__)])
        except ImportError:
            import _inertialUKF
            return _inertialUKF
        try:
            _mod = imp.load_module('_inertialUKF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _inertialUKF = swig_import_helper()
    del swig_import_helper
else:
    import _inertialUKF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _inertialUKF.new_doubleArray(nelements)
new_doubleArray = _inertialUKF.new_doubleArray

def delete_doubleArray(ary):
    return _inertialUKF.delete_doubleArray(ary)
delete_doubleArray = _inertialUKF.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _inertialUKF.doubleArray_getitem(ary, index)
doubleArray_getitem = _inertialUKF.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _inertialUKF.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _inertialUKF.doubleArray_setitem

def new_longArray(nelements):
    return _inertialUKF.new_longArray(nelements)
new_longArray = _inertialUKF.new_longArray

def delete_longArray(ary):
    return _inertialUKF.delete_longArray(ary)
delete_longArray = _inertialUKF.delete_longArray

def longArray_getitem(ary, index):
    return _inertialUKF.longArray_getitem(ary, index)
longArray_getitem = _inertialUKF.longArray_getitem

def longArray_setitem(ary, index, value):
    return _inertialUKF.longArray_setitem(ary, index, value)
longArray_setitem = _inertialUKF.longArray_setitem

def new_intArray(nelements):
    return _inertialUKF.new_intArray(nelements)
new_intArray = _inertialUKF.new_intArray

def delete_intArray(ary):
    return _inertialUKF.delete_intArray(ary)
delete_intArray = _inertialUKF.delete_intArray

def intArray_getitem(ary, index):
    return _inertialUKF.intArray_getitem(ary, index)
intArray_getitem = _inertialUKF.intArray_getitem

def intArray_setitem(ary, index, value):
    return _inertialUKF.intArray_setitem(ary, index, value)
intArray_setitem = _inertialUKF.intArray_setitem

def new_shortArray(nelements):
    return _inertialUKF.new_shortArray(nelements)
new_shortArray = _inertialUKF.new_shortArray

def delete_shortArray(ary):
    return _inertialUKF.delete_shortArray(ary)
delete_shortArray = _inertialUKF.delete_shortArray

def shortArray_getitem(ary, index):
    return _inertialUKF.shortArray_getitem(ary, index)
shortArray_getitem = _inertialUKF.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _inertialUKF.shortArray_setitem(ary, index, value)
shortArray_setitem = _inertialUKF.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_inertialUKF = _inertialUKF.Update_inertialUKF
SelfInit_inertialUKF = _inertialUKF.SelfInit_inertialUKF
CrossInit_inertialUKF = _inertialUKF.CrossInit_inertialUKF
Reset_inertialUKF = _inertialUKF.Reset_inertialUKF
class STMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stInMsgName"] = _inertialUKF.STMessage_stInMsgName_set
    __swig_getmethods__["stInMsgName"] = _inertialUKF.STMessage_stInMsgName_get
    if _newclass:
        stInMsgName = _swig_property(_inertialUKF.STMessage_stInMsgName_get, _inertialUKF.STMessage_stInMsgName_set)
    __swig_setmethods__["stInMsgID"] = _inertialUKF.STMessage_stInMsgID_set
    __swig_getmethods__["stInMsgID"] = _inertialUKF.STMessage_stInMsgID_get
    if _newclass:
        stInMsgID = _swig_property(_inertialUKF.STMessage_stInMsgID_get, _inertialUKF.STMessage_stInMsgID_set)
    __swig_setmethods__["noise"] = _inertialUKF.STMessage_noise_set
    __swig_getmethods__["noise"] = _inertialUKF.STMessage_noise_get
    if _newclass:
        noise = _swig_property(_inertialUKF.STMessage_noise_get, _inertialUKF.STMessage_noise_set)

    def __init__(self):
        this = _inertialUKF.new_STMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_STMessage
    __del__ = lambda self: None
STMessage_swigregister = _inertialUKF.STMessage_swigregister
STMessage_swigregister(STMessage)

class STDataParsing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STDataParsing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STDataParsing, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numST"] = _inertialUKF.STDataParsing_numST_set
    __swig_getmethods__["numST"] = _inertialUKF.STDataParsing_numST_get
    if _newclass:
        numST = _swig_property(_inertialUKF.STDataParsing_numST_get, _inertialUKF.STDataParsing_numST_set)
    __swig_setmethods__["STMessages"] = _inertialUKF.STDataParsing_STMessages_set
    __swig_getmethods__["STMessages"] = _inertialUKF.STDataParsing_STMessages_get
    if _newclass:
        STMessages = _swig_property(_inertialUKF.STDataParsing_STMessages_get, _inertialUKF.STDataParsing_STMessages_set)

    def __init__(self):
        this = _inertialUKF.new_STDataParsing()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_STDataParsing
    __del__ = lambda self: None
STDataParsing_swigregister = _inertialUKF.STDataParsing_swigregister
STDataParsing_swigregister(STDataParsing)

class InertialUKFConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialUKFConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialUKFConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["navStateOutMsgName"] = _inertialUKF.InertialUKFConfig_navStateOutMsgName_set
    __swig_getmethods__["navStateOutMsgName"] = _inertialUKF.InertialUKFConfig_navStateOutMsgName_get
    if _newclass:
        navStateOutMsgName = _swig_property(_inertialUKF.InertialUKFConfig_navStateOutMsgName_get, _inertialUKF.InertialUKFConfig_navStateOutMsgName_set)
    __swig_setmethods__["filtDataOutMsgName"] = _inertialUKF.InertialUKFConfig_filtDataOutMsgName_set
    __swig_getmethods__["filtDataOutMsgName"] = _inertialUKF.InertialUKFConfig_filtDataOutMsgName_get
    if _newclass:
        filtDataOutMsgName = _swig_property(_inertialUKF.InertialUKFConfig_filtDataOutMsgName_get, _inertialUKF.InertialUKFConfig_filtDataOutMsgName_set)
    __swig_setmethods__["massPropsInMsgName"] = _inertialUKF.InertialUKFConfig_massPropsInMsgName_set
    __swig_getmethods__["massPropsInMsgName"] = _inertialUKF.InertialUKFConfig_massPropsInMsgName_get
    if _newclass:
        massPropsInMsgName = _swig_property(_inertialUKF.InertialUKFConfig_massPropsInMsgName_get, _inertialUKF.InertialUKFConfig_massPropsInMsgName_set)
    __swig_setmethods__["rwParamsInMsgName"] = _inertialUKF.InertialUKFConfig_rwParamsInMsgName_set
    __swig_getmethods__["rwParamsInMsgName"] = _inertialUKF.InertialUKFConfig_rwParamsInMsgName_get
    if _newclass:
        rwParamsInMsgName = _swig_property(_inertialUKF.InertialUKFConfig_rwParamsInMsgName_get, _inertialUKF.InertialUKFConfig_rwParamsInMsgName_set)
    __swig_setmethods__["rwSpeedsInMsgName"] = _inertialUKF.InertialUKFConfig_rwSpeedsInMsgName_set
    __swig_getmethods__["rwSpeedsInMsgName"] = _inertialUKF.InertialUKFConfig_rwSpeedsInMsgName_get
    if _newclass:
        rwSpeedsInMsgName = _swig_property(_inertialUKF.InertialUKFConfig_rwSpeedsInMsgName_get, _inertialUKF.InertialUKFConfig_rwSpeedsInMsgName_set)
    __swig_setmethods__["gyrBuffInMsgName"] = _inertialUKF.InertialUKFConfig_gyrBuffInMsgName_set
    __swig_getmethods__["gyrBuffInMsgName"] = _inertialUKF.InertialUKFConfig_gyrBuffInMsgName_get
    if _newclass:
        gyrBuffInMsgName = _swig_property(_inertialUKF.InertialUKFConfig_gyrBuffInMsgName_get, _inertialUKF.InertialUKFConfig_gyrBuffInMsgName_set)
    __swig_setmethods__["numStates"] = _inertialUKF.InertialUKFConfig_numStates_set
    __swig_getmethods__["numStates"] = _inertialUKF.InertialUKFConfig_numStates_get
    if _newclass:
        numStates = _swig_property(_inertialUKF.InertialUKFConfig_numStates_get, _inertialUKF.InertialUKFConfig_numStates_set)
    __swig_setmethods__["countHalfSPs"] = _inertialUKF.InertialUKFConfig_countHalfSPs_set
    __swig_getmethods__["countHalfSPs"] = _inertialUKF.InertialUKFConfig_countHalfSPs_get
    if _newclass:
        countHalfSPs = _swig_property(_inertialUKF.InertialUKFConfig_countHalfSPs_get, _inertialUKF.InertialUKFConfig_countHalfSPs_set)
    __swig_setmethods__["numObs"] = _inertialUKF.InertialUKFConfig_numObs_set
    __swig_getmethods__["numObs"] = _inertialUKF.InertialUKFConfig_numObs_get
    if _newclass:
        numObs = _swig_property(_inertialUKF.InertialUKFConfig_numObs_get, _inertialUKF.InertialUKFConfig_numObs_set)
    __swig_setmethods__["badUpdate"] = _inertialUKF.InertialUKFConfig_badUpdate_set
    __swig_getmethods__["badUpdate"] = _inertialUKF.InertialUKFConfig_badUpdate_get
    if _newclass:
        badUpdate = _swig_property(_inertialUKF.InertialUKFConfig_badUpdate_get, _inertialUKF.InertialUKFConfig_badUpdate_set)
    __swig_setmethods__["beta"] = _inertialUKF.InertialUKFConfig_beta_set
    __swig_getmethods__["beta"] = _inertialUKF.InertialUKFConfig_beta_get
    if _newclass:
        beta = _swig_property(_inertialUKF.InertialUKFConfig_beta_get, _inertialUKF.InertialUKFConfig_beta_set)
    __swig_setmethods__["alpha"] = _inertialUKF.InertialUKFConfig_alpha_set
    __swig_getmethods__["alpha"] = _inertialUKF.InertialUKFConfig_alpha_get
    if _newclass:
        alpha = _swig_property(_inertialUKF.InertialUKFConfig_alpha_get, _inertialUKF.InertialUKFConfig_alpha_set)
    __swig_setmethods__["kappa"] = _inertialUKF.InertialUKFConfig_kappa_set
    __swig_getmethods__["kappa"] = _inertialUKF.InertialUKFConfig_kappa_get
    if _newclass:
        kappa = _swig_property(_inertialUKF.InertialUKFConfig_kappa_get, _inertialUKF.InertialUKFConfig_kappa_set)
    __swig_setmethods__["lambdaVal"] = _inertialUKF.InertialUKFConfig_lambdaVal_set
    __swig_getmethods__["lambdaVal"] = _inertialUKF.InertialUKFConfig_lambdaVal_get
    if _newclass:
        lambdaVal = _swig_property(_inertialUKF.InertialUKFConfig_lambdaVal_get, _inertialUKF.InertialUKFConfig_lambdaVal_set)
    __swig_setmethods__["gamma"] = _inertialUKF.InertialUKFConfig_gamma_set
    __swig_getmethods__["gamma"] = _inertialUKF.InertialUKFConfig_gamma_get
    if _newclass:
        gamma = _swig_property(_inertialUKF.InertialUKFConfig_gamma_get, _inertialUKF.InertialUKFConfig_gamma_set)
    __swig_setmethods__["switchMag"] = _inertialUKF.InertialUKFConfig_switchMag_set
    __swig_getmethods__["switchMag"] = _inertialUKF.InertialUKFConfig_switchMag_get
    if _newclass:
        switchMag = _swig_property(_inertialUKF.InertialUKFConfig_switchMag_get, _inertialUKF.InertialUKFConfig_switchMag_set)
    __swig_setmethods__["dt"] = _inertialUKF.InertialUKFConfig_dt_set
    __swig_getmethods__["dt"] = _inertialUKF.InertialUKFConfig_dt_get
    if _newclass:
        dt = _swig_property(_inertialUKF.InertialUKFConfig_dt_get, _inertialUKF.InertialUKFConfig_dt_set)
    __swig_setmethods__["timeTag"] = _inertialUKF.InertialUKFConfig_timeTag_set
    __swig_getmethods__["timeTag"] = _inertialUKF.InertialUKFConfig_timeTag_get
    if _newclass:
        timeTag = _swig_property(_inertialUKF.InertialUKFConfig_timeTag_get, _inertialUKF.InertialUKFConfig_timeTag_set)
    __swig_setmethods__["gyrAggTimeTag"] = _inertialUKF.InertialUKFConfig_gyrAggTimeTag_set
    __swig_getmethods__["gyrAggTimeTag"] = _inertialUKF.InertialUKFConfig_gyrAggTimeTag_get
    if _newclass:
        gyrAggTimeTag = _swig_property(_inertialUKF.InertialUKFConfig_gyrAggTimeTag_get, _inertialUKF.InertialUKFConfig_gyrAggTimeTag_set)
    __swig_setmethods__["aggSigma_b2b1"] = _inertialUKF.InertialUKFConfig_aggSigma_b2b1_set
    __swig_getmethods__["aggSigma_b2b1"] = _inertialUKF.InertialUKFConfig_aggSigma_b2b1_get
    if _newclass:
        aggSigma_b2b1 = _swig_property(_inertialUKF.InertialUKFConfig_aggSigma_b2b1_get, _inertialUKF.InertialUKFConfig_aggSigma_b2b1_set)
    __swig_setmethods__["dcm_BdyGyrpltf"] = _inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_set
    __swig_getmethods__["dcm_BdyGyrpltf"] = _inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_get
    if _newclass:
        dcm_BdyGyrpltf = _swig_property(_inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_get, _inertialUKF.InertialUKFConfig_dcm_BdyGyrpltf_set)
    __swig_setmethods__["wM"] = _inertialUKF.InertialUKFConfig_wM_set
    __swig_getmethods__["wM"] = _inertialUKF.InertialUKFConfig_wM_get
    if _newclass:
        wM = _swig_property(_inertialUKF.InertialUKFConfig_wM_get, _inertialUKF.InertialUKFConfig_wM_set)
    __swig_setmethods__["wC"] = _inertialUKF.InertialUKFConfig_wC_set
    __swig_getmethods__["wC"] = _inertialUKF.InertialUKFConfig_wC_get
    if _newclass:
        wC = _swig_property(_inertialUKF.InertialUKFConfig_wC_get, _inertialUKF.InertialUKFConfig_wC_set)
    __swig_setmethods__["state"] = _inertialUKF.InertialUKFConfig_state_set
    __swig_getmethods__["state"] = _inertialUKF.InertialUKFConfig_state_get
    if _newclass:
        state = _swig_property(_inertialUKF.InertialUKFConfig_state_get, _inertialUKF.InertialUKFConfig_state_set)
    __swig_setmethods__["sBar"] = _inertialUKF.InertialUKFConfig_sBar_set
    __swig_getmethods__["sBar"] = _inertialUKF.InertialUKFConfig_sBar_get
    if _newclass:
        sBar = _swig_property(_inertialUKF.InertialUKFConfig_sBar_get, _inertialUKF.InertialUKFConfig_sBar_set)
    __swig_setmethods__["covar"] = _inertialUKF.InertialUKFConfig_covar_set
    __swig_getmethods__["covar"] = _inertialUKF.InertialUKFConfig_covar_get
    if _newclass:
        covar = _swig_property(_inertialUKF.InertialUKFConfig_covar_get, _inertialUKF.InertialUKFConfig_covar_set)
    __swig_setmethods__["xBar"] = _inertialUKF.InertialUKFConfig_xBar_set
    __swig_getmethods__["xBar"] = _inertialUKF.InertialUKFConfig_xBar_get
    if _newclass:
        xBar = _swig_property(_inertialUKF.InertialUKFConfig_xBar_get, _inertialUKF.InertialUKFConfig_xBar_set)
    __swig_setmethods__["obs"] = _inertialUKF.InertialUKFConfig_obs_set
    __swig_getmethods__["obs"] = _inertialUKF.InertialUKFConfig_obs_get
    if _newclass:
        obs = _swig_property(_inertialUKF.InertialUKFConfig_obs_get, _inertialUKF.InertialUKFConfig_obs_set)
    __swig_setmethods__["yMeas"] = _inertialUKF.InertialUKFConfig_yMeas_set
    __swig_getmethods__["yMeas"] = _inertialUKF.InertialUKFConfig_yMeas_get
    if _newclass:
        yMeas = _swig_property(_inertialUKF.InertialUKFConfig_yMeas_get, _inertialUKF.InertialUKFConfig_yMeas_set)
    __swig_setmethods__["SP"] = _inertialUKF.InertialUKFConfig_SP_set
    __swig_getmethods__["SP"] = _inertialUKF.InertialUKFConfig_SP_get
    if _newclass:
        SP = _swig_property(_inertialUKF.InertialUKFConfig_SP_get, _inertialUKF.InertialUKFConfig_SP_set)
    __swig_setmethods__["qNoise"] = _inertialUKF.InertialUKFConfig_qNoise_set
    __swig_getmethods__["qNoise"] = _inertialUKF.InertialUKFConfig_qNoise_get
    if _newclass:
        qNoise = _swig_property(_inertialUKF.InertialUKFConfig_qNoise_get, _inertialUKF.InertialUKFConfig_qNoise_set)
    __swig_setmethods__["sQnoise"] = _inertialUKF.InertialUKFConfig_sQnoise_set
    __swig_getmethods__["sQnoise"] = _inertialUKF.InertialUKFConfig_sQnoise_get
    if _newclass:
        sQnoise = _swig_property(_inertialUKF.InertialUKFConfig_sQnoise_get, _inertialUKF.InertialUKFConfig_sQnoise_set)
    __swig_setmethods__["IInv"] = _inertialUKF.InertialUKFConfig_IInv_set
    __swig_getmethods__["IInv"] = _inertialUKF.InertialUKFConfig_IInv_get
    if _newclass:
        IInv = _swig_property(_inertialUKF.InertialUKFConfig_IInv_get, _inertialUKF.InertialUKFConfig_IInv_set)
    __swig_setmethods__["numUsedGyros"] = _inertialUKF.InertialUKFConfig_numUsedGyros_set
    __swig_getmethods__["numUsedGyros"] = _inertialUKF.InertialUKFConfig_numUsedGyros_get
    if _newclass:
        numUsedGyros = _swig_property(_inertialUKF.InertialUKFConfig_numUsedGyros_get, _inertialUKF.InertialUKFConfig_numUsedGyros_set)
    __swig_setmethods__["firstPassComplete"] = _inertialUKF.InertialUKFConfig_firstPassComplete_set
    __swig_getmethods__["firstPassComplete"] = _inertialUKF.InertialUKFConfig_firstPassComplete_get
    if _newclass:
        firstPassComplete = _swig_property(_inertialUKF.InertialUKFConfig_firstPassComplete_get, _inertialUKF.InertialUKFConfig_firstPassComplete_set)
    __swig_setmethods__["sigma_BNOut"] = _inertialUKF.InertialUKFConfig_sigma_BNOut_set
    __swig_getmethods__["sigma_BNOut"] = _inertialUKF.InertialUKFConfig_sigma_BNOut_get
    if _newclass:
        sigma_BNOut = _swig_property(_inertialUKF.InertialUKFConfig_sigma_BNOut_get, _inertialUKF.InertialUKFConfig_sigma_BNOut_set)
    __swig_setmethods__["omega_BN_BOut"] = _inertialUKF.InertialUKFConfig_omega_BN_BOut_set
    __swig_getmethods__["omega_BN_BOut"] = _inertialUKF.InertialUKFConfig_omega_BN_BOut_get
    if _newclass:
        omega_BN_BOut = _swig_property(_inertialUKF.InertialUKFConfig_omega_BN_BOut_get, _inertialUKF.InertialUKFConfig_omega_BN_BOut_set)
    __swig_setmethods__["timeTagOut"] = _inertialUKF.InertialUKFConfig_timeTagOut_set
    __swig_getmethods__["timeTagOut"] = _inertialUKF.InertialUKFConfig_timeTagOut_get
    if _newclass:
        timeTagOut = _swig_property(_inertialUKF.InertialUKFConfig_timeTagOut_get, _inertialUKF.InertialUKFConfig_timeTagOut_set)
    __swig_setmethods__["outputInertial"] = _inertialUKF.InertialUKFConfig_outputInertial_set
    __swig_getmethods__["outputInertial"] = _inertialUKF.InertialUKFConfig_outputInertial_get
    if _newclass:
        outputInertial = _swig_property(_inertialUKF.InertialUKFConfig_outputInertial_get, _inertialUKF.InertialUKFConfig_outputInertial_set)
    __swig_setmethods__["stSensorIn"] = _inertialUKF.InertialUKFConfig_stSensorIn_set
    __swig_getmethods__["stSensorIn"] = _inertialUKF.InertialUKFConfig_stSensorIn_get
    if _newclass:
        stSensorIn = _swig_property(_inertialUKF.InertialUKFConfig_stSensorIn_get, _inertialUKF.InertialUKFConfig_stSensorIn_set)
    __swig_setmethods__["stSensorOrder"] = _inertialUKF.InertialUKFConfig_stSensorOrder_set
    __swig_getmethods__["stSensorOrder"] = _inertialUKF.InertialUKFConfig_stSensorOrder_get
    if _newclass:
        stSensorOrder = _swig_property(_inertialUKF.InertialUKFConfig_stSensorOrder_get, _inertialUKF.InertialUKFConfig_stSensorOrder_set)
    __swig_setmethods__["ClockTimeST"] = _inertialUKF.InertialUKFConfig_ClockTimeST_set
    __swig_getmethods__["ClockTimeST"] = _inertialUKF.InertialUKFConfig_ClockTimeST_get
    if _newclass:
        ClockTimeST = _swig_property(_inertialUKF.InertialUKFConfig_ClockTimeST_get, _inertialUKF.InertialUKFConfig_ClockTimeST_set)
    __swig_setmethods__["ReadSizeST"] = _inertialUKF.InertialUKFConfig_ReadSizeST_set
    __swig_getmethods__["ReadSizeST"] = _inertialUKF.InertialUKFConfig_ReadSizeST_get
    if _newclass:
        ReadSizeST = _swig_property(_inertialUKF.InertialUKFConfig_ReadSizeST_get, _inertialUKF.InertialUKFConfig_ReadSizeST_set)
    __swig_setmethods__["rwConfigParams"] = _inertialUKF.InertialUKFConfig_rwConfigParams_set
    __swig_getmethods__["rwConfigParams"] = _inertialUKF.InertialUKFConfig_rwConfigParams_get
    if _newclass:
        rwConfigParams = _swig_property(_inertialUKF.InertialUKFConfig_rwConfigParams_get, _inertialUKF.InertialUKFConfig_rwConfigParams_set)
    __swig_setmethods__["rwSpeeds"] = _inertialUKF.InertialUKFConfig_rwSpeeds_set
    __swig_getmethods__["rwSpeeds"] = _inertialUKF.InertialUKFConfig_rwSpeeds_get
    if _newclass:
        rwSpeeds = _swig_property(_inertialUKF.InertialUKFConfig_rwSpeeds_get, _inertialUKF.InertialUKFConfig_rwSpeeds_set)
    __swig_setmethods__["rwSpeedPrev"] = _inertialUKF.InertialUKFConfig_rwSpeedPrev_set
    __swig_getmethods__["rwSpeedPrev"] = _inertialUKF.InertialUKFConfig_rwSpeedPrev_get
    if _newclass:
        rwSpeedPrev = _swig_property(_inertialUKF.InertialUKFConfig_rwSpeedPrev_get, _inertialUKF.InertialUKFConfig_rwSpeedPrev_set)
    __swig_setmethods__["speedDt"] = _inertialUKF.InertialUKFConfig_speedDt_set
    __swig_getmethods__["speedDt"] = _inertialUKF.InertialUKFConfig_speedDt_get
    if _newclass:
        speedDt = _swig_property(_inertialUKF.InertialUKFConfig_speedDt_get, _inertialUKF.InertialUKFConfig_speedDt_set)
    __swig_setmethods__["timeWheelPrev"] = _inertialUKF.InertialUKFConfig_timeWheelPrev_set
    __swig_getmethods__["timeWheelPrev"] = _inertialUKF.InertialUKFConfig_timeWheelPrev_get
    if _newclass:
        timeWheelPrev = _swig_property(_inertialUKF.InertialUKFConfig_timeWheelPrev_get, _inertialUKF.InertialUKFConfig_timeWheelPrev_set)
    __swig_setmethods__["localConfigData"] = _inertialUKF.InertialUKFConfig_localConfigData_set
    __swig_getmethods__["localConfigData"] = _inertialUKF.InertialUKFConfig_localConfigData_get
    if _newclass:
        localConfigData = _swig_property(_inertialUKF.InertialUKFConfig_localConfigData_get, _inertialUKF.InertialUKFConfig_localConfigData_set)
    __swig_setmethods__["gyroFilt"] = _inertialUKF.InertialUKFConfig_gyroFilt_set
    __swig_getmethods__["gyroFilt"] = _inertialUKF.InertialUKFConfig_gyroFilt_get
    if _newclass:
        gyroFilt = _swig_property(_inertialUKF.InertialUKFConfig_gyroFilt_get, _inertialUKF.InertialUKFConfig_gyroFilt_set)
    __swig_setmethods__["navStateOutMsgId"] = _inertialUKF.InertialUKFConfig_navStateOutMsgId_set
    __swig_getmethods__["navStateOutMsgId"] = _inertialUKF.InertialUKFConfig_navStateOutMsgId_get
    if _newclass:
        navStateOutMsgId = _swig_property(_inertialUKF.InertialUKFConfig_navStateOutMsgId_get, _inertialUKF.InertialUKFConfig_navStateOutMsgId_set)
    __swig_setmethods__["filtDataOutMsgId"] = _inertialUKF.InertialUKFConfig_filtDataOutMsgId_set
    __swig_getmethods__["filtDataOutMsgId"] = _inertialUKF.InertialUKFConfig_filtDataOutMsgId_get
    if _newclass:
        filtDataOutMsgId = _swig_property(_inertialUKF.InertialUKFConfig_filtDataOutMsgId_get, _inertialUKF.InertialUKFConfig_filtDataOutMsgId_set)
    __swig_setmethods__["massPropsInMsgId"] = _inertialUKF.InertialUKFConfig_massPropsInMsgId_set
    __swig_getmethods__["massPropsInMsgId"] = _inertialUKF.InertialUKFConfig_massPropsInMsgId_get
    if _newclass:
        massPropsInMsgId = _swig_property(_inertialUKF.InertialUKFConfig_massPropsInMsgId_get, _inertialUKF.InertialUKFConfig_massPropsInMsgId_set)
    __swig_setmethods__["rwParamsInMsgID"] = _inertialUKF.InertialUKFConfig_rwParamsInMsgID_set
    __swig_getmethods__["rwParamsInMsgID"] = _inertialUKF.InertialUKFConfig_rwParamsInMsgID_get
    if _newclass:
        rwParamsInMsgID = _swig_property(_inertialUKF.InertialUKFConfig_rwParamsInMsgID_get, _inertialUKF.InertialUKFConfig_rwParamsInMsgID_set)
    __swig_setmethods__["rwSpeedsInMsgID"] = _inertialUKF.InertialUKFConfig_rwSpeedsInMsgID_set
    __swig_getmethods__["rwSpeedsInMsgID"] = _inertialUKF.InertialUKFConfig_rwSpeedsInMsgID_get
    if _newclass:
        rwSpeedsInMsgID = _swig_property(_inertialUKF.InertialUKFConfig_rwSpeedsInMsgID_get, _inertialUKF.InertialUKFConfig_rwSpeedsInMsgID_set)
    __swig_setmethods__["gyrBuffInMsgID"] = _inertialUKF.InertialUKFConfig_gyrBuffInMsgID_set
    __swig_getmethods__["gyrBuffInMsgID"] = _inertialUKF.InertialUKFConfig_gyrBuffInMsgID_get
    if _newclass:
        gyrBuffInMsgID = _swig_property(_inertialUKF.InertialUKFConfig_gyrBuffInMsgID_get, _inertialUKF.InertialUKFConfig_gyrBuffInMsgID_set)
    __swig_setmethods__["STDatasStruct"] = _inertialUKF.InertialUKFConfig_STDatasStruct_set
    __swig_getmethods__["STDatasStruct"] = _inertialUKF.InertialUKFConfig_STDatasStruct_get
    if _newclass:
        STDatasStruct = _swig_property(_inertialUKF.InertialUKFConfig_STDatasStruct_get, _inertialUKF.InertialUKFConfig_STDatasStruct_set)

    def __init__(self):
        this = _inertialUKF.new_InertialUKFConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_InertialUKFConfig
    __del__ = lambda self: None
InertialUKFConfig_swigregister = _inertialUKF.InertialUKFConfig_swigregister
InertialUKFConfig_swigregister(InertialUKFConfig)


def Read_STMessages(ConfigData, moduleID):
    return _inertialUKF.Read_STMessages(ConfigData, moduleID)
Read_STMessages = _inertialUKF.Read_STMessages

def inertialUKFAggGyrData(ConfigData, prevTime, propTime, gyrData):
    return _inertialUKF.inertialUKFAggGyrData(ConfigData, prevTime, propTime, gyrData)
inertialUKFAggGyrData = _inertialUKF.inertialUKFAggGyrData

def inertialUKFTimeUpdate(ConfigData, updateTime):
    return _inertialUKF.inertialUKFTimeUpdate(ConfigData, updateTime)
inertialUKFTimeUpdate = _inertialUKF.inertialUKFTimeUpdate

def inertialUKFMeasUpdate(ConfigData, updateTime, currentST):
    return _inertialUKF.inertialUKFMeasUpdate(ConfigData, updateTime, currentST)
inertialUKFMeasUpdate = _inertialUKF.inertialUKFMeasUpdate

def inertialStateProp(ConfigData, stateInOut, dt):
    return _inertialUKF.inertialStateProp(ConfigData, stateInOut, dt)
inertialStateProp = _inertialUKF.inertialStateProp

def inertialUKFMeasModel(ConfigData, currentST):
    return _inertialUKF.inertialUKFMeasModel(ConfigData, currentST)
inertialUKFMeasModel = _inertialUKF.inertialUKFMeasModel
UKF_MAX_DIM = _inertialUKF.UKF_MAX_DIM

def ukfQRDJustR(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfQRDJustR(sourceMat, nRow, nCol, destMat)
ukfQRDJustR = _inertialUKF.ukfQRDJustR

def ukfLInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfLInv(sourceMat, nRow, nCol, destMat)
ukfLInv = _inertialUKF.ukfLInv

def ukfUInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfUInv(sourceMat, nRow, nCol, destMat)
ukfUInv = _inertialUKF.ukfUInv

def ukfLUD(sourceMat, nRow, nCol, destMat, indx):
    return _inertialUKF.ukfLUD(sourceMat, nRow, nCol, destMat, indx)
ukfLUD = _inertialUKF.ukfLUD

def ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat):
    return _inertialUKF.ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat)
ukfLUBckSlv = _inertialUKF.ukfLUBckSlv

def ukfMatInv(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfMatInv(sourceMat, nRow, nCol, destMat)
ukfMatInv = _inertialUKF.ukfMatInv

def ukfCholDecomp(sourceMat, nRow, nCol, destMat):
    return _inertialUKF.ukfCholDecomp(sourceMat, nRow, nCol, destMat)
ukfCholDecomp = _inertialUKF.ukfCholDecomp

def ukfCholDownDate(rMat, xVec, beta, nStates, rOut):
    return _inertialUKF.ukfCholDownDate(rMat, xVec, beta, nStates, rOut)
ukfCholDownDate = _inertialUKF.ukfCholDownDate
AKF_N_STATES = _inertialUKF.AKF_N_STATES
MAX_N_ATT_STATES = _inertialUKF.MAX_N_ATT_STATES
class InertialFilterFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialFilterFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialFilterFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _inertialUKF.InertialFilterFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _inertialUKF.InertialFilterFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_inertialUKF.InertialFilterFswMsg_timeTag_get, _inertialUKF.InertialFilterFswMsg_timeTag_set)
    __swig_setmethods__["covar"] = _inertialUKF.InertialFilterFswMsg_covar_set
    __swig_getmethods__["covar"] = _inertialUKF.InertialFilterFswMsg_covar_get
    if _newclass:
        covar = _swig_property(_inertialUKF.InertialFilterFswMsg_covar_get, _inertialUKF.InertialFilterFswMsg_covar_set)
    __swig_setmethods__["state"] = _inertialUKF.InertialFilterFswMsg_state_set
    __swig_getmethods__["state"] = _inertialUKF.InertialFilterFswMsg_state_get
    if _newclass:
        state = _swig_property(_inertialUKF.InertialFilterFswMsg_state_get, _inertialUKF.InertialFilterFswMsg_state_set)
    __swig_setmethods__["numObs"] = _inertialUKF.InertialFilterFswMsg_numObs_set
    __swig_getmethods__["numObs"] = _inertialUKF.InertialFilterFswMsg_numObs_get
    if _newclass:
        numObs = _swig_property(_inertialUKF.InertialFilterFswMsg_numObs_get, _inertialUKF.InertialFilterFswMsg_numObs_set)

    def __init__(self):
        this = _inertialUKF.new_InertialFilterFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_InertialFilterFswMsg
    __del__ = lambda self: None
InertialFilterFswMsg_swigregister = _inertialUKF.InertialFilterFswMsg_swigregister
InertialFilterFswMsg_swigregister(InertialFilterFswMsg)

class STAttFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STAttFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STAttFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _inertialUKF.STAttFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _inertialUKF.STAttFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_inertialUKF.STAttFswMsg_timeTag_get, _inertialUKF.STAttFswMsg_timeTag_set)
    __swig_setmethods__["MRP_BdyInrtl"] = _inertialUKF.STAttFswMsg_MRP_BdyInrtl_set
    __swig_getmethods__["MRP_BdyInrtl"] = _inertialUKF.STAttFswMsg_MRP_BdyInrtl_get
    if _newclass:
        MRP_BdyInrtl = _swig_property(_inertialUKF.STAttFswMsg_MRP_BdyInrtl_get, _inertialUKF.STAttFswMsg_MRP_BdyInrtl_set)

    def __init__(self):
        this = _inertialUKF.new_STAttFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_STAttFswMsg
    __del__ = lambda self: None
STAttFswMsg_swigregister = _inertialUKF.STAttFswMsg_swigregister
STAttFswMsg_swigregister(STAttFswMsg)

class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _inertialUKF.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _inertialUKF.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_inertialUKF.VehicleConfigFswMsg_ISCPntB_B_get, _inertialUKF.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _inertialUKF.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _inertialUKF.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_inertialUKF.VehicleConfigFswMsg_CoM_B_get, _inertialUKF.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _inertialUKF.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _inertialUKF.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_inertialUKF.VehicleConfigFswMsg_CurrentADCSState_get, _inertialUKF.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _inertialUKF.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _inertialUKF.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

class RWArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GsMatrix_B"] = _inertialUKF.RWArrayConfigFswMsg_GsMatrix_B_set
    __swig_getmethods__["GsMatrix_B"] = _inertialUKF.RWArrayConfigFswMsg_GsMatrix_B_get
    if _newclass:
        GsMatrix_B = _swig_property(_inertialUKF.RWArrayConfigFswMsg_GsMatrix_B_get, _inertialUKF.RWArrayConfigFswMsg_GsMatrix_B_set)
    __swig_setmethods__["JsList"] = _inertialUKF.RWArrayConfigFswMsg_JsList_set
    __swig_getmethods__["JsList"] = _inertialUKF.RWArrayConfigFswMsg_JsList_get
    if _newclass:
        JsList = _swig_property(_inertialUKF.RWArrayConfigFswMsg_JsList_get, _inertialUKF.RWArrayConfigFswMsg_JsList_set)
    __swig_setmethods__["numRW"] = _inertialUKF.RWArrayConfigFswMsg_numRW_set
    __swig_getmethods__["numRW"] = _inertialUKF.RWArrayConfigFswMsg_numRW_get
    if _newclass:
        numRW = _swig_property(_inertialUKF.RWArrayConfigFswMsg_numRW_get, _inertialUKF.RWArrayConfigFswMsg_numRW_set)
    __swig_setmethods__["uMax"] = _inertialUKF.RWArrayConfigFswMsg_uMax_set
    __swig_getmethods__["uMax"] = _inertialUKF.RWArrayConfigFswMsg_uMax_get
    if _newclass:
        uMax = _swig_property(_inertialUKF.RWArrayConfigFswMsg_uMax_get, _inertialUKF.RWArrayConfigFswMsg_uMax_set)

    def __init__(self):
        this = _inertialUKF.new_RWArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_RWArrayConfigFswMsg
    __del__ = lambda self: None
RWArrayConfigFswMsg_swigregister = _inertialUKF.RWArrayConfigFswMsg_swigregister
RWArrayConfigFswMsg_swigregister(RWArrayConfigFswMsg)

class RWSpeedIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWSpeedIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWSpeedIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelSpeeds"] = _inertialUKF.RWSpeedIntMsg_wheelSpeeds_set
    __swig_getmethods__["wheelSpeeds"] = _inertialUKF.RWSpeedIntMsg_wheelSpeeds_get
    if _newclass:
        wheelSpeeds = _swig_property(_inertialUKF.RWSpeedIntMsg_wheelSpeeds_get, _inertialUKF.RWSpeedIntMsg_wheelSpeeds_set)
    __swig_setmethods__["wheelThetas"] = _inertialUKF.RWSpeedIntMsg_wheelThetas_set
    __swig_getmethods__["wheelThetas"] = _inertialUKF.RWSpeedIntMsg_wheelThetas_get
    if _newclass:
        wheelThetas = _swig_property(_inertialUKF.RWSpeedIntMsg_wheelThetas_get, _inertialUKF.RWSpeedIntMsg_wheelThetas_set)

    def __init__(self):
        this = _inertialUKF.new_RWSpeedIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_RWSpeedIntMsg
    __del__ = lambda self: None
RWSpeedIntMsg_swigregister = _inertialUKF.RWSpeedIntMsg_swigregister
RWSpeedIntMsg_swigregister(RWSpeedIntMsg)

MAX_ACC_BUF_PKT = _inertialUKF.MAX_ACC_BUF_PKT
class AccDataFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccDataFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccDataFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accPkts"] = _inertialUKF.AccDataFswMsg_accPkts_set
    __swig_getmethods__["accPkts"] = _inertialUKF.AccDataFswMsg_accPkts_get
    if _newclass:
        accPkts = _swig_property(_inertialUKF.AccDataFswMsg_accPkts_get, _inertialUKF.AccDataFswMsg_accPkts_set)

    def __init__(self):
        this = _inertialUKF.new_AccDataFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_AccDataFswMsg
    __del__ = lambda self: None
AccDataFswMsg_swigregister = _inertialUKF.AccDataFswMsg_swigregister
AccDataFswMsg_swigregister(AccDataFswMsg)

class AccPktDataFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccPktDataFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccPktDataFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["measTime"] = _inertialUKF.AccPktDataFswMsg_measTime_set
    __swig_getmethods__["measTime"] = _inertialUKF.AccPktDataFswMsg_measTime_get
    if _newclass:
        measTime = _swig_property(_inertialUKF.AccPktDataFswMsg_measTime_get, _inertialUKF.AccPktDataFswMsg_measTime_set)
    __swig_setmethods__["gyro_B"] = _inertialUKF.AccPktDataFswMsg_gyro_B_set
    __swig_getmethods__["gyro_B"] = _inertialUKF.AccPktDataFswMsg_gyro_B_get
    if _newclass:
        gyro_B = _swig_property(_inertialUKF.AccPktDataFswMsg_gyro_B_get, _inertialUKF.AccPktDataFswMsg_gyro_B_set)
    __swig_setmethods__["accel_B"] = _inertialUKF.AccPktDataFswMsg_accel_B_set
    __swig_getmethods__["accel_B"] = _inertialUKF.AccPktDataFswMsg_accel_B_get
    if _newclass:
        accel_B = _swig_property(_inertialUKF.AccPktDataFswMsg_accel_B_get, _inertialUKF.AccPktDataFswMsg_accel_B_set)

    def __init__(self):
        this = _inertialUKF.new_AccPktDataFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_AccPktDataFswMsg
    __del__ = lambda self: None
AccPktDataFswMsg_swigregister = _inertialUKF.AccPktDataFswMsg_swigregister
AccPktDataFswMsg_swigregister(AccPktDataFswMsg)

class LowPassFilterData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowPassFilterData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LowPassFilterData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hStep"] = _inertialUKF.LowPassFilterData_hStep_set
    __swig_getmethods__["hStep"] = _inertialUKF.LowPassFilterData_hStep_get
    if _newclass:
        hStep = _swig_property(_inertialUKF.LowPassFilterData_hStep_get, _inertialUKF.LowPassFilterData_hStep_set)
    __swig_setmethods__["omegCutoff"] = _inertialUKF.LowPassFilterData_omegCutoff_set
    __swig_getmethods__["omegCutoff"] = _inertialUKF.LowPassFilterData_omegCutoff_get
    if _newclass:
        omegCutoff = _swig_property(_inertialUKF.LowPassFilterData_omegCutoff_get, _inertialUKF.LowPassFilterData_omegCutoff_set)
    __swig_setmethods__["currentState"] = _inertialUKF.LowPassFilterData_currentState_set
    __swig_getmethods__["currentState"] = _inertialUKF.LowPassFilterData_currentState_get
    if _newclass:
        currentState = _swig_property(_inertialUKF.LowPassFilterData_currentState_get, _inertialUKF.LowPassFilterData_currentState_set)
    __swig_setmethods__["currentMeas"] = _inertialUKF.LowPassFilterData_currentMeas_set
    __swig_getmethods__["currentMeas"] = _inertialUKF.LowPassFilterData_currentMeas_get
    if _newclass:
        currentMeas = _swig_property(_inertialUKF.LowPassFilterData_currentMeas_get, _inertialUKF.LowPassFilterData_currentMeas_set)

    def __init__(self):
        this = _inertialUKF.new_LowPassFilterData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _inertialUKF.delete_LowPassFilterData
    __del__ = lambda self: None
LowPassFilterData_swigregister = _inertialUKF.LowPassFilterData_swigregister
LowPassFilterData_swigregister(LowPassFilterData)


def lowPassFilterSignal(newMeas, lpData):
    return _inertialUKF.lowPassFilterSignal(newMeas, lpData)
lowPassFilterSignal = _inertialUKF.lowPassFilterSignal
sizeof_STAttFswMsg = _inertialUKF.sizeof_STAttFswMsg
sizeof_RWArrayConfigFswMsg = _inertialUKF.sizeof_RWArrayConfigFswMsg
sizeof_RWSpeedIntMsg = _inertialUKF.sizeof_RWSpeedIntMsg
sizeof_VehicleConfigFswMsg = _inertialUKF.sizeof_VehicleConfigFswMsg
sizeof_AccDataFswMsg = _inertialUKF.sizeof_AccDataFswMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


