# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mrpRotation')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mrpRotation')
    _mrpRotation = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mrpRotation', [dirname(__file__)])
        except ImportError:
            import _mrpRotation
            return _mrpRotation
        try:
            _mod = imp.load_module('_mrpRotation', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mrpRotation = swig_import_helper()
    del swig_import_helper
else:
    import _mrpRotation
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _mrpRotation.new_doubleArray(nelements)
new_doubleArray = _mrpRotation.new_doubleArray

def delete_doubleArray(ary):
    return _mrpRotation.delete_doubleArray(ary)
delete_doubleArray = _mrpRotation.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _mrpRotation.doubleArray_getitem(ary, index)
doubleArray_getitem = _mrpRotation.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _mrpRotation.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _mrpRotation.doubleArray_setitem

def new_longArray(nelements):
    return _mrpRotation.new_longArray(nelements)
new_longArray = _mrpRotation.new_longArray

def delete_longArray(ary):
    return _mrpRotation.delete_longArray(ary)
delete_longArray = _mrpRotation.delete_longArray

def longArray_getitem(ary, index):
    return _mrpRotation.longArray_getitem(ary, index)
longArray_getitem = _mrpRotation.longArray_getitem

def longArray_setitem(ary, index, value):
    return _mrpRotation.longArray_setitem(ary, index, value)
longArray_setitem = _mrpRotation.longArray_setitem

def new_intArray(nelements):
    return _mrpRotation.new_intArray(nelements)
new_intArray = _mrpRotation.new_intArray

def delete_intArray(ary):
    return _mrpRotation.delete_intArray(ary)
delete_intArray = _mrpRotation.delete_intArray

def intArray_getitem(ary, index):
    return _mrpRotation.intArray_getitem(ary, index)
intArray_getitem = _mrpRotation.intArray_getitem

def intArray_setitem(ary, index, value):
    return _mrpRotation.intArray_setitem(ary, index, value)
intArray_setitem = _mrpRotation.intArray_setitem

def new_shortArray(nelements):
    return _mrpRotation.new_shortArray(nelements)
new_shortArray = _mrpRotation.new_shortArray

def delete_shortArray(ary):
    return _mrpRotation.delete_shortArray(ary)
delete_shortArray = _mrpRotation.delete_shortArray

def shortArray_getitem(ary, index):
    return _mrpRotation.shortArray_getitem(ary, index)
shortArray_getitem = _mrpRotation.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _mrpRotation.shortArray_setitem(ary, index, value)
shortArray_setitem = _mrpRotation.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_mrpRotation = _mrpRotation.Update_mrpRotation
SelfInit_mrpRotation = _mrpRotation.SelfInit_mrpRotation
CrossInit_mrpRotation = _mrpRotation.CrossInit_mrpRotation
Reset_mrpRotation = _mrpRotation.Reset_mrpRotation
sizeof_mrpRotationConfig = _mrpRotation.sizeof_mrpRotationConfig
sizeof_AttRefFswMsg = _mrpRotation.sizeof_AttRefFswMsg
sizeof_AttStateFswMsg = _mrpRotation.sizeof_AttStateFswMsg
class mrpRotationConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mrpRotationConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mrpRotationConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mrpSet"] = _mrpRotation.mrpRotationConfig_mrpSet_set
    __swig_getmethods__["mrpSet"] = _mrpRotation.mrpRotationConfig_mrpSet_get
    if _newclass:
        mrpSet = _swig_property(_mrpRotation.mrpRotationConfig_mrpSet_get, _mrpRotation.mrpRotationConfig_mrpSet_set)
    __swig_setmethods__["omega_RR0_R"] = _mrpRotation.mrpRotationConfig_omega_RR0_R_set
    __swig_getmethods__["omega_RR0_R"] = _mrpRotation.mrpRotationConfig_omega_RR0_R_get
    if _newclass:
        omega_RR0_R = _swig_property(_mrpRotation.mrpRotationConfig_omega_RR0_R_get, _mrpRotation.mrpRotationConfig_omega_RR0_R_set)
    __swig_setmethods__["cmdSet"] = _mrpRotation.mrpRotationConfig_cmdSet_set
    __swig_getmethods__["cmdSet"] = _mrpRotation.mrpRotationConfig_cmdSet_get
    if _newclass:
        cmdSet = _swig_property(_mrpRotation.mrpRotationConfig_cmdSet_get, _mrpRotation.mrpRotationConfig_cmdSet_set)
    __swig_setmethods__["cmdRates"] = _mrpRotation.mrpRotationConfig_cmdRates_set
    __swig_getmethods__["cmdRates"] = _mrpRotation.mrpRotationConfig_cmdRates_get
    if _newclass:
        cmdRates = _swig_property(_mrpRotation.mrpRotationConfig_cmdRates_get, _mrpRotation.mrpRotationConfig_cmdRates_set)
    __swig_setmethods__["priorCmdSet"] = _mrpRotation.mrpRotationConfig_priorCmdSet_set
    __swig_getmethods__["priorCmdSet"] = _mrpRotation.mrpRotationConfig_priorCmdSet_get
    if _newclass:
        priorCmdSet = _swig_property(_mrpRotation.mrpRotationConfig_priorCmdSet_get, _mrpRotation.mrpRotationConfig_priorCmdSet_set)
    __swig_setmethods__["priorCmdRates"] = _mrpRotation.mrpRotationConfig_priorCmdRates_set
    __swig_getmethods__["priorCmdRates"] = _mrpRotation.mrpRotationConfig_priorCmdRates_get
    if _newclass:
        priorCmdRates = _swig_property(_mrpRotation.mrpRotationConfig_priorCmdRates_get, _mrpRotation.mrpRotationConfig_priorCmdRates_set)
    __swig_setmethods__["priorTime"] = _mrpRotation.mrpRotationConfig_priorTime_set
    __swig_getmethods__["priorTime"] = _mrpRotation.mrpRotationConfig_priorTime_get
    if _newclass:
        priorTime = _swig_property(_mrpRotation.mrpRotationConfig_priorTime_get, _mrpRotation.mrpRotationConfig_priorTime_set)
    __swig_setmethods__["dt"] = _mrpRotation.mrpRotationConfig_dt_set
    __swig_getmethods__["dt"] = _mrpRotation.mrpRotationConfig_dt_get
    if _newclass:
        dt = _swig_property(_mrpRotation.mrpRotationConfig_dt_get, _mrpRotation.mrpRotationConfig_dt_set)
    __swig_setmethods__["attRefOutMsgName"] = _mrpRotation.mrpRotationConfig_attRefOutMsgName_set
    __swig_getmethods__["attRefOutMsgName"] = _mrpRotation.mrpRotationConfig_attRefOutMsgName_get
    if _newclass:
        attRefOutMsgName = _swig_property(_mrpRotation.mrpRotationConfig_attRefOutMsgName_get, _mrpRotation.mrpRotationConfig_attRefOutMsgName_set)
    __swig_setmethods__["attRefOutMsgID"] = _mrpRotation.mrpRotationConfig_attRefOutMsgID_set
    __swig_getmethods__["attRefOutMsgID"] = _mrpRotation.mrpRotationConfig_attRefOutMsgID_get
    if _newclass:
        attRefOutMsgID = _swig_property(_mrpRotation.mrpRotationConfig_attRefOutMsgID_get, _mrpRotation.mrpRotationConfig_attRefOutMsgID_set)
    __swig_setmethods__["attitudeOutMsgName"] = _mrpRotation.mrpRotationConfig_attitudeOutMsgName_set
    __swig_getmethods__["attitudeOutMsgName"] = _mrpRotation.mrpRotationConfig_attitudeOutMsgName_get
    if _newclass:
        attitudeOutMsgName = _swig_property(_mrpRotation.mrpRotationConfig_attitudeOutMsgName_get, _mrpRotation.mrpRotationConfig_attitudeOutMsgName_set)
    __swig_setmethods__["attitudeOutMsgID"] = _mrpRotation.mrpRotationConfig_attitudeOutMsgID_set
    __swig_getmethods__["attitudeOutMsgID"] = _mrpRotation.mrpRotationConfig_attitudeOutMsgID_get
    if _newclass:
        attitudeOutMsgID = _swig_property(_mrpRotation.mrpRotationConfig_attitudeOutMsgID_get, _mrpRotation.mrpRotationConfig_attitudeOutMsgID_set)
    __swig_setmethods__["attRefInMsgName"] = _mrpRotation.mrpRotationConfig_attRefInMsgName_set
    __swig_getmethods__["attRefInMsgName"] = _mrpRotation.mrpRotationConfig_attRefInMsgName_get
    if _newclass:
        attRefInMsgName = _swig_property(_mrpRotation.mrpRotationConfig_attRefInMsgName_get, _mrpRotation.mrpRotationConfig_attRefInMsgName_set)
    __swig_setmethods__["attRefInMsgID"] = _mrpRotation.mrpRotationConfig_attRefInMsgID_set
    __swig_getmethods__["attRefInMsgID"] = _mrpRotation.mrpRotationConfig_attRefInMsgID_get
    if _newclass:
        attRefInMsgID = _swig_property(_mrpRotation.mrpRotationConfig_attRefInMsgID_get, _mrpRotation.mrpRotationConfig_attRefInMsgID_set)
    __swig_setmethods__["desiredAttInMsgName"] = _mrpRotation.mrpRotationConfig_desiredAttInMsgName_set
    __swig_getmethods__["desiredAttInMsgName"] = _mrpRotation.mrpRotationConfig_desiredAttInMsgName_get
    if _newclass:
        desiredAttInMsgName = _swig_property(_mrpRotation.mrpRotationConfig_desiredAttInMsgName_get, _mrpRotation.mrpRotationConfig_desiredAttInMsgName_set)
    __swig_setmethods__["desiredAttInMsgID"] = _mrpRotation.mrpRotationConfig_desiredAttInMsgID_set
    __swig_getmethods__["desiredAttInMsgID"] = _mrpRotation.mrpRotationConfig_desiredAttInMsgID_get
    if _newclass:
        desiredAttInMsgID = _swig_property(_mrpRotation.mrpRotationConfig_desiredAttInMsgID_get, _mrpRotation.mrpRotationConfig_desiredAttInMsgID_set)
    __swig_setmethods__["attRefOut"] = _mrpRotation.mrpRotationConfig_attRefOut_set
    __swig_getmethods__["attRefOut"] = _mrpRotation.mrpRotationConfig_attRefOut_get
    if _newclass:
        attRefOut = _swig_property(_mrpRotation.mrpRotationConfig_attRefOut_get, _mrpRotation.mrpRotationConfig_attRefOut_set)
    __swig_setmethods__["attStateOut"] = _mrpRotation.mrpRotationConfig_attStateOut_set
    __swig_getmethods__["attStateOut"] = _mrpRotation.mrpRotationConfig_attStateOut_get
    if _newclass:
        attStateOut = _swig_property(_mrpRotation.mrpRotationConfig_attStateOut_get, _mrpRotation.mrpRotationConfig_attStateOut_set)

    def __init__(self):
        this = _mrpRotation.new_mrpRotationConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mrpRotation.delete_mrpRotationConfig
    __del__ = lambda self: None
mrpRotationConfig_swigregister = _mrpRotation.mrpRotationConfig_swigregister
mrpRotationConfig_swigregister(mrpRotationConfig)


def writeOutputMessages(ConfigData, callTime, moduleID):
    return _mrpRotation.writeOutputMessages(ConfigData, callTime, moduleID)
writeOutputMessages = _mrpRotation.writeOutputMessages

def checkRasterCommands(ConfigData):
    return _mrpRotation.checkRasterCommands(ConfigData)
checkRasterCommands = _mrpRotation.checkRasterCommands

def computeTimeStep(ConfigData, callTime):
    return _mrpRotation.computeTimeStep(ConfigData, callTime)
computeTimeStep = _mrpRotation.computeTimeStep

def computeMRPRotationReference(ConfigData, sigma_R0N, omega_R0N_N, domega_R0N_N):
    return _mrpRotation.computeMRPRotationReference(ConfigData, sigma_R0N, omega_R0N_N, domega_R0N_N)
computeMRPRotationReference = _mrpRotation.computeMRPRotationReference
class AttRefFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttRefFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttRefFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_RN"] = _mrpRotation.AttRefFswMsg_sigma_RN_set
    __swig_getmethods__["sigma_RN"] = _mrpRotation.AttRefFswMsg_sigma_RN_get
    if _newclass:
        sigma_RN = _swig_property(_mrpRotation.AttRefFswMsg_sigma_RN_get, _mrpRotation.AttRefFswMsg_sigma_RN_set)
    __swig_setmethods__["omega_RN_N"] = _mrpRotation.AttRefFswMsg_omega_RN_N_set
    __swig_getmethods__["omega_RN_N"] = _mrpRotation.AttRefFswMsg_omega_RN_N_get
    if _newclass:
        omega_RN_N = _swig_property(_mrpRotation.AttRefFswMsg_omega_RN_N_get, _mrpRotation.AttRefFswMsg_omega_RN_N_set)
    __swig_setmethods__["domega_RN_N"] = _mrpRotation.AttRefFswMsg_domega_RN_N_set
    __swig_getmethods__["domega_RN_N"] = _mrpRotation.AttRefFswMsg_domega_RN_N_get
    if _newclass:
        domega_RN_N = _swig_property(_mrpRotation.AttRefFswMsg_domega_RN_N_get, _mrpRotation.AttRefFswMsg_domega_RN_N_set)

    def __init__(self):
        this = _mrpRotation.new_AttRefFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mrpRotation.delete_AttRefFswMsg
    __del__ = lambda self: None
AttRefFswMsg_swigregister = _mrpRotation.AttRefFswMsg_swigregister
AttRefFswMsg_swigregister(AttRefFswMsg)

class AttStateFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttStateFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttStateFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mrpRotation.AttStateFswMsg_state_set
    __swig_getmethods__["state"] = _mrpRotation.AttStateFswMsg_state_get
    if _newclass:
        state = _swig_property(_mrpRotation.AttStateFswMsg_state_get, _mrpRotation.AttStateFswMsg_state_set)
    __swig_setmethods__["rate"] = _mrpRotation.AttStateFswMsg_rate_set
    __swig_getmethods__["rate"] = _mrpRotation.AttStateFswMsg_rate_get
    if _newclass:
        rate = _swig_property(_mrpRotation.AttStateFswMsg_rate_get, _mrpRotation.AttStateFswMsg_rate_set)

    def __init__(self):
        this = _mrpRotation.new_AttStateFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mrpRotation.delete_AttStateFswMsg
    __del__ = lambda self: None
AttStateFswMsg_swigregister = _mrpRotation.AttStateFswMsg_swigregister
AttStateFswMsg_swigregister(AttStateFswMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


