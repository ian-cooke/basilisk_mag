# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simpleDeadband')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simpleDeadband')
    _simpleDeadband = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simpleDeadband', [dirname(__file__)])
        except ImportError:
            import _simpleDeadband
            return _simpleDeadband
        try:
            _mod = imp.load_module('_simpleDeadband', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simpleDeadband = swig_import_helper()
    del swig_import_helper
else:
    import _simpleDeadband
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _simpleDeadband.new_doubleArray(nelements)
new_doubleArray = _simpleDeadband.new_doubleArray

def delete_doubleArray(ary):
    return _simpleDeadband.delete_doubleArray(ary)
delete_doubleArray = _simpleDeadband.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _simpleDeadband.doubleArray_getitem(ary, index)
doubleArray_getitem = _simpleDeadband.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _simpleDeadband.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _simpleDeadband.doubleArray_setitem

def new_longArray(nelements):
    return _simpleDeadband.new_longArray(nelements)
new_longArray = _simpleDeadband.new_longArray

def delete_longArray(ary):
    return _simpleDeadband.delete_longArray(ary)
delete_longArray = _simpleDeadband.delete_longArray

def longArray_getitem(ary, index):
    return _simpleDeadband.longArray_getitem(ary, index)
longArray_getitem = _simpleDeadband.longArray_getitem

def longArray_setitem(ary, index, value):
    return _simpleDeadband.longArray_setitem(ary, index, value)
longArray_setitem = _simpleDeadband.longArray_setitem

def new_intArray(nelements):
    return _simpleDeadband.new_intArray(nelements)
new_intArray = _simpleDeadband.new_intArray

def delete_intArray(ary):
    return _simpleDeadband.delete_intArray(ary)
delete_intArray = _simpleDeadband.delete_intArray

def intArray_getitem(ary, index):
    return _simpleDeadband.intArray_getitem(ary, index)
intArray_getitem = _simpleDeadband.intArray_getitem

def intArray_setitem(ary, index, value):
    return _simpleDeadband.intArray_setitem(ary, index, value)
intArray_setitem = _simpleDeadband.intArray_setitem

def new_shortArray(nelements):
    return _simpleDeadband.new_shortArray(nelements)
new_shortArray = _simpleDeadband.new_shortArray

def delete_shortArray(ary):
    return _simpleDeadband.delete_shortArray(ary)
delete_shortArray = _simpleDeadband.delete_shortArray

def shortArray_getitem(ary, index):
    return _simpleDeadband.shortArray_getitem(ary, index)
shortArray_getitem = _simpleDeadband.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _simpleDeadband.shortArray_setitem(ary, index, value)
shortArray_setitem = _simpleDeadband.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_simpleDeadband = _simpleDeadband.Update_simpleDeadband
SelfInit_simpleDeadband = _simpleDeadband.SelfInit_simpleDeadband
CrossInit_simpleDeadband = _simpleDeadband.CrossInit_simpleDeadband
Reset_simpleDeadband = _simpleDeadband.Reset_simpleDeadband
sizeof_simpleDeadbandConfig = _simpleDeadband.sizeof_simpleDeadbandConfig
sizeof_AttGuidFswMsg = _simpleDeadband.sizeof_AttGuidFswMsg
class simpleDeadbandConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simpleDeadbandConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simpleDeadbandConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["innerAttThresh"] = _simpleDeadband.simpleDeadbandConfig_innerAttThresh_set
    __swig_getmethods__["innerAttThresh"] = _simpleDeadband.simpleDeadbandConfig_innerAttThresh_get
    if _newclass:
        innerAttThresh = _swig_property(_simpleDeadband.simpleDeadbandConfig_innerAttThresh_get, _simpleDeadband.simpleDeadbandConfig_innerAttThresh_set)
    __swig_setmethods__["outerAttThresh"] = _simpleDeadband.simpleDeadbandConfig_outerAttThresh_set
    __swig_getmethods__["outerAttThresh"] = _simpleDeadband.simpleDeadbandConfig_outerAttThresh_get
    if _newclass:
        outerAttThresh = _swig_property(_simpleDeadband.simpleDeadbandConfig_outerAttThresh_get, _simpleDeadband.simpleDeadbandConfig_outerAttThresh_set)
    __swig_setmethods__["innerRateThresh"] = _simpleDeadband.simpleDeadbandConfig_innerRateThresh_set
    __swig_getmethods__["innerRateThresh"] = _simpleDeadband.simpleDeadbandConfig_innerRateThresh_get
    if _newclass:
        innerRateThresh = _swig_property(_simpleDeadband.simpleDeadbandConfig_innerRateThresh_get, _simpleDeadband.simpleDeadbandConfig_innerRateThresh_set)
    __swig_setmethods__["outerRateThresh"] = _simpleDeadband.simpleDeadbandConfig_outerRateThresh_set
    __swig_getmethods__["outerRateThresh"] = _simpleDeadband.simpleDeadbandConfig_outerRateThresh_get
    if _newclass:
        outerRateThresh = _swig_property(_simpleDeadband.simpleDeadbandConfig_outerRateThresh_get, _simpleDeadband.simpleDeadbandConfig_outerRateThresh_set)
    __swig_setmethods__["wasControlOff"] = _simpleDeadband.simpleDeadbandConfig_wasControlOff_set
    __swig_getmethods__["wasControlOff"] = _simpleDeadband.simpleDeadbandConfig_wasControlOff_get
    if _newclass:
        wasControlOff = _swig_property(_simpleDeadband.simpleDeadbandConfig_wasControlOff_get, _simpleDeadband.simpleDeadbandConfig_wasControlOff_set)
    __swig_setmethods__["attError"] = _simpleDeadband.simpleDeadbandConfig_attError_set
    __swig_getmethods__["attError"] = _simpleDeadband.simpleDeadbandConfig_attError_get
    if _newclass:
        attError = _swig_property(_simpleDeadband.simpleDeadbandConfig_attError_get, _simpleDeadband.simpleDeadbandConfig_attError_set)
    __swig_setmethods__["rateError"] = _simpleDeadband.simpleDeadbandConfig_rateError_set
    __swig_getmethods__["rateError"] = _simpleDeadband.simpleDeadbandConfig_rateError_get
    if _newclass:
        rateError = _swig_property(_simpleDeadband.simpleDeadbandConfig_rateError_get, _simpleDeadband.simpleDeadbandConfig_rateError_set)
    __swig_setmethods__["outputDataName"] = _simpleDeadband.simpleDeadbandConfig_outputDataName_set
    __swig_getmethods__["outputDataName"] = _simpleDeadband.simpleDeadbandConfig_outputDataName_get
    if _newclass:
        outputDataName = _swig_property(_simpleDeadband.simpleDeadbandConfig_outputDataName_get, _simpleDeadband.simpleDeadbandConfig_outputDataName_set)
    __swig_setmethods__["inputGuidName"] = _simpleDeadband.simpleDeadbandConfig_inputGuidName_set
    __swig_getmethods__["inputGuidName"] = _simpleDeadband.simpleDeadbandConfig_inputGuidName_get
    if _newclass:
        inputGuidName = _swig_property(_simpleDeadband.simpleDeadbandConfig_inputGuidName_get, _simpleDeadband.simpleDeadbandConfig_inputGuidName_set)
    __swig_setmethods__["outputGuidID"] = _simpleDeadband.simpleDeadbandConfig_outputGuidID_set
    __swig_getmethods__["outputGuidID"] = _simpleDeadband.simpleDeadbandConfig_outputGuidID_get
    if _newclass:
        outputGuidID = _swig_property(_simpleDeadband.simpleDeadbandConfig_outputGuidID_get, _simpleDeadband.simpleDeadbandConfig_outputGuidID_set)
    __swig_setmethods__["inputGuidID"] = _simpleDeadband.simpleDeadbandConfig_inputGuidID_set
    __swig_getmethods__["inputGuidID"] = _simpleDeadband.simpleDeadbandConfig_inputGuidID_get
    if _newclass:
        inputGuidID = _swig_property(_simpleDeadband.simpleDeadbandConfig_inputGuidID_get, _simpleDeadband.simpleDeadbandConfig_inputGuidID_set)
    __swig_setmethods__["attGuidOut"] = _simpleDeadband.simpleDeadbandConfig_attGuidOut_set
    __swig_getmethods__["attGuidOut"] = _simpleDeadband.simpleDeadbandConfig_attGuidOut_get
    if _newclass:
        attGuidOut = _swig_property(_simpleDeadband.simpleDeadbandConfig_attGuidOut_get, _simpleDeadband.simpleDeadbandConfig_attGuidOut_set)

    def __init__(self):
        this = _simpleDeadband.new_simpleDeadbandConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simpleDeadband.delete_simpleDeadbandConfig
    __del__ = lambda self: None
simpleDeadbandConfig_swigregister = _simpleDeadband.simpleDeadbandConfig_swigregister
simpleDeadbandConfig_swigregister(simpleDeadbandConfig)


def applyDBLogic_simpleDeadband(ConfigData):
    return _simpleDeadband.applyDBLogic_simpleDeadband(ConfigData)
applyDBLogic_simpleDeadband = _simpleDeadband.applyDBLogic_simpleDeadband
class AttGuidFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttGuidFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttGuidFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_BR"] = _simpleDeadband.AttGuidFswMsg_sigma_BR_set
    __swig_getmethods__["sigma_BR"] = _simpleDeadband.AttGuidFswMsg_sigma_BR_get
    if _newclass:
        sigma_BR = _swig_property(_simpleDeadband.AttGuidFswMsg_sigma_BR_get, _simpleDeadband.AttGuidFswMsg_sigma_BR_set)
    __swig_setmethods__["omega_BR_B"] = _simpleDeadband.AttGuidFswMsg_omega_BR_B_set
    __swig_getmethods__["omega_BR_B"] = _simpleDeadband.AttGuidFswMsg_omega_BR_B_get
    if _newclass:
        omega_BR_B = _swig_property(_simpleDeadband.AttGuidFswMsg_omega_BR_B_get, _simpleDeadband.AttGuidFswMsg_omega_BR_B_set)
    __swig_setmethods__["omega_RN_B"] = _simpleDeadband.AttGuidFswMsg_omega_RN_B_set
    __swig_getmethods__["omega_RN_B"] = _simpleDeadband.AttGuidFswMsg_omega_RN_B_get
    if _newclass:
        omega_RN_B = _swig_property(_simpleDeadband.AttGuidFswMsg_omega_RN_B_get, _simpleDeadband.AttGuidFswMsg_omega_RN_B_set)
    __swig_setmethods__["domega_RN_B"] = _simpleDeadband.AttGuidFswMsg_domega_RN_B_set
    __swig_getmethods__["domega_RN_B"] = _simpleDeadband.AttGuidFswMsg_domega_RN_B_get
    if _newclass:
        domega_RN_B = _swig_property(_simpleDeadband.AttGuidFswMsg_domega_RN_B_get, _simpleDeadband.AttGuidFswMsg_domega_RN_B_set)
    __swig_setmethods__["PRV"] = _simpleDeadband.AttGuidFswMsg_PRV_set
    __swig_getmethods__["PRV"] = _simpleDeadband.AttGuidFswMsg_PRV_get
    if _newclass:
        PRV = _swig_property(_simpleDeadband.AttGuidFswMsg_PRV_get, _simpleDeadband.AttGuidFswMsg_PRV_set)

    def __init__(self):
        this = _simpleDeadband.new_AttGuidFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simpleDeadband.delete_AttGuidFswMsg
    __del__ = lambda self: None
AttGuidFswMsg_swigregister = _simpleDeadband.AttGuidFswMsg_swigregister
AttGuidFswMsg_swigregister(AttGuidFswMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


