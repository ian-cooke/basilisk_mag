# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_celestialTwoBodyPoint')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_celestialTwoBodyPoint')
    _celestialTwoBodyPoint = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_celestialTwoBodyPoint', [dirname(__file__)])
        except ImportError:
            import _celestialTwoBodyPoint
            return _celestialTwoBodyPoint
        try:
            _mod = imp.load_module('_celestialTwoBodyPoint', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _celestialTwoBodyPoint = swig_import_helper()
    del swig_import_helper
else:
    import _celestialTwoBodyPoint
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _celestialTwoBodyPoint.new_doubleArray(nelements)
new_doubleArray = _celestialTwoBodyPoint.new_doubleArray

def delete_doubleArray(ary):
    return _celestialTwoBodyPoint.delete_doubleArray(ary)
delete_doubleArray = _celestialTwoBodyPoint.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _celestialTwoBodyPoint.doubleArray_getitem(ary, index)
doubleArray_getitem = _celestialTwoBodyPoint.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _celestialTwoBodyPoint.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _celestialTwoBodyPoint.doubleArray_setitem

def new_longArray(nelements):
    return _celestialTwoBodyPoint.new_longArray(nelements)
new_longArray = _celestialTwoBodyPoint.new_longArray

def delete_longArray(ary):
    return _celestialTwoBodyPoint.delete_longArray(ary)
delete_longArray = _celestialTwoBodyPoint.delete_longArray

def longArray_getitem(ary, index):
    return _celestialTwoBodyPoint.longArray_getitem(ary, index)
longArray_getitem = _celestialTwoBodyPoint.longArray_getitem

def longArray_setitem(ary, index, value):
    return _celestialTwoBodyPoint.longArray_setitem(ary, index, value)
longArray_setitem = _celestialTwoBodyPoint.longArray_setitem

def new_intArray(nelements):
    return _celestialTwoBodyPoint.new_intArray(nelements)
new_intArray = _celestialTwoBodyPoint.new_intArray

def delete_intArray(ary):
    return _celestialTwoBodyPoint.delete_intArray(ary)
delete_intArray = _celestialTwoBodyPoint.delete_intArray

def intArray_getitem(ary, index):
    return _celestialTwoBodyPoint.intArray_getitem(ary, index)
intArray_getitem = _celestialTwoBodyPoint.intArray_getitem

def intArray_setitem(ary, index, value):
    return _celestialTwoBodyPoint.intArray_setitem(ary, index, value)
intArray_setitem = _celestialTwoBodyPoint.intArray_setitem

def new_shortArray(nelements):
    return _celestialTwoBodyPoint.new_shortArray(nelements)
new_shortArray = _celestialTwoBodyPoint.new_shortArray

def delete_shortArray(ary):
    return _celestialTwoBodyPoint.delete_shortArray(ary)
delete_shortArray = _celestialTwoBodyPoint.delete_shortArray

def shortArray_getitem(ary, index):
    return _celestialTwoBodyPoint.shortArray_getitem(ary, index)
shortArray_getitem = _celestialTwoBodyPoint.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _celestialTwoBodyPoint.shortArray_setitem(ary, index, value)
shortArray_setitem = _celestialTwoBodyPoint.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_celestialTwoBodyPoint = _celestialTwoBodyPoint.Update_celestialTwoBodyPoint
SelfInit_celestialTwoBodyPoint = _celestialTwoBodyPoint.SelfInit_celestialTwoBodyPoint
CrossInit_celestialTwoBodyPoint = _celestialTwoBodyPoint.CrossInit_celestialTwoBodyPoint
Reset_celestialTwoBodyPoint = _celestialTwoBodyPoint.Reset_celestialTwoBodyPoint
class EphemerisIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemerisIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemerisIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BdyZero_N"] = _celestialTwoBodyPoint.EphemerisIntMsg_r_BdyZero_N_set
    __swig_getmethods__["r_BdyZero_N"] = _celestialTwoBodyPoint.EphemerisIntMsg_r_BdyZero_N_get
    if _newclass:
        r_BdyZero_N = _swig_property(_celestialTwoBodyPoint.EphemerisIntMsg_r_BdyZero_N_get, _celestialTwoBodyPoint.EphemerisIntMsg_r_BdyZero_N_set)
    __swig_setmethods__["v_BdyZero_N"] = _celestialTwoBodyPoint.EphemerisIntMsg_v_BdyZero_N_set
    __swig_getmethods__["v_BdyZero_N"] = _celestialTwoBodyPoint.EphemerisIntMsg_v_BdyZero_N_get
    if _newclass:
        v_BdyZero_N = _swig_property(_celestialTwoBodyPoint.EphemerisIntMsg_v_BdyZero_N_get, _celestialTwoBodyPoint.EphemerisIntMsg_v_BdyZero_N_set)
    __swig_setmethods__["timeTag"] = _celestialTwoBodyPoint.EphemerisIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _celestialTwoBodyPoint.EphemerisIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_celestialTwoBodyPoint.EphemerisIntMsg_timeTag_get, _celestialTwoBodyPoint.EphemerisIntMsg_timeTag_set)

    def __init__(self):
        this = _celestialTwoBodyPoint.new_EphemerisIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _celestialTwoBodyPoint.delete_EphemerisIntMsg
    __del__ = lambda self: None
EphemerisIntMsg_swigregister = _celestialTwoBodyPoint.EphemerisIntMsg_swigregister
EphemerisIntMsg_swigregister(EphemerisIntMsg)

class NavTransIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavTransIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavTransIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _celestialTwoBodyPoint.NavTransIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _celestialTwoBodyPoint.NavTransIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_celestialTwoBodyPoint.NavTransIntMsg_timeTag_get, _celestialTwoBodyPoint.NavTransIntMsg_timeTag_set)
    __swig_setmethods__["r_BN_N"] = _celestialTwoBodyPoint.NavTransIntMsg_r_BN_N_set
    __swig_getmethods__["r_BN_N"] = _celestialTwoBodyPoint.NavTransIntMsg_r_BN_N_get
    if _newclass:
        r_BN_N = _swig_property(_celestialTwoBodyPoint.NavTransIntMsg_r_BN_N_get, _celestialTwoBodyPoint.NavTransIntMsg_r_BN_N_set)
    __swig_setmethods__["v_BN_N"] = _celestialTwoBodyPoint.NavTransIntMsg_v_BN_N_set
    __swig_getmethods__["v_BN_N"] = _celestialTwoBodyPoint.NavTransIntMsg_v_BN_N_get
    if _newclass:
        v_BN_N = _swig_property(_celestialTwoBodyPoint.NavTransIntMsg_v_BN_N_get, _celestialTwoBodyPoint.NavTransIntMsg_v_BN_N_set)
    __swig_setmethods__["vehAccumDV"] = _celestialTwoBodyPoint.NavTransIntMsg_vehAccumDV_set
    __swig_getmethods__["vehAccumDV"] = _celestialTwoBodyPoint.NavTransIntMsg_vehAccumDV_get
    if _newclass:
        vehAccumDV = _swig_property(_celestialTwoBodyPoint.NavTransIntMsg_vehAccumDV_get, _celestialTwoBodyPoint.NavTransIntMsg_vehAccumDV_set)

    def __init__(self):
        this = _celestialTwoBodyPoint.new_NavTransIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _celestialTwoBodyPoint.delete_NavTransIntMsg
    __del__ = lambda self: None
NavTransIntMsg_swigregister = _celestialTwoBodyPoint.NavTransIntMsg_swigregister
NavTransIntMsg_swigregister(NavTransIntMsg)

class AttRefFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttRefFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttRefFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_RN"] = _celestialTwoBodyPoint.AttRefFswMsg_sigma_RN_set
    __swig_getmethods__["sigma_RN"] = _celestialTwoBodyPoint.AttRefFswMsg_sigma_RN_get
    if _newclass:
        sigma_RN = _swig_property(_celestialTwoBodyPoint.AttRefFswMsg_sigma_RN_get, _celestialTwoBodyPoint.AttRefFswMsg_sigma_RN_set)
    __swig_setmethods__["omega_RN_N"] = _celestialTwoBodyPoint.AttRefFswMsg_omega_RN_N_set
    __swig_getmethods__["omega_RN_N"] = _celestialTwoBodyPoint.AttRefFswMsg_omega_RN_N_get
    if _newclass:
        omega_RN_N = _swig_property(_celestialTwoBodyPoint.AttRefFswMsg_omega_RN_N_get, _celestialTwoBodyPoint.AttRefFswMsg_omega_RN_N_set)
    __swig_setmethods__["domega_RN_N"] = _celestialTwoBodyPoint.AttRefFswMsg_domega_RN_N_set
    __swig_getmethods__["domega_RN_N"] = _celestialTwoBodyPoint.AttRefFswMsg_domega_RN_N_get
    if _newclass:
        domega_RN_N = _swig_property(_celestialTwoBodyPoint.AttRefFswMsg_domega_RN_N_get, _celestialTwoBodyPoint.AttRefFswMsg_domega_RN_N_set)

    def __init__(self):
        this = _celestialTwoBodyPoint.new_AttRefFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _celestialTwoBodyPoint.delete_AttRefFswMsg
    __del__ = lambda self: None
AttRefFswMsg_swigregister = _celestialTwoBodyPoint.AttRefFswMsg_swigregister
AttRefFswMsg_swigregister(AttRefFswMsg)

sizeof_celestialTwoBodyPointConfig = _celestialTwoBodyPoint.sizeof_celestialTwoBodyPointConfig
sizeof_EphemerisIntMsg = _celestialTwoBodyPoint.sizeof_EphemerisIntMsg
sizeof_NavTransIntMsg = _celestialTwoBodyPoint.sizeof_NavTransIntMsg
sizeof_AttRefFswMsg = _celestialTwoBodyPoint.sizeof_AttRefFswMsg
class celestialTwoBodyPointConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, celestialTwoBodyPointConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, celestialTwoBodyPointConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["singularityThresh"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_singularityThresh_set
    __swig_getmethods__["singularityThresh"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_singularityThresh_get
    if _newclass:
        singularityThresh = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_singularityThresh_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_singularityThresh_set)
    __swig_setmethods__["R_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P1_set
    __swig_getmethods__["R_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P1_get
    if _newclass:
        R_P1 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P1_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P1_set)
    __swig_setmethods__["R_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P2_set
    __swig_getmethods__["R_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P2_get
    if _newclass:
        R_P2 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P2_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_R_P2_set)
    __swig_setmethods__["v_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P1_set
    __swig_getmethods__["v_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P1_get
    if _newclass:
        v_P1 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P1_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P1_set)
    __swig_setmethods__["v_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P2_set
    __swig_getmethods__["v_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P2_get
    if _newclass:
        v_P2 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P2_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_v_P2_set)
    __swig_setmethods__["a_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P1_set
    __swig_getmethods__["a_P1"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P1_get
    if _newclass:
        a_P1 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P1_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P1_set)
    __swig_setmethods__["a_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P2_set
    __swig_getmethods__["a_P2"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P2_get
    if _newclass:
        a_P2 = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P2_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_a_P2_set)
    __swig_setmethods__["outputDataName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputDataName_set
    __swig_getmethods__["outputDataName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputDataName_get
    if _newclass:
        outputDataName = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputDataName_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputDataName_set)
    __swig_setmethods__["inputNavDataName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavDataName_set
    __swig_getmethods__["inputNavDataName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavDataName_get
    if _newclass:
        inputNavDataName = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavDataName_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavDataName_set)
    __swig_setmethods__["inputCelMessName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelMessName_set
    __swig_getmethods__["inputCelMessName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelMessName_get
    if _newclass:
        inputCelMessName = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelMessName_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelMessName_set)
    __swig_setmethods__["inputSecMessName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecMessName_set
    __swig_getmethods__["inputSecMessName"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecMessName_get
    if _newclass:
        inputSecMessName = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecMessName_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecMessName_set)
    __swig_setmethods__["outputMsgID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputMsgID_set
    __swig_getmethods__["outputMsgID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputMsgID_get
    if _newclass:
        outputMsgID = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputMsgID_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_outputMsgID_set)
    __swig_setmethods__["inputNavID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavID_set
    __swig_getmethods__["inputNavID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavID_get
    if _newclass:
        inputNavID = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavID_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputNavID_set)
    __swig_setmethods__["inputCelID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelID_set
    __swig_getmethods__["inputCelID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelID_get
    if _newclass:
        inputCelID = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelID_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputCelID_set)
    __swig_setmethods__["inputSecID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecID_set
    __swig_getmethods__["inputSecID"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecID_get
    if _newclass:
        inputSecID = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecID_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_inputSecID_set)
    __swig_setmethods__["attRefOut"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_attRefOut_set
    __swig_getmethods__["attRefOut"] = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_attRefOut_get
    if _newclass:
        attRefOut = _swig_property(_celestialTwoBodyPoint.celestialTwoBodyPointConfig_attRefOut_get, _celestialTwoBodyPoint.celestialTwoBodyPointConfig_attRefOut_set)

    def __init__(self):
        this = _celestialTwoBodyPoint.new_celestialTwoBodyPointConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _celestialTwoBodyPoint.delete_celestialTwoBodyPointConfig
    __del__ = lambda self: None
celestialTwoBodyPointConfig_swigregister = _celestialTwoBodyPoint.celestialTwoBodyPointConfig_swigregister
celestialTwoBodyPointConfig_swigregister(celestialTwoBodyPointConfig)


def parseInputMessages(ConfigData, moduleID):
    return _celestialTwoBodyPoint.parseInputMessages(ConfigData, moduleID)
parseInputMessages = _celestialTwoBodyPoint.parseInputMessages

def computecelestialTwoBodyPoint(ConfigData, callTime):
    return _celestialTwoBodyPoint.computecelestialTwoBodyPoint(ConfigData, callTime)
computecelestialTwoBodyPoint = _celestialTwoBodyPoint.computecelestialTwoBodyPoint

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


