# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_thrForceMapping')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_thrForceMapping')
    _thrForceMapping = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_thrForceMapping', [dirname(__file__)])
        except ImportError:
            import _thrForceMapping
            return _thrForceMapping
        try:
            _mod = imp.load_module('_thrForceMapping', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _thrForceMapping = swig_import_helper()
    del swig_import_helper
else:
    import _thrForceMapping
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _thrForceMapping.new_doubleArray(nelements)
new_doubleArray = _thrForceMapping.new_doubleArray

def delete_doubleArray(ary):
    return _thrForceMapping.delete_doubleArray(ary)
delete_doubleArray = _thrForceMapping.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _thrForceMapping.doubleArray_getitem(ary, index)
doubleArray_getitem = _thrForceMapping.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _thrForceMapping.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _thrForceMapping.doubleArray_setitem

def new_longArray(nelements):
    return _thrForceMapping.new_longArray(nelements)
new_longArray = _thrForceMapping.new_longArray

def delete_longArray(ary):
    return _thrForceMapping.delete_longArray(ary)
delete_longArray = _thrForceMapping.delete_longArray

def longArray_getitem(ary, index):
    return _thrForceMapping.longArray_getitem(ary, index)
longArray_getitem = _thrForceMapping.longArray_getitem

def longArray_setitem(ary, index, value):
    return _thrForceMapping.longArray_setitem(ary, index, value)
longArray_setitem = _thrForceMapping.longArray_setitem

def new_intArray(nelements):
    return _thrForceMapping.new_intArray(nelements)
new_intArray = _thrForceMapping.new_intArray

def delete_intArray(ary):
    return _thrForceMapping.delete_intArray(ary)
delete_intArray = _thrForceMapping.delete_intArray

def intArray_getitem(ary, index):
    return _thrForceMapping.intArray_getitem(ary, index)
intArray_getitem = _thrForceMapping.intArray_getitem

def intArray_setitem(ary, index, value):
    return _thrForceMapping.intArray_setitem(ary, index, value)
intArray_setitem = _thrForceMapping.intArray_setitem

def new_shortArray(nelements):
    return _thrForceMapping.new_shortArray(nelements)
new_shortArray = _thrForceMapping.new_shortArray

def delete_shortArray(ary):
    return _thrForceMapping.delete_shortArray(ary)
delete_shortArray = _thrForceMapping.delete_shortArray

def shortArray_getitem(ary, index):
    return _thrForceMapping.shortArray_getitem(ary, index)
shortArray_getitem = _thrForceMapping.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _thrForceMapping.shortArray_setitem(ary, index, value)
shortArray_setitem = _thrForceMapping.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_thrForceMapping = _thrForceMapping.Update_thrForceMapping
SelfInit_thrForceMapping = _thrForceMapping.SelfInit_thrForceMapping
CrossInit_thrForceMapping = _thrForceMapping.CrossInit_thrForceMapping
Reset_thrForceMapping = _thrForceMapping.Reset_thrForceMapping
class thrForceMappingConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thrForceMappingConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thrForceMappingConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["controlAxes_B"] = _thrForceMapping.thrForceMappingConfig_controlAxes_B_set
    __swig_getmethods__["controlAxes_B"] = _thrForceMapping.thrForceMappingConfig_controlAxes_B_get
    if _newclass:
        controlAxes_B = _swig_property(_thrForceMapping.thrForceMappingConfig_controlAxes_B_get, _thrForceMapping.thrForceMappingConfig_controlAxes_B_set)
    __swig_setmethods__["rThruster_B"] = _thrForceMapping.thrForceMappingConfig_rThruster_B_set
    __swig_getmethods__["rThruster_B"] = _thrForceMapping.thrForceMappingConfig_rThruster_B_get
    if _newclass:
        rThruster_B = _swig_property(_thrForceMapping.thrForceMappingConfig_rThruster_B_get, _thrForceMapping.thrForceMappingConfig_rThruster_B_set)
    __swig_setmethods__["gtThruster_B"] = _thrForceMapping.thrForceMappingConfig_gtThruster_B_set
    __swig_getmethods__["gtThruster_B"] = _thrForceMapping.thrForceMappingConfig_gtThruster_B_get
    if _newclass:
        gtThruster_B = _swig_property(_thrForceMapping.thrForceMappingConfig_gtThruster_B_get, _thrForceMapping.thrForceMappingConfig_gtThruster_B_set)
    __swig_setmethods__["numOfAxesToBeControlled"] = _thrForceMapping.thrForceMappingConfig_numOfAxesToBeControlled_set
    __swig_getmethods__["numOfAxesToBeControlled"] = _thrForceMapping.thrForceMappingConfig_numOfAxesToBeControlled_get
    if _newclass:
        numOfAxesToBeControlled = _swig_property(_thrForceMapping.thrForceMappingConfig_numOfAxesToBeControlled_get, _thrForceMapping.thrForceMappingConfig_numOfAxesToBeControlled_set)
    __swig_setmethods__["numThrusters"] = _thrForceMapping.thrForceMappingConfig_numThrusters_set
    __swig_getmethods__["numThrusters"] = _thrForceMapping.thrForceMappingConfig_numThrusters_get
    if _newclass:
        numThrusters = _swig_property(_thrForceMapping.thrForceMappingConfig_numThrusters_get, _thrForceMapping.thrForceMappingConfig_numThrusters_set)
    __swig_setmethods__["thrForceSign"] = _thrForceMapping.thrForceMappingConfig_thrForceSign_set
    __swig_getmethods__["thrForceSign"] = _thrForceMapping.thrForceMappingConfig_thrForceSign_get
    if _newclass:
        thrForceSign = _swig_property(_thrForceMapping.thrForceMappingConfig_thrForceSign_get, _thrForceMapping.thrForceMappingConfig_thrForceSign_set)
    __swig_setmethods__["thrForcMag"] = _thrForceMapping.thrForceMappingConfig_thrForcMag_set
    __swig_getmethods__["thrForcMag"] = _thrForceMapping.thrForceMappingConfig_thrForcMag_get
    if _newclass:
        thrForcMag = _swig_property(_thrForceMapping.thrForceMappingConfig_thrForcMag_get, _thrForceMapping.thrForceMappingConfig_thrForcMag_set)
    __swig_setmethods__["outputDataName"] = _thrForceMapping.thrForceMappingConfig_outputDataName_set
    __swig_getmethods__["outputDataName"] = _thrForceMapping.thrForceMappingConfig_outputDataName_get
    if _newclass:
        outputDataName = _swig_property(_thrForceMapping.thrForceMappingConfig_outputDataName_get, _thrForceMapping.thrForceMappingConfig_outputDataName_set)
    __swig_setmethods__["outputMsgID"] = _thrForceMapping.thrForceMappingConfig_outputMsgID_set
    __swig_getmethods__["outputMsgID"] = _thrForceMapping.thrForceMappingConfig_outputMsgID_get
    if _newclass:
        outputMsgID = _swig_property(_thrForceMapping.thrForceMappingConfig_outputMsgID_get, _thrForceMapping.thrForceMappingConfig_outputMsgID_set)
    __swig_setmethods__["inputVehControlName"] = _thrForceMapping.thrForceMappingConfig_inputVehControlName_set
    __swig_getmethods__["inputVehControlName"] = _thrForceMapping.thrForceMappingConfig_inputVehControlName_get
    if _newclass:
        inputVehControlName = _swig_property(_thrForceMapping.thrForceMappingConfig_inputVehControlName_get, _thrForceMapping.thrForceMappingConfig_inputVehControlName_set)
    __swig_setmethods__["inputVehControlID"] = _thrForceMapping.thrForceMappingConfig_inputVehControlID_set
    __swig_getmethods__["inputVehControlID"] = _thrForceMapping.thrForceMappingConfig_inputVehControlID_get
    if _newclass:
        inputVehControlID = _swig_property(_thrForceMapping.thrForceMappingConfig_inputVehControlID_get, _thrForceMapping.thrForceMappingConfig_inputVehControlID_set)
    __swig_setmethods__["inputThrusterConfName"] = _thrForceMapping.thrForceMappingConfig_inputThrusterConfName_set
    __swig_getmethods__["inputThrusterConfName"] = _thrForceMapping.thrForceMappingConfig_inputThrusterConfName_get
    if _newclass:
        inputThrusterConfName = _swig_property(_thrForceMapping.thrForceMappingConfig_inputThrusterConfName_get, _thrForceMapping.thrForceMappingConfig_inputThrusterConfName_set)
    __swig_setmethods__["inputThrusterConfID"] = _thrForceMapping.thrForceMappingConfig_inputThrusterConfID_set
    __swig_getmethods__["inputThrusterConfID"] = _thrForceMapping.thrForceMappingConfig_inputThrusterConfID_get
    if _newclass:
        inputThrusterConfID = _swig_property(_thrForceMapping.thrForceMappingConfig_inputThrusterConfID_get, _thrForceMapping.thrForceMappingConfig_inputThrusterConfID_set)
    __swig_setmethods__["inputVehicleConfigDataName"] = _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataName_set
    __swig_getmethods__["inputVehicleConfigDataName"] = _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataName_get
    if _newclass:
        inputVehicleConfigDataName = _swig_property(_thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataName_get, _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataName_set)
    __swig_setmethods__["inputVehicleConfigDataID"] = _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataID_set
    __swig_getmethods__["inputVehicleConfigDataID"] = _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataID_get
    if _newclass:
        inputVehicleConfigDataID = _swig_property(_thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataID_get, _thrForceMapping.thrForceMappingConfig_inputVehicleConfigDataID_set)
    __swig_setmethods__["sc"] = _thrForceMapping.thrForceMappingConfig_sc_set
    __swig_getmethods__["sc"] = _thrForceMapping.thrForceMappingConfig_sc_get
    if _newclass:
        sc = _swig_property(_thrForceMapping.thrForceMappingConfig_sc_get, _thrForceMapping.thrForceMappingConfig_sc_set)
    __swig_setmethods__["epsilon"] = _thrForceMapping.thrForceMappingConfig_epsilon_set
    __swig_getmethods__["epsilon"] = _thrForceMapping.thrForceMappingConfig_epsilon_get
    if _newclass:
        epsilon = _swig_property(_thrForceMapping.thrForceMappingConfig_epsilon_get, _thrForceMapping.thrForceMappingConfig_epsilon_set)
    __swig_setmethods__["thrusterForceOut"] = _thrForceMapping.thrForceMappingConfig_thrusterForceOut_set
    __swig_getmethods__["thrusterForceOut"] = _thrForceMapping.thrForceMappingConfig_thrusterForceOut_get
    if _newclass:
        thrusterForceOut = _swig_property(_thrForceMapping.thrForceMappingConfig_thrusterForceOut_get, _thrForceMapping.thrForceMappingConfig_thrusterForceOut_set)

    def __init__(self):
        this = _thrForceMapping.new_thrForceMappingConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrForceMapping.delete_thrForceMappingConfig
    __del__ = lambda self: None
thrForceMappingConfig_swigregister = _thrForceMapping.thrForceMappingConfig_swigregister
thrForceMappingConfig_swigregister(thrForceMappingConfig)


def substractMin(F, size):
    return _thrForceMapping.substractMin(F, size)
substractMin = _thrForceMapping.substractMin

def findMinimumNormForce(ConfigData, D, Lr_B, numForces, F):
    return _thrForceMapping.findMinimumNormForce(ConfigData, D, Lr_B, numForces, F)
findMinimumNormForce = _thrForceMapping.findMinimumNormForce
sizeof_thrForceMappingConfig = _thrForceMapping.sizeof_thrForceMappingConfig
class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _thrForceMapping.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _thrForceMapping.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_thrForceMapping.VehicleConfigFswMsg_ISCPntB_B_get, _thrForceMapping.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _thrForceMapping.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _thrForceMapping.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_thrForceMapping.VehicleConfigFswMsg_CoM_B_get, _thrForceMapping.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _thrForceMapping.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _thrForceMapping.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_thrForceMapping.VehicleConfigFswMsg_CurrentADCSState_get, _thrForceMapping.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _thrForceMapping.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrForceMapping.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _thrForceMapping.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

sizeof_VehicleConfigFswMsg = _thrForceMapping.sizeof_VehicleConfigFswMsg
class THRArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numThrusters"] = _thrForceMapping.THRArrayConfigFswMsg_numThrusters_set
    __swig_getmethods__["numThrusters"] = _thrForceMapping.THRArrayConfigFswMsg_numThrusters_get
    if _newclass:
        numThrusters = _swig_property(_thrForceMapping.THRArrayConfigFswMsg_numThrusters_get, _thrForceMapping.THRArrayConfigFswMsg_numThrusters_set)
    __swig_setmethods__["thrusters"] = _thrForceMapping.THRArrayConfigFswMsg_thrusters_set
    __swig_getmethods__["thrusters"] = _thrForceMapping.THRArrayConfigFswMsg_thrusters_get
    if _newclass:
        thrusters = _swig_property(_thrForceMapping.THRArrayConfigFswMsg_thrusters_get, _thrForceMapping.THRArrayConfigFswMsg_thrusters_set)

    def __init__(self):
        this = _thrForceMapping.new_THRArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrForceMapping.delete_THRArrayConfigFswMsg
    __del__ = lambda self: None
THRArrayConfigFswMsg_swigregister = _thrForceMapping.THRArrayConfigFswMsg_swigregister
THRArrayConfigFswMsg_swigregister(THRArrayConfigFswMsg)

sizeof_THRArrayConfigFswMsg = _thrForceMapping.sizeof_THRArrayConfigFswMsg
class THRArrayCmdForceFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayCmdForceFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayCmdForceFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thrForce"] = _thrForceMapping.THRArrayCmdForceFswMsg_thrForce_set
    __swig_getmethods__["thrForce"] = _thrForceMapping.THRArrayCmdForceFswMsg_thrForce_get
    if _newclass:
        thrForce = _swig_property(_thrForceMapping.THRArrayCmdForceFswMsg_thrForce_get, _thrForceMapping.THRArrayCmdForceFswMsg_thrForce_set)

    def __init__(self):
        this = _thrForceMapping.new_THRArrayCmdForceFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrForceMapping.delete_THRArrayCmdForceFswMsg
    __del__ = lambda self: None
THRArrayCmdForceFswMsg_swigregister = _thrForceMapping.THRArrayCmdForceFswMsg_swigregister
THRArrayCmdForceFswMsg_swigregister(THRArrayCmdForceFswMsg)

class CmdTorqueBodyIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdTorqueBodyIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdTorqueBodyIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["torqueRequestBody"] = _thrForceMapping.CmdTorqueBodyIntMsg_torqueRequestBody_set
    __swig_getmethods__["torqueRequestBody"] = _thrForceMapping.CmdTorqueBodyIntMsg_torqueRequestBody_get
    if _newclass:
        torqueRequestBody = _swig_property(_thrForceMapping.CmdTorqueBodyIntMsg_torqueRequestBody_get, _thrForceMapping.CmdTorqueBodyIntMsg_torqueRequestBody_set)

    def __init__(self):
        this = _thrForceMapping.new_CmdTorqueBodyIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrForceMapping.delete_CmdTorqueBodyIntMsg
    __del__ = lambda self: None
CmdTorqueBodyIntMsg_swigregister = _thrForceMapping.CmdTorqueBodyIntMsg_swigregister
CmdTorqueBodyIntMsg_swigregister(CmdTorqueBodyIntMsg)

sizeof_CmdTorqueBodyIntMsg = _thrForceMapping.sizeof_CmdTorqueBodyIntMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


