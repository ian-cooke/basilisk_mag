# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cheby_pos_ephem')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cheby_pos_ephem')
    _cheby_pos_ephem = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cheby_pos_ephem', [dirname(__file__)])
        except ImportError:
            import _cheby_pos_ephem
            return _cheby_pos_ephem
        try:
            _mod = imp.load_module('_cheby_pos_ephem', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cheby_pos_ephem = swig_import_helper()
    del swig_import_helper
else:
    import _cheby_pos_ephem
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _cheby_pos_ephem.new_doubleArray(nelements)
new_doubleArray = _cheby_pos_ephem.new_doubleArray

def delete_doubleArray(ary):
    return _cheby_pos_ephem.delete_doubleArray(ary)
delete_doubleArray = _cheby_pos_ephem.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _cheby_pos_ephem.doubleArray_getitem(ary, index)
doubleArray_getitem = _cheby_pos_ephem.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _cheby_pos_ephem.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _cheby_pos_ephem.doubleArray_setitem

def new_longArray(nelements):
    return _cheby_pos_ephem.new_longArray(nelements)
new_longArray = _cheby_pos_ephem.new_longArray

def delete_longArray(ary):
    return _cheby_pos_ephem.delete_longArray(ary)
delete_longArray = _cheby_pos_ephem.delete_longArray

def longArray_getitem(ary, index):
    return _cheby_pos_ephem.longArray_getitem(ary, index)
longArray_getitem = _cheby_pos_ephem.longArray_getitem

def longArray_setitem(ary, index, value):
    return _cheby_pos_ephem.longArray_setitem(ary, index, value)
longArray_setitem = _cheby_pos_ephem.longArray_setitem

def new_intArray(nelements):
    return _cheby_pos_ephem.new_intArray(nelements)
new_intArray = _cheby_pos_ephem.new_intArray

def delete_intArray(ary):
    return _cheby_pos_ephem.delete_intArray(ary)
delete_intArray = _cheby_pos_ephem.delete_intArray

def intArray_getitem(ary, index):
    return _cheby_pos_ephem.intArray_getitem(ary, index)
intArray_getitem = _cheby_pos_ephem.intArray_getitem

def intArray_setitem(ary, index, value):
    return _cheby_pos_ephem.intArray_setitem(ary, index, value)
intArray_setitem = _cheby_pos_ephem.intArray_setitem

def new_shortArray(nelements):
    return _cheby_pos_ephem.new_shortArray(nelements)
new_shortArray = _cheby_pos_ephem.new_shortArray

def delete_shortArray(ary):
    return _cheby_pos_ephem.delete_shortArray(ary)
delete_shortArray = _cheby_pos_ephem.delete_shortArray

def shortArray_getitem(ary, index):
    return _cheby_pos_ephem.shortArray_getitem(ary, index)
shortArray_getitem = _cheby_pos_ephem.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _cheby_pos_ephem.shortArray_setitem(ary, index, value)
shortArray_setitem = _cheby_pos_ephem.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_chebyPosEphem = _cheby_pos_ephem.Update_chebyPosEphem
SelfInit_chebyPosEphem = _cheby_pos_ephem.SelfInit_chebyPosEphem
CrossInit_chebyPosEphem = _cheby_pos_ephem.CrossInit_chebyPosEphem
Reset_chebyPosEphem = _cheby_pos_ephem.Reset_chebyPosEphem
MAX_CHEB_COEFF = _cheby_pos_ephem.MAX_CHEB_COEFF
MAX_CHEB_RECORDS = _cheby_pos_ephem.MAX_CHEB_RECORDS
class ChebyEphemRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyEphemRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyEphemRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nChebCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_nChebCoeff_set
    __swig_getmethods__["nChebCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_nChebCoeff_get
    if _newclass:
        nChebCoeff = _swig_property(_cheby_pos_ephem.ChebyEphemRecord_nChebCoeff_get, _cheby_pos_ephem.ChebyEphemRecord_nChebCoeff_set)
    __swig_setmethods__["ephemTimeMid"] = _cheby_pos_ephem.ChebyEphemRecord_ephemTimeMid_set
    __swig_getmethods__["ephemTimeMid"] = _cheby_pos_ephem.ChebyEphemRecord_ephemTimeMid_get
    if _newclass:
        ephemTimeMid = _swig_property(_cheby_pos_ephem.ChebyEphemRecord_ephemTimeMid_get, _cheby_pos_ephem.ChebyEphemRecord_ephemTimeMid_set)
    __swig_setmethods__["ephemTimeRad"] = _cheby_pos_ephem.ChebyEphemRecord_ephemTimeRad_set
    __swig_getmethods__["ephemTimeRad"] = _cheby_pos_ephem.ChebyEphemRecord_ephemTimeRad_get
    if _newclass:
        ephemTimeRad = _swig_property(_cheby_pos_ephem.ChebyEphemRecord_ephemTimeRad_get, _cheby_pos_ephem.ChebyEphemRecord_ephemTimeRad_set)
    __swig_setmethods__["posChebyCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_posChebyCoeff_set
    __swig_getmethods__["posChebyCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_posChebyCoeff_get
    if _newclass:
        posChebyCoeff = _swig_property(_cheby_pos_ephem.ChebyEphemRecord_posChebyCoeff_get, _cheby_pos_ephem.ChebyEphemRecord_posChebyCoeff_set)
    __swig_setmethods__["velChebyCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_velChebyCoeff_set
    __swig_getmethods__["velChebyCoeff"] = _cheby_pos_ephem.ChebyEphemRecord_velChebyCoeff_get
    if _newclass:
        velChebyCoeff = _swig_property(_cheby_pos_ephem.ChebyEphemRecord_velChebyCoeff_get, _cheby_pos_ephem.ChebyEphemRecord_velChebyCoeff_set)

    def __init__(self):
        this = _cheby_pos_ephem.new_ChebyEphemRecord()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cheby_pos_ephem.delete_ChebyEphemRecord
    __del__ = lambda self: None
ChebyEphemRecord_swigregister = _cheby_pos_ephem.ChebyEphemRecord_swigregister
ChebyEphemRecord_swigregister(ChebyEphemRecord)

class ChebyPosEphemData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyPosEphemData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyPosEphemData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["posFitOutMsgName"] = _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgName_set
    __swig_getmethods__["posFitOutMsgName"] = _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgName_get
    if _newclass:
        posFitOutMsgName = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgName_get, _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgName_set)
    __swig_setmethods__["clockCorrInMsgName"] = _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgName_set
    __swig_getmethods__["clockCorrInMsgName"] = _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgName_get
    if _newclass:
        clockCorrInMsgName = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgName_get, _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgName_set)
    __swig_setmethods__["ephArray"] = _cheby_pos_ephem.ChebyPosEphemData_ephArray_set
    __swig_getmethods__["ephArray"] = _cheby_pos_ephem.ChebyPosEphemData_ephArray_get
    if _newclass:
        ephArray = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_ephArray_get, _cheby_pos_ephem.ChebyPosEphemData_ephArray_set)
    __swig_setmethods__["posFitOutMsgID"] = _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgID_set
    __swig_getmethods__["posFitOutMsgID"] = _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgID_get
    if _newclass:
        posFitOutMsgID = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgID_get, _cheby_pos_ephem.ChebyPosEphemData_posFitOutMsgID_set)
    __swig_setmethods__["clockCorrInMsgID"] = _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgID_set
    __swig_getmethods__["clockCorrInMsgID"] = _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgID_get
    if _newclass:
        clockCorrInMsgID = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgID_get, _cheby_pos_ephem.ChebyPosEphemData_clockCorrInMsgID_set)
    __swig_setmethods__["coeffSelector"] = _cheby_pos_ephem.ChebyPosEphemData_coeffSelector_set
    __swig_getmethods__["coeffSelector"] = _cheby_pos_ephem.ChebyPosEphemData_coeffSelector_get
    if _newclass:
        coeffSelector = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_coeffSelector_get, _cheby_pos_ephem.ChebyPosEphemData_coeffSelector_set)
    __swig_setmethods__["outputState"] = _cheby_pos_ephem.ChebyPosEphemData_outputState_set
    __swig_getmethods__["outputState"] = _cheby_pos_ephem.ChebyPosEphemData_outputState_get
    if _newclass:
        outputState = _swig_property(_cheby_pos_ephem.ChebyPosEphemData_outputState_get, _cheby_pos_ephem.ChebyPosEphemData_outputState_set)

    def __init__(self):
        this = _cheby_pos_ephem.new_ChebyPosEphemData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cheby_pos_ephem.delete_ChebyPosEphemData
    __del__ = lambda self: None
ChebyPosEphemData_swigregister = _cheby_pos_ephem.ChebyPosEphemData_swigregister
ChebyPosEphemData_swigregister(ChebyPosEphemData)

class EphemerisIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemerisIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemerisIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BdyZero_N"] = _cheby_pos_ephem.EphemerisIntMsg_r_BdyZero_N_set
    __swig_getmethods__["r_BdyZero_N"] = _cheby_pos_ephem.EphemerisIntMsg_r_BdyZero_N_get
    if _newclass:
        r_BdyZero_N = _swig_property(_cheby_pos_ephem.EphemerisIntMsg_r_BdyZero_N_get, _cheby_pos_ephem.EphemerisIntMsg_r_BdyZero_N_set)
    __swig_setmethods__["v_BdyZero_N"] = _cheby_pos_ephem.EphemerisIntMsg_v_BdyZero_N_set
    __swig_getmethods__["v_BdyZero_N"] = _cheby_pos_ephem.EphemerisIntMsg_v_BdyZero_N_get
    if _newclass:
        v_BdyZero_N = _swig_property(_cheby_pos_ephem.EphemerisIntMsg_v_BdyZero_N_get, _cheby_pos_ephem.EphemerisIntMsg_v_BdyZero_N_set)
    __swig_setmethods__["timeTag"] = _cheby_pos_ephem.EphemerisIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _cheby_pos_ephem.EphemerisIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_cheby_pos_ephem.EphemerisIntMsg_timeTag_get, _cheby_pos_ephem.EphemerisIntMsg_timeTag_set)

    def __init__(self):
        this = _cheby_pos_ephem.new_EphemerisIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cheby_pos_ephem.delete_EphemerisIntMsg
    __del__ = lambda self: None
EphemerisIntMsg_swigregister = _cheby_pos_ephem.EphemerisIntMsg_swigregister
EphemerisIntMsg_swigregister(EphemerisIntMsg)

class TDBVehicleClockCorrelationFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDBVehicleClockCorrelationFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDBVehicleClockCorrelationFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ephemerisTime"] = _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_ephemerisTime_set
    __swig_getmethods__["ephemerisTime"] = _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_ephemerisTime_get
    if _newclass:
        ephemerisTime = _swig_property(_cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_ephemerisTime_get, _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_ephemerisTime_set)
    __swig_setmethods__["vehicleClockTime"] = _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_set
    __swig_getmethods__["vehicleClockTime"] = _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_get
    if _newclass:
        vehicleClockTime = _swig_property(_cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_get, _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_set)

    def __init__(self):
        this = _cheby_pos_ephem.new_TDBVehicleClockCorrelationFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cheby_pos_ephem.delete_TDBVehicleClockCorrelationFswMsg
    __del__ = lambda self: None
TDBVehicleClockCorrelationFswMsg_swigregister = _cheby_pos_ephem.TDBVehicleClockCorrelationFswMsg_swigregister
TDBVehicleClockCorrelationFswMsg_swigregister(TDBVehicleClockCorrelationFswMsg)

sizeof_TDBVehicleClockCorrelationFswMsg = _cheby_pos_ephem.sizeof_TDBVehicleClockCorrelationFswMsg
sizeof_EphemerisIntMsg = _cheby_pos_ephem.sizeof_EphemerisIntMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


