# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rwMotorVoltage')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rwMotorVoltage')
    _rwMotorVoltage = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rwMotorVoltage', [dirname(__file__)])
        except ImportError:
            import _rwMotorVoltage
            return _rwMotorVoltage
        try:
            _mod = imp.load_module('_rwMotorVoltage', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rwMotorVoltage = swig_import_helper()
    del swig_import_helper
else:
    import _rwMotorVoltage
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _rwMotorVoltage.new_doubleArray(nelements)
new_doubleArray = _rwMotorVoltage.new_doubleArray

def delete_doubleArray(ary):
    return _rwMotorVoltage.delete_doubleArray(ary)
delete_doubleArray = _rwMotorVoltage.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _rwMotorVoltage.doubleArray_getitem(ary, index)
doubleArray_getitem = _rwMotorVoltage.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _rwMotorVoltage.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _rwMotorVoltage.doubleArray_setitem

def new_longArray(nelements):
    return _rwMotorVoltage.new_longArray(nelements)
new_longArray = _rwMotorVoltage.new_longArray

def delete_longArray(ary):
    return _rwMotorVoltage.delete_longArray(ary)
delete_longArray = _rwMotorVoltage.delete_longArray

def longArray_getitem(ary, index):
    return _rwMotorVoltage.longArray_getitem(ary, index)
longArray_getitem = _rwMotorVoltage.longArray_getitem

def longArray_setitem(ary, index, value):
    return _rwMotorVoltage.longArray_setitem(ary, index, value)
longArray_setitem = _rwMotorVoltage.longArray_setitem

def new_intArray(nelements):
    return _rwMotorVoltage.new_intArray(nelements)
new_intArray = _rwMotorVoltage.new_intArray

def delete_intArray(ary):
    return _rwMotorVoltage.delete_intArray(ary)
delete_intArray = _rwMotorVoltage.delete_intArray

def intArray_getitem(ary, index):
    return _rwMotorVoltage.intArray_getitem(ary, index)
intArray_getitem = _rwMotorVoltage.intArray_getitem

def intArray_setitem(ary, index, value):
    return _rwMotorVoltage.intArray_setitem(ary, index, value)
intArray_setitem = _rwMotorVoltage.intArray_setitem

def new_shortArray(nelements):
    return _rwMotorVoltage.new_shortArray(nelements)
new_shortArray = _rwMotorVoltage.new_shortArray

def delete_shortArray(ary):
    return _rwMotorVoltage.delete_shortArray(ary)
delete_shortArray = _rwMotorVoltage.delete_shortArray

def shortArray_getitem(ary, index):
    return _rwMotorVoltage.shortArray_getitem(ary, index)
shortArray_getitem = _rwMotorVoltage.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _rwMotorVoltage.shortArray_setitem(ary, index, value)
shortArray_setitem = _rwMotorVoltage.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


Update_rwMotorVoltage = _rwMotorVoltage.Update_rwMotorVoltage
SelfInit_rwMotorVoltage = _rwMotorVoltage.SelfInit_rwMotorVoltage
CrossInit_rwMotorVoltage = _rwMotorVoltage.CrossInit_rwMotorVoltage
Reset_rwMotorVoltage = _rwMotorVoltage.Reset_rwMotorVoltage
sizeof_rwMotorVoltageConfig = _rwMotorVoltage.sizeof_rwMotorVoltageConfig
sizeof_RWArrayTorqueIntMsg = _rwMotorVoltage.sizeof_RWArrayTorqueIntMsg
sizeof_RWAvailabilityFswMsg = _rwMotorVoltage.sizeof_RWAvailabilityFswMsg
sizeof_RWSpeedIntMsg = _rwMotorVoltage.sizeof_RWSpeedIntMsg
sizeof_RWArrayConfigFswMsg = _rwMotorVoltage.sizeof_RWArrayConfigFswMsg
class rwMotorVoltageConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rwMotorVoltageConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rwMotorVoltageConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VMin"] = _rwMotorVoltage.rwMotorVoltageConfig_VMin_set
    __swig_getmethods__["VMin"] = _rwMotorVoltage.rwMotorVoltageConfig_VMin_get
    if _newclass:
        VMin = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_VMin_get, _rwMotorVoltage.rwMotorVoltageConfig_VMin_set)
    __swig_setmethods__["VMax"] = _rwMotorVoltage.rwMotorVoltageConfig_VMax_set
    __swig_getmethods__["VMax"] = _rwMotorVoltage.rwMotorVoltageConfig_VMax_get
    if _newclass:
        VMax = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_VMax_get, _rwMotorVoltage.rwMotorVoltageConfig_VMax_set)
    __swig_setmethods__["K"] = _rwMotorVoltage.rwMotorVoltageConfig_K_set
    __swig_getmethods__["K"] = _rwMotorVoltage.rwMotorVoltageConfig_K_get
    if _newclass:
        K = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_K_get, _rwMotorVoltage.rwMotorVoltageConfig_K_set)
    __swig_setmethods__["rwSpeedOld"] = _rwMotorVoltage.rwMotorVoltageConfig_rwSpeedOld_set
    __swig_getmethods__["rwSpeedOld"] = _rwMotorVoltage.rwMotorVoltageConfig_rwSpeedOld_get
    if _newclass:
        rwSpeedOld = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwSpeedOld_get, _rwMotorVoltage.rwMotorVoltageConfig_rwSpeedOld_set)
    __swig_setmethods__["priorTime"] = _rwMotorVoltage.rwMotorVoltageConfig_priorTime_set
    __swig_getmethods__["priorTime"] = _rwMotorVoltage.rwMotorVoltageConfig_priorTime_get
    if _newclass:
        priorTime = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_priorTime_get, _rwMotorVoltage.rwMotorVoltageConfig_priorTime_set)
    __swig_setmethods__["resetFlag"] = _rwMotorVoltage.rwMotorVoltageConfig_resetFlag_set
    __swig_getmethods__["resetFlag"] = _rwMotorVoltage.rwMotorVoltageConfig_resetFlag_get
    if _newclass:
        resetFlag = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_resetFlag_get, _rwMotorVoltage.rwMotorVoltageConfig_resetFlag_set)
    __swig_setmethods__["voltageOutMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgName_set
    __swig_getmethods__["voltageOutMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgName_get
    if _newclass:
        voltageOutMsgName = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgName_get, _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgName_set)
    __swig_setmethods__["voltageOutMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgID_set
    __swig_getmethods__["voltageOutMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgID_get
    if _newclass:
        voltageOutMsgID = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgID_get, _rwMotorVoltage.rwMotorVoltageConfig_voltageOutMsgID_set)
    __swig_setmethods__["torqueInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgName_set
    __swig_getmethods__["torqueInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgName_get
    if _newclass:
        torqueInMsgName = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgName_get, _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgName_set)
    __swig_setmethods__["torqueInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgID_set
    __swig_getmethods__["torqueInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgID_get
    if _newclass:
        torqueInMsgID = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgID_get, _rwMotorVoltage.rwMotorVoltageConfig_torqueInMsgID_set)
    __swig_setmethods__["rwParamsInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgName_set
    __swig_getmethods__["rwParamsInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgName_get
    if _newclass:
        rwParamsInMsgName = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgName_get, _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgName_set)
    __swig_setmethods__["rwParamsInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgID_set
    __swig_getmethods__["rwParamsInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgID_get
    if _newclass:
        rwParamsInMsgID = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgID_get, _rwMotorVoltage.rwMotorVoltageConfig_rwParamsInMsgID_set)
    __swig_setmethods__["inputRWSpeedsInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgName_set
    __swig_getmethods__["inputRWSpeedsInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgName_get
    if _newclass:
        inputRWSpeedsInMsgName = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgName_get, _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgName_set)
    __swig_setmethods__["inputRWSpeedsInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgID_set
    __swig_getmethods__["inputRWSpeedsInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgID_get
    if _newclass:
        inputRWSpeedsInMsgID = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgID_get, _rwMotorVoltage.rwMotorVoltageConfig_inputRWSpeedsInMsgID_set)
    __swig_setmethods__["rwAvailInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgName_set
    __swig_getmethods__["rwAvailInMsgName"] = _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgName_get
    if _newclass:
        rwAvailInMsgName = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgName_get, _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgName_set)
    __swig_setmethods__["rwAvailInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgID_set
    __swig_getmethods__["rwAvailInMsgID"] = _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgID_get
    if _newclass:
        rwAvailInMsgID = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgID_get, _rwMotorVoltage.rwMotorVoltageConfig_rwAvailInMsgID_set)
    __swig_setmethods__["rwConfigParams"] = _rwMotorVoltage.rwMotorVoltageConfig_rwConfigParams_set
    __swig_getmethods__["rwConfigParams"] = _rwMotorVoltage.rwMotorVoltageConfig_rwConfigParams_get
    if _newclass:
        rwConfigParams = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_rwConfigParams_get, _rwMotorVoltage.rwMotorVoltageConfig_rwConfigParams_set)
    __swig_setmethods__["voltageOut"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOut_set
    __swig_getmethods__["voltageOut"] = _rwMotorVoltage.rwMotorVoltageConfig_voltageOut_get
    if _newclass:
        voltageOut = _swig_property(_rwMotorVoltage.rwMotorVoltageConfig_voltageOut_get, _rwMotorVoltage.rwMotorVoltageConfig_voltageOut_set)

    def __init__(self):
        this = _rwMotorVoltage.new_rwMotorVoltageConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_rwMotorVoltageConfig
    __del__ = lambda self: None
rwMotorVoltageConfig_swigregister = _rwMotorVoltage.rwMotorVoltageConfig_swigregister
rwMotorVoltageConfig_swigregister(rwMotorVoltageConfig)

class RWSpeedIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWSpeedIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWSpeedIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelSpeeds"] = _rwMotorVoltage.RWSpeedIntMsg_wheelSpeeds_set
    __swig_getmethods__["wheelSpeeds"] = _rwMotorVoltage.RWSpeedIntMsg_wheelSpeeds_get
    if _newclass:
        wheelSpeeds = _swig_property(_rwMotorVoltage.RWSpeedIntMsg_wheelSpeeds_get, _rwMotorVoltage.RWSpeedIntMsg_wheelSpeeds_set)
    __swig_setmethods__["wheelThetas"] = _rwMotorVoltage.RWSpeedIntMsg_wheelThetas_set
    __swig_getmethods__["wheelThetas"] = _rwMotorVoltage.RWSpeedIntMsg_wheelThetas_get
    if _newclass:
        wheelThetas = _swig_property(_rwMotorVoltage.RWSpeedIntMsg_wheelThetas_get, _rwMotorVoltage.RWSpeedIntMsg_wheelThetas_set)

    def __init__(self):
        this = _rwMotorVoltage.new_RWSpeedIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_RWSpeedIntMsg
    __del__ = lambda self: None
RWSpeedIntMsg_swigregister = _rwMotorVoltage.RWSpeedIntMsg_swigregister
RWSpeedIntMsg_swigregister(RWSpeedIntMsg)

MAX_EFF_CNT = _rwMotorVoltage.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _rwMotorVoltage.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _rwMotorVoltage.MAX_ST_VEH_COUNT
NANO2SEC = _rwMotorVoltage.NANO2SEC
class RWArrayTorqueIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayTorqueIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayTorqueIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["motorTorque"] = _rwMotorVoltage.RWArrayTorqueIntMsg_motorTorque_set
    __swig_getmethods__["motorTorque"] = _rwMotorVoltage.RWArrayTorqueIntMsg_motorTorque_get
    if _newclass:
        motorTorque = _swig_property(_rwMotorVoltage.RWArrayTorqueIntMsg_motorTorque_get, _rwMotorVoltage.RWArrayTorqueIntMsg_motorTorque_set)

    def __init__(self):
        this = _rwMotorVoltage.new_RWArrayTorqueIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_RWArrayTorqueIntMsg
    __del__ = lambda self: None
RWArrayTorqueIntMsg_swigregister = _rwMotorVoltage.RWArrayTorqueIntMsg_swigregister
RWArrayTorqueIntMsg_swigregister(RWArrayTorqueIntMsg)

class RWArrayVoltageIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayVoltageIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayVoltageIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["voltage"] = _rwMotorVoltage.RWArrayVoltageIntMsg_voltage_set
    __swig_getmethods__["voltage"] = _rwMotorVoltage.RWArrayVoltageIntMsg_voltage_get
    if _newclass:
        voltage = _swig_property(_rwMotorVoltage.RWArrayVoltageIntMsg_voltage_get, _rwMotorVoltage.RWArrayVoltageIntMsg_voltage_set)

    def __init__(self):
        this = _rwMotorVoltage.new_RWArrayVoltageIntMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_RWArrayVoltageIntMsg
    __del__ = lambda self: None
RWArrayVoltageIntMsg_swigregister = _rwMotorVoltage.RWArrayVoltageIntMsg_swigregister
RWArrayVoltageIntMsg_swigregister(RWArrayVoltageIntMsg)

class RWAvailabilityFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWAvailabilityFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWAvailabilityFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelAvailability"] = _rwMotorVoltage.RWAvailabilityFswMsg_wheelAvailability_set
    __swig_getmethods__["wheelAvailability"] = _rwMotorVoltage.RWAvailabilityFswMsg_wheelAvailability_get
    if _newclass:
        wheelAvailability = _swig_property(_rwMotorVoltage.RWAvailabilityFswMsg_wheelAvailability_get, _rwMotorVoltage.RWAvailabilityFswMsg_wheelAvailability_set)

    def __init__(self):
        this = _rwMotorVoltage.new_RWAvailabilityFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_RWAvailabilityFswMsg
    __del__ = lambda self: None
RWAvailabilityFswMsg_swigregister = _rwMotorVoltage.RWAvailabilityFswMsg_swigregister
RWAvailabilityFswMsg_swigregister(RWAvailabilityFswMsg)

BOOL_FALSE = _rwMotorVoltage.BOOL_FALSE
BOOL_TRUE = _rwMotorVoltage.BOOL_TRUE
AVAILABLE = _rwMotorVoltage.AVAILABLE
UNAVAILABLE = _rwMotorVoltage.UNAVAILABLE
class RWArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GsMatrix_B"] = _rwMotorVoltage.RWArrayConfigFswMsg_GsMatrix_B_set
    __swig_getmethods__["GsMatrix_B"] = _rwMotorVoltage.RWArrayConfigFswMsg_GsMatrix_B_get
    if _newclass:
        GsMatrix_B = _swig_property(_rwMotorVoltage.RWArrayConfigFswMsg_GsMatrix_B_get, _rwMotorVoltage.RWArrayConfigFswMsg_GsMatrix_B_set)
    __swig_setmethods__["JsList"] = _rwMotorVoltage.RWArrayConfigFswMsg_JsList_set
    __swig_getmethods__["JsList"] = _rwMotorVoltage.RWArrayConfigFswMsg_JsList_get
    if _newclass:
        JsList = _swig_property(_rwMotorVoltage.RWArrayConfigFswMsg_JsList_get, _rwMotorVoltage.RWArrayConfigFswMsg_JsList_set)
    __swig_setmethods__["numRW"] = _rwMotorVoltage.RWArrayConfigFswMsg_numRW_set
    __swig_getmethods__["numRW"] = _rwMotorVoltage.RWArrayConfigFswMsg_numRW_get
    if _newclass:
        numRW = _swig_property(_rwMotorVoltage.RWArrayConfigFswMsg_numRW_get, _rwMotorVoltage.RWArrayConfigFswMsg_numRW_set)
    __swig_setmethods__["uMax"] = _rwMotorVoltage.RWArrayConfigFswMsg_uMax_set
    __swig_getmethods__["uMax"] = _rwMotorVoltage.RWArrayConfigFswMsg_uMax_get
    if _newclass:
        uMax = _swig_property(_rwMotorVoltage.RWArrayConfigFswMsg_uMax_get, _rwMotorVoltage.RWArrayConfigFswMsg_uMax_set)

    def __init__(self):
        this = _rwMotorVoltage.new_RWArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rwMotorVoltage.delete_RWArrayConfigFswMsg
    __del__ = lambda self: None
RWArrayConfigFswMsg_swigregister = _rwMotorVoltage.RWArrayConfigFswMsg_swigregister
RWArrayConfigFswMsg_swigregister(RWArrayConfigFswMsg)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


