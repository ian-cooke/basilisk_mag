# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fswMessages')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fswMessages')
    _fswMessages = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fswMessages', [dirname(__file__)])
        except ImportError:
            import _fswMessages
            return _fswMessages
        try:
            _mod = imp.load_module('_fswMessages', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fswMessages = swig_import_helper()
    del swig_import_helper
else:
    import _fswMessages
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _fswMessages.new_doubleArray(nelements)
new_doubleArray = _fswMessages.new_doubleArray

def delete_doubleArray(ary):
    return _fswMessages.delete_doubleArray(ary)
delete_doubleArray = _fswMessages.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _fswMessages.doubleArray_getitem(ary, index)
doubleArray_getitem = _fswMessages.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _fswMessages.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _fswMessages.doubleArray_setitem

def new_longArray(nelements):
    return _fswMessages.new_longArray(nelements)
new_longArray = _fswMessages.new_longArray

def delete_longArray(ary):
    return _fswMessages.delete_longArray(ary)
delete_longArray = _fswMessages.delete_longArray

def longArray_getitem(ary, index):
    return _fswMessages.longArray_getitem(ary, index)
longArray_getitem = _fswMessages.longArray_getitem

def longArray_setitem(ary, index, value):
    return _fswMessages.longArray_setitem(ary, index, value)
longArray_setitem = _fswMessages.longArray_setitem

def new_intArray(nelements):
    return _fswMessages.new_intArray(nelements)
new_intArray = _fswMessages.new_intArray

def delete_intArray(ary):
    return _fswMessages.delete_intArray(ary)
delete_intArray = _fswMessages.delete_intArray

def intArray_getitem(ary, index):
    return _fswMessages.intArray_getitem(ary, index)
intArray_getitem = _fswMessages.intArray_getitem

def intArray_setitem(ary, index, value):
    return _fswMessages.intArray_setitem(ary, index, value)
intArray_setitem = _fswMessages.intArray_setitem

def new_shortArray(nelements):
    return _fswMessages.new_shortArray(nelements)
new_shortArray = _fswMessages.new_shortArray

def delete_shortArray(ary):
    return _fswMessages.delete_shortArray(ary)
delete_shortArray = _fswMessages.delete_shortArray

def shortArray_getitem(ary, index):
    return _fswMessages.shortArray_getitem(ary, index)
shortArray_getitem = _fswMessages.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _fswMessages.shortArray_setitem(ary, index, value)
shortArray_setitem = _fswMessages.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_RWConfigArray(nelements):
    return _fswMessages.new_RWConfigArray(nelements)
new_RWConfigArray = _fswMessages.new_RWConfigArray

def delete_RWConfigArray(ary):
    return _fswMessages.delete_RWConfigArray(ary)
delete_RWConfigArray = _fswMessages.delete_RWConfigArray

def RWConfigArray_getitem(ary, index):
    return _fswMessages.RWConfigArray_getitem(ary, index)
RWConfigArray_getitem = _fswMessages.RWConfigArray_getitem

def RWConfigArray_setitem(ary, index, value):
    return _fswMessages.RWConfigArray_setitem(ary, index, value)
RWConfigArray_setitem = _fswMessages.RWConfigArray_setitem

def new_ThrustConfigArray(nelements):
    return _fswMessages.new_ThrustConfigArray(nelements)
new_ThrustConfigArray = _fswMessages.new_ThrustConfigArray

def delete_ThrustConfigArray(ary):
    return _fswMessages.delete_ThrustConfigArray(ary)
delete_ThrustConfigArray = _fswMessages.delete_ThrustConfigArray

def ThrustConfigArray_getitem(ary, index):
    return _fswMessages.ThrustConfigArray_getitem(ary, index)
ThrustConfigArray_getitem = _fswMessages.ThrustConfigArray_getitem

def ThrustConfigArray_setitem(ary, index, value):
    return _fswMessages.ThrustConfigArray_setitem(ary, index, value)
ThrustConfigArray_setitem = _fswMessages.ThrustConfigArray_setitem
MAX_EFF_CNT = _fswMessages.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _fswMessages.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _fswMessages.MAX_ST_VEH_COUNT
NANO2SEC = _fswMessages.NANO2SEC
MAX_ACC_BUF_PKT = _fswMessages.MAX_ACC_BUF_PKT
class AccDataFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccDataFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccDataFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accPkts"] = _fswMessages.AccDataFswMsg_accPkts_set
    __swig_getmethods__["accPkts"] = _fswMessages.AccDataFswMsg_accPkts_get
    if _newclass:
        accPkts = _swig_property(_fswMessages.AccDataFswMsg_accPkts_get, _fswMessages.AccDataFswMsg_accPkts_set)

    def __init__(self):
        this = _fswMessages.new_AccDataFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_AccDataFswMsg
    __del__ = lambda self: None
AccDataFswMsg_swigregister = _fswMessages.AccDataFswMsg_swigregister
AccDataFswMsg_swigregister(AccDataFswMsg)

sizeof_AccDataFswMsg = _fswMessages.sizeof_AccDataFswMsg
class AccPktDataFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccPktDataFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccPktDataFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["measTime"] = _fswMessages.AccPktDataFswMsg_measTime_set
    __swig_getmethods__["measTime"] = _fswMessages.AccPktDataFswMsg_measTime_get
    if _newclass:
        measTime = _swig_property(_fswMessages.AccPktDataFswMsg_measTime_get, _fswMessages.AccPktDataFswMsg_measTime_set)
    __swig_setmethods__["gyro_B"] = _fswMessages.AccPktDataFswMsg_gyro_B_set
    __swig_getmethods__["gyro_B"] = _fswMessages.AccPktDataFswMsg_gyro_B_get
    if _newclass:
        gyro_B = _swig_property(_fswMessages.AccPktDataFswMsg_gyro_B_get, _fswMessages.AccPktDataFswMsg_gyro_B_set)
    __swig_setmethods__["accel_B"] = _fswMessages.AccPktDataFswMsg_accel_B_set
    __swig_getmethods__["accel_B"] = _fswMessages.AccPktDataFswMsg_accel_B_get
    if _newclass:
        accel_B = _swig_property(_fswMessages.AccPktDataFswMsg_accel_B_get, _fswMessages.AccPktDataFswMsg_accel_B_set)

    def __init__(self):
        this = _fswMessages.new_AccPktDataFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_AccPktDataFswMsg
    __del__ = lambda self: None
AccPktDataFswMsg_swigregister = _fswMessages.AccPktDataFswMsg_swigregister
AccPktDataFswMsg_swigregister(AccPktDataFswMsg)

sizeof_AccPktDataFswMsg = _fswMessages.sizeof_AccPktDataFswMsg
class TDBVehicleClockCorrelationFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDBVehicleClockCorrelationFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDBVehicleClockCorrelationFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ephemerisTime"] = _fswMessages.TDBVehicleClockCorrelationFswMsg_ephemerisTime_set
    __swig_getmethods__["ephemerisTime"] = _fswMessages.TDBVehicleClockCorrelationFswMsg_ephemerisTime_get
    if _newclass:
        ephemerisTime = _swig_property(_fswMessages.TDBVehicleClockCorrelationFswMsg_ephemerisTime_get, _fswMessages.TDBVehicleClockCorrelationFswMsg_ephemerisTime_set)
    __swig_setmethods__["vehicleClockTime"] = _fswMessages.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_set
    __swig_getmethods__["vehicleClockTime"] = _fswMessages.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_get
    if _newclass:
        vehicleClockTime = _swig_property(_fswMessages.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_get, _fswMessages.TDBVehicleClockCorrelationFswMsg_vehicleClockTime_set)

    def __init__(self):
        this = _fswMessages.new_TDBVehicleClockCorrelationFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_TDBVehicleClockCorrelationFswMsg
    __del__ = lambda self: None
TDBVehicleClockCorrelationFswMsg_swigregister = _fswMessages.TDBVehicleClockCorrelationFswMsg_swigregister
TDBVehicleClockCorrelationFswMsg_swigregister(TDBVehicleClockCorrelationFswMsg)

sizeof_TDBVehicleClockCorrelationFswMsg = _fswMessages.sizeof_TDBVehicleClockCorrelationFswMsg
class AttGuidFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttGuidFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttGuidFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_BR"] = _fswMessages.AttGuidFswMsg_sigma_BR_set
    __swig_getmethods__["sigma_BR"] = _fswMessages.AttGuidFswMsg_sigma_BR_get
    if _newclass:
        sigma_BR = _swig_property(_fswMessages.AttGuidFswMsg_sigma_BR_get, _fswMessages.AttGuidFswMsg_sigma_BR_set)
    __swig_setmethods__["omega_BR_B"] = _fswMessages.AttGuidFswMsg_omega_BR_B_set
    __swig_getmethods__["omega_BR_B"] = _fswMessages.AttGuidFswMsg_omega_BR_B_get
    if _newclass:
        omega_BR_B = _swig_property(_fswMessages.AttGuidFswMsg_omega_BR_B_get, _fswMessages.AttGuidFswMsg_omega_BR_B_set)
    __swig_setmethods__["omega_RN_B"] = _fswMessages.AttGuidFswMsg_omega_RN_B_set
    __swig_getmethods__["omega_RN_B"] = _fswMessages.AttGuidFswMsg_omega_RN_B_get
    if _newclass:
        omega_RN_B = _swig_property(_fswMessages.AttGuidFswMsg_omega_RN_B_get, _fswMessages.AttGuidFswMsg_omega_RN_B_set)
    __swig_setmethods__["domega_RN_B"] = _fswMessages.AttGuidFswMsg_domega_RN_B_set
    __swig_getmethods__["domega_RN_B"] = _fswMessages.AttGuidFswMsg_domega_RN_B_get
    if _newclass:
        domega_RN_B = _swig_property(_fswMessages.AttGuidFswMsg_domega_RN_B_get, _fswMessages.AttGuidFswMsg_domega_RN_B_set)
    __swig_setmethods__["PRV"] = _fswMessages.AttGuidFswMsg_PRV_set
    __swig_getmethods__["PRV"] = _fswMessages.AttGuidFswMsg_PRV_get
    if _newclass:
        PRV = _swig_property(_fswMessages.AttGuidFswMsg_PRV_get, _fswMessages.AttGuidFswMsg_PRV_set)

    def __init__(self):
        this = _fswMessages.new_AttGuidFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_AttGuidFswMsg
    __del__ = lambda self: None
AttGuidFswMsg_swigregister = _fswMessages.AttGuidFswMsg_swigregister
AttGuidFswMsg_swigregister(AttGuidFswMsg)

sizeof_AttGuidFswMsg = _fswMessages.sizeof_AttGuidFswMsg
class AttRefFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttRefFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttRefFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_RN"] = _fswMessages.AttRefFswMsg_sigma_RN_set
    __swig_getmethods__["sigma_RN"] = _fswMessages.AttRefFswMsg_sigma_RN_get
    if _newclass:
        sigma_RN = _swig_property(_fswMessages.AttRefFswMsg_sigma_RN_get, _fswMessages.AttRefFswMsg_sigma_RN_set)
    __swig_setmethods__["omega_RN_N"] = _fswMessages.AttRefFswMsg_omega_RN_N_set
    __swig_getmethods__["omega_RN_N"] = _fswMessages.AttRefFswMsg_omega_RN_N_get
    if _newclass:
        omega_RN_N = _swig_property(_fswMessages.AttRefFswMsg_omega_RN_N_get, _fswMessages.AttRefFswMsg_omega_RN_N_set)
    __swig_setmethods__["domega_RN_N"] = _fswMessages.AttRefFswMsg_domega_RN_N_set
    __swig_getmethods__["domega_RN_N"] = _fswMessages.AttRefFswMsg_domega_RN_N_get
    if _newclass:
        domega_RN_N = _swig_property(_fswMessages.AttRefFswMsg_domega_RN_N_get, _fswMessages.AttRefFswMsg_domega_RN_N_set)

    def __init__(self):
        this = _fswMessages.new_AttRefFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_AttRefFswMsg
    __del__ = lambda self: None
AttRefFswMsg_swigregister = _fswMessages.AttRefFswMsg_swigregister
AttRefFswMsg_swigregister(AttRefFswMsg)

sizeof_AttRefFswMsg = _fswMessages.sizeof_AttRefFswMsg
class CSSConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCSS"] = _fswMessages.CSSConfigFswMsg_nCSS_set
    __swig_getmethods__["nCSS"] = _fswMessages.CSSConfigFswMsg_nCSS_get
    if _newclass:
        nCSS = _swig_property(_fswMessages.CSSConfigFswMsg_nCSS_get, _fswMessages.CSSConfigFswMsg_nCSS_set)
    __swig_setmethods__["cssVals"] = _fswMessages.CSSConfigFswMsg_cssVals_set
    __swig_getmethods__["cssVals"] = _fswMessages.CSSConfigFswMsg_cssVals_get
    if _newclass:
        cssVals = _swig_property(_fswMessages.CSSConfigFswMsg_cssVals_get, _fswMessages.CSSConfigFswMsg_cssVals_set)

    def __init__(self):
        this = _fswMessages.new_CSSConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_CSSConfigFswMsg
    __del__ = lambda self: None
CSSConfigFswMsg_swigregister = _fswMessages.CSSConfigFswMsg_swigregister
CSSConfigFswMsg_swigregister(CSSConfigFswMsg)

sizeof_CSSConfigFswMsg = _fswMessages.sizeof_CSSConfigFswMsg
class CSSUnitConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSUnitConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSUnitConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nHat_B"] = _fswMessages.CSSUnitConfigFswMsg_nHat_B_set
    __swig_getmethods__["nHat_B"] = _fswMessages.CSSUnitConfigFswMsg_nHat_B_get
    if _newclass:
        nHat_B = _swig_property(_fswMessages.CSSUnitConfigFswMsg_nHat_B_get, _fswMessages.CSSUnitConfigFswMsg_nHat_B_set)
    __swig_setmethods__["CBias"] = _fswMessages.CSSUnitConfigFswMsg_CBias_set
    __swig_getmethods__["CBias"] = _fswMessages.CSSUnitConfigFswMsg_CBias_get
    if _newclass:
        CBias = _swig_property(_fswMessages.CSSUnitConfigFswMsg_CBias_get, _fswMessages.CSSUnitConfigFswMsg_CBias_set)

    def __init__(self):
        this = _fswMessages.new_CSSUnitConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_CSSUnitConfigFswMsg
    __del__ = lambda self: None
CSSUnitConfigFswMsg_swigregister = _fswMessages.CSSUnitConfigFswMsg_swigregister
CSSUnitConfigFswMsg_swigregister(CSSUnitConfigFswMsg)

sizeof_CSSUnitConfigFswMsg = _fswMessages.sizeof_CSSUnitConfigFswMsg
class DvBurnCmdFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DvBurnCmdFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DvBurnCmdFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dvInrtlCmd"] = _fswMessages.DvBurnCmdFswMsg_dvInrtlCmd_set
    __swig_getmethods__["dvInrtlCmd"] = _fswMessages.DvBurnCmdFswMsg_dvInrtlCmd_get
    if _newclass:
        dvInrtlCmd = _swig_property(_fswMessages.DvBurnCmdFswMsg_dvInrtlCmd_get, _fswMessages.DvBurnCmdFswMsg_dvInrtlCmd_set)
    __swig_setmethods__["dvRotVecUnit"] = _fswMessages.DvBurnCmdFswMsg_dvRotVecUnit_set
    __swig_getmethods__["dvRotVecUnit"] = _fswMessages.DvBurnCmdFswMsg_dvRotVecUnit_get
    if _newclass:
        dvRotVecUnit = _swig_property(_fswMessages.DvBurnCmdFswMsg_dvRotVecUnit_get, _fswMessages.DvBurnCmdFswMsg_dvRotVecUnit_set)
    __swig_setmethods__["dvRotVecMag"] = _fswMessages.DvBurnCmdFswMsg_dvRotVecMag_set
    __swig_getmethods__["dvRotVecMag"] = _fswMessages.DvBurnCmdFswMsg_dvRotVecMag_get
    if _newclass:
        dvRotVecMag = _swig_property(_fswMessages.DvBurnCmdFswMsg_dvRotVecMag_get, _fswMessages.DvBurnCmdFswMsg_dvRotVecMag_set)
    __swig_setmethods__["burnStartTime"] = _fswMessages.DvBurnCmdFswMsg_burnStartTime_set
    __swig_getmethods__["burnStartTime"] = _fswMessages.DvBurnCmdFswMsg_burnStartTime_get
    if _newclass:
        burnStartTime = _swig_property(_fswMessages.DvBurnCmdFswMsg_burnStartTime_get, _fswMessages.DvBurnCmdFswMsg_burnStartTime_set)

    def __init__(self):
        this = _fswMessages.new_DvBurnCmdFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_DvBurnCmdFswMsg
    __del__ = lambda self: None
DvBurnCmdFswMsg_swigregister = _fswMessages.DvBurnCmdFswMsg_swigregister
DvBurnCmdFswMsg_swigregister(DvBurnCmdFswMsg)

sizeof_DvBurnCmdFswMsg = _fswMessages.sizeof_DvBurnCmdFswMsg
class AttStateFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttStateFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttStateFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _fswMessages.AttStateFswMsg_state_set
    __swig_getmethods__["state"] = _fswMessages.AttStateFswMsg_state_get
    if _newclass:
        state = _swig_property(_fswMessages.AttStateFswMsg_state_get, _fswMessages.AttStateFswMsg_state_set)
    __swig_setmethods__["rate"] = _fswMessages.AttStateFswMsg_rate_set
    __swig_getmethods__["rate"] = _fswMessages.AttStateFswMsg_rate_get
    if _newclass:
        rate = _swig_property(_fswMessages.AttStateFswMsg_rate_get, _fswMessages.AttStateFswMsg_rate_set)

    def __init__(self):
        this = _fswMessages.new_AttStateFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_AttStateFswMsg
    __del__ = lambda self: None
AttStateFswMsg_swigregister = _fswMessages.AttStateFswMsg_swigregister
AttStateFswMsg_swigregister(AttStateFswMsg)

sizeof_AttStateFswMsg = _fswMessages.sizeof_AttStateFswMsg
class IMUSensorBodyFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMUSensorBodyFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMUSensorBodyFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DVFrameBody"] = _fswMessages.IMUSensorBodyFswMsg_DVFrameBody_set
    __swig_getmethods__["DVFrameBody"] = _fswMessages.IMUSensorBodyFswMsg_DVFrameBody_get
    if _newclass:
        DVFrameBody = _swig_property(_fswMessages.IMUSensorBodyFswMsg_DVFrameBody_get, _fswMessages.IMUSensorBodyFswMsg_DVFrameBody_set)
    __swig_setmethods__["AccelBody"] = _fswMessages.IMUSensorBodyFswMsg_AccelBody_set
    __swig_getmethods__["AccelBody"] = _fswMessages.IMUSensorBodyFswMsg_AccelBody_get
    if _newclass:
        AccelBody = _swig_property(_fswMessages.IMUSensorBodyFswMsg_AccelBody_get, _fswMessages.IMUSensorBodyFswMsg_AccelBody_set)
    __swig_setmethods__["DRFrameBody"] = _fswMessages.IMUSensorBodyFswMsg_DRFrameBody_set
    __swig_getmethods__["DRFrameBody"] = _fswMessages.IMUSensorBodyFswMsg_DRFrameBody_get
    if _newclass:
        DRFrameBody = _swig_property(_fswMessages.IMUSensorBodyFswMsg_DRFrameBody_get, _fswMessages.IMUSensorBodyFswMsg_DRFrameBody_set)
    __swig_setmethods__["AngVelBody"] = _fswMessages.IMUSensorBodyFswMsg_AngVelBody_set
    __swig_getmethods__["AngVelBody"] = _fswMessages.IMUSensorBodyFswMsg_AngVelBody_get
    if _newclass:
        AngVelBody = _swig_property(_fswMessages.IMUSensorBodyFswMsg_AngVelBody_get, _fswMessages.IMUSensorBodyFswMsg_AngVelBody_set)

    def __init__(self):
        this = _fswMessages.new_IMUSensorBodyFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_IMUSensorBodyFswMsg
    __del__ = lambda self: None
IMUSensorBodyFswMsg_swigregister = _fswMessages.IMUSensorBodyFswMsg_swigregister
IMUSensorBodyFswMsg_swigregister(IMUSensorBodyFswMsg)

sizeof_IMUSensorBodyFswMsg = _fswMessages.sizeof_IMUSensorBodyFswMsg
AKF_N_STATES = _fswMessages.AKF_N_STATES
MAX_N_ATT_STATES = _fswMessages.MAX_N_ATT_STATES
class InertialFilterFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertialFilterFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertialFilterFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _fswMessages.InertialFilterFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _fswMessages.InertialFilterFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_fswMessages.InertialFilterFswMsg_timeTag_get, _fswMessages.InertialFilterFswMsg_timeTag_set)
    __swig_setmethods__["covar"] = _fswMessages.InertialFilterFswMsg_covar_set
    __swig_getmethods__["covar"] = _fswMessages.InertialFilterFswMsg_covar_get
    if _newclass:
        covar = _swig_property(_fswMessages.InertialFilterFswMsg_covar_get, _fswMessages.InertialFilterFswMsg_covar_set)
    __swig_setmethods__["state"] = _fswMessages.InertialFilterFswMsg_state_set
    __swig_getmethods__["state"] = _fswMessages.InertialFilterFswMsg_state_get
    if _newclass:
        state = _swig_property(_fswMessages.InertialFilterFswMsg_state_get, _fswMessages.InertialFilterFswMsg_state_set)
    __swig_setmethods__["numObs"] = _fswMessages.InertialFilterFswMsg_numObs_set
    __swig_getmethods__["numObs"] = _fswMessages.InertialFilterFswMsg_numObs_get
    if _newclass:
        numObs = _swig_property(_fswMessages.InertialFilterFswMsg_numObs_get, _fswMessages.InertialFilterFswMsg_numObs_set)

    def __init__(self):
        this = _fswMessages.new_InertialFilterFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_InertialFilterFswMsg
    __del__ = lambda self: None
InertialFilterFswMsg_swigregister = _fswMessages.InertialFilterFswMsg_swigregister
InertialFilterFswMsg_swigregister(InertialFilterFswMsg)

sizeof_InertialFilterFswMsg = _fswMessages.sizeof_InertialFilterFswMsg
class RWArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GsMatrix_B"] = _fswMessages.RWArrayConfigFswMsg_GsMatrix_B_set
    __swig_getmethods__["GsMatrix_B"] = _fswMessages.RWArrayConfigFswMsg_GsMatrix_B_get
    if _newclass:
        GsMatrix_B = _swig_property(_fswMessages.RWArrayConfigFswMsg_GsMatrix_B_get, _fswMessages.RWArrayConfigFswMsg_GsMatrix_B_set)
    __swig_setmethods__["JsList"] = _fswMessages.RWArrayConfigFswMsg_JsList_set
    __swig_getmethods__["JsList"] = _fswMessages.RWArrayConfigFswMsg_JsList_get
    if _newclass:
        JsList = _swig_property(_fswMessages.RWArrayConfigFswMsg_JsList_get, _fswMessages.RWArrayConfigFswMsg_JsList_set)
    __swig_setmethods__["numRW"] = _fswMessages.RWArrayConfigFswMsg_numRW_set
    __swig_getmethods__["numRW"] = _fswMessages.RWArrayConfigFswMsg_numRW_get
    if _newclass:
        numRW = _swig_property(_fswMessages.RWArrayConfigFswMsg_numRW_get, _fswMessages.RWArrayConfigFswMsg_numRW_set)
    __swig_setmethods__["uMax"] = _fswMessages.RWArrayConfigFswMsg_uMax_set
    __swig_getmethods__["uMax"] = _fswMessages.RWArrayConfigFswMsg_uMax_get
    if _newclass:
        uMax = _swig_property(_fswMessages.RWArrayConfigFswMsg_uMax_get, _fswMessages.RWArrayConfigFswMsg_uMax_set)

    def __init__(self):
        this = _fswMessages.new_RWArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_RWArrayConfigFswMsg
    __del__ = lambda self: None
RWArrayConfigFswMsg_swigregister = _fswMessages.RWArrayConfigFswMsg_swigregister
RWArrayConfigFswMsg_swigregister(RWArrayConfigFswMsg)

sizeof_RWArrayConfigFswMsg = _fswMessages.sizeof_RWArrayConfigFswMsg
class RWAvailabilityFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWAvailabilityFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWAvailabilityFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelAvailability"] = _fswMessages.RWAvailabilityFswMsg_wheelAvailability_set
    __swig_getmethods__["wheelAvailability"] = _fswMessages.RWAvailabilityFswMsg_wheelAvailability_get
    if _newclass:
        wheelAvailability = _swig_property(_fswMessages.RWAvailabilityFswMsg_wheelAvailability_get, _fswMessages.RWAvailabilityFswMsg_wheelAvailability_set)

    def __init__(self):
        this = _fswMessages.new_RWAvailabilityFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_RWAvailabilityFswMsg
    __del__ = lambda self: None
RWAvailabilityFswMsg_swigregister = _fswMessages.RWAvailabilityFswMsg_swigregister
RWAvailabilityFswMsg_swigregister(RWAvailabilityFswMsg)

sizeof_RWAvailabilityFswMsg = _fswMessages.sizeof_RWAvailabilityFswMsg
class RWConfigElementFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigElementFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigElementFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gsHat_B"] = _fswMessages.RWConfigElementFswMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _fswMessages.RWConfigElementFswMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_fswMessages.RWConfigElementFswMsg_gsHat_B_get, _fswMessages.RWConfigElementFswMsg_gsHat_B_set)
    __swig_setmethods__["Js"] = _fswMessages.RWConfigElementFswMsg_Js_set
    __swig_getmethods__["Js"] = _fswMessages.RWConfigElementFswMsg_Js_get
    if _newclass:
        Js = _swig_property(_fswMessages.RWConfigElementFswMsg_Js_get, _fswMessages.RWConfigElementFswMsg_Js_set)
    __swig_setmethods__["uMax"] = _fswMessages.RWConfigElementFswMsg_uMax_set
    __swig_getmethods__["uMax"] = _fswMessages.RWConfigElementFswMsg_uMax_get
    if _newclass:
        uMax = _swig_property(_fswMessages.RWConfigElementFswMsg_uMax_get, _fswMessages.RWConfigElementFswMsg_uMax_set)

    def __init__(self):
        this = _fswMessages.new_RWConfigElementFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_RWConfigElementFswMsg
    __del__ = lambda self: None
RWConfigElementFswMsg_swigregister = _fswMessages.RWConfigElementFswMsg_swigregister
RWConfigElementFswMsg_swigregister(RWConfigElementFswMsg)

sizeof_RWConfigElementFswMsg = _fswMessages.sizeof_RWConfigElementFswMsg
class RWConstellationFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConstellationFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConstellationFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numRW"] = _fswMessages.RWConstellationFswMsg_numRW_set
    __swig_getmethods__["numRW"] = _fswMessages.RWConstellationFswMsg_numRW_get
    if _newclass:
        numRW = _swig_property(_fswMessages.RWConstellationFswMsg_numRW_get, _fswMessages.RWConstellationFswMsg_numRW_set)
    __swig_setmethods__["reactionWheels"] = _fswMessages.RWConstellationFswMsg_reactionWheels_set
    __swig_getmethods__["reactionWheels"] = _fswMessages.RWConstellationFswMsg_reactionWheels_get
    if _newclass:
        reactionWheels = _swig_property(_fswMessages.RWConstellationFswMsg_reactionWheels_get, _fswMessages.RWConstellationFswMsg_reactionWheels_set)

    def __init__(self):
        this = _fswMessages.new_RWConstellationFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_RWConstellationFswMsg
    __del__ = lambda self: None
RWConstellationFswMsg_swigregister = _fswMessages.RWConstellationFswMsg_swigregister
RWConstellationFswMsg_swigregister(RWConstellationFswMsg)

sizeof_RWConstellationFswMsg = _fswMessages.sizeof_RWConstellationFswMsg
class STAttFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STAttFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STAttFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _fswMessages.STAttFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _fswMessages.STAttFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_fswMessages.STAttFswMsg_timeTag_get, _fswMessages.STAttFswMsg_timeTag_set)
    __swig_setmethods__["MRP_BdyInrtl"] = _fswMessages.STAttFswMsg_MRP_BdyInrtl_set
    __swig_getmethods__["MRP_BdyInrtl"] = _fswMessages.STAttFswMsg_MRP_BdyInrtl_get
    if _newclass:
        MRP_BdyInrtl = _swig_property(_fswMessages.STAttFswMsg_MRP_BdyInrtl_get, _fswMessages.STAttFswMsg_MRP_BdyInrtl_set)

    def __init__(self):
        this = _fswMessages.new_STAttFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_STAttFswMsg
    __del__ = lambda self: None
STAttFswMsg_swigregister = _fswMessages.STAttFswMsg_swigregister
STAttFswMsg_swigregister(STAttFswMsg)

sizeof_STAttFswMsg = _fswMessages.sizeof_STAttFswMsg
SKF_N_STATES = _fswMessages.SKF_N_STATES
SKF_N_STATES_SWITCH = _fswMessages.SKF_N_STATES_SWITCH
SKF_N_STATES_HALF = _fswMessages.SKF_N_STATES_HALF
MAX_N_CSS_MEAS = _fswMessages.MAX_N_CSS_MEAS
class SunlineFilterFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SunlineFilterFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SunlineFilterFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _fswMessages.SunlineFilterFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _fswMessages.SunlineFilterFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_fswMessages.SunlineFilterFswMsg_timeTag_get, _fswMessages.SunlineFilterFswMsg_timeTag_set)
    __swig_setmethods__["covar"] = _fswMessages.SunlineFilterFswMsg_covar_set
    __swig_getmethods__["covar"] = _fswMessages.SunlineFilterFswMsg_covar_get
    if _newclass:
        covar = _swig_property(_fswMessages.SunlineFilterFswMsg_covar_get, _fswMessages.SunlineFilterFswMsg_covar_set)
    __swig_setmethods__["state"] = _fswMessages.SunlineFilterFswMsg_state_set
    __swig_getmethods__["state"] = _fswMessages.SunlineFilterFswMsg_state_get
    if _newclass:
        state = _swig_property(_fswMessages.SunlineFilterFswMsg_state_get, _fswMessages.SunlineFilterFswMsg_state_set)
    __swig_setmethods__["stateError"] = _fswMessages.SunlineFilterFswMsg_stateError_set
    __swig_getmethods__["stateError"] = _fswMessages.SunlineFilterFswMsg_stateError_get
    if _newclass:
        stateError = _swig_property(_fswMessages.SunlineFilterFswMsg_stateError_get, _fswMessages.SunlineFilterFswMsg_stateError_set)
    __swig_setmethods__["postFitRes"] = _fswMessages.SunlineFilterFswMsg_postFitRes_set
    __swig_getmethods__["postFitRes"] = _fswMessages.SunlineFilterFswMsg_postFitRes_get
    if _newclass:
        postFitRes = _swig_property(_fswMessages.SunlineFilterFswMsg_postFitRes_get, _fswMessages.SunlineFilterFswMsg_postFitRes_set)
    __swig_setmethods__["numObs"] = _fswMessages.SunlineFilterFswMsg_numObs_set
    __swig_getmethods__["numObs"] = _fswMessages.SunlineFilterFswMsg_numObs_get
    if _newclass:
        numObs = _swig_property(_fswMessages.SunlineFilterFswMsg_numObs_get, _fswMessages.SunlineFilterFswMsg_numObs_set)

    def __init__(self):
        this = _fswMessages.new_SunlineFilterFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_SunlineFilterFswMsg
    __del__ = lambda self: None
SunlineFilterFswMsg_swigregister = _fswMessages.SunlineFilterFswMsg_swigregister
SunlineFilterFswMsg_swigregister(SunlineFilterFswMsg)

sizeof_SunlineFilterFswMsg = _fswMessages.sizeof_SunlineFilterFswMsg
class THRArrayCmdForceFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayCmdForceFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayCmdForceFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thrForce"] = _fswMessages.THRArrayCmdForceFswMsg_thrForce_set
    __swig_getmethods__["thrForce"] = _fswMessages.THRArrayCmdForceFswMsg_thrForce_get
    if _newclass:
        thrForce = _swig_property(_fswMessages.THRArrayCmdForceFswMsg_thrForce_get, _fswMessages.THRArrayCmdForceFswMsg_thrForce_set)

    def __init__(self):
        this = _fswMessages.new_THRArrayCmdForceFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_THRArrayCmdForceFswMsg
    __del__ = lambda self: None
THRArrayCmdForceFswMsg_swigregister = _fswMessages.THRArrayCmdForceFswMsg_swigregister
THRArrayCmdForceFswMsg_swigregister(THRArrayCmdForceFswMsg)

sizeof_THRArrayCmdForceFswMsg = _fswMessages.sizeof_THRArrayCmdForceFswMsg
class THRArrayConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numThrusters"] = _fswMessages.THRArrayConfigFswMsg_numThrusters_set
    __swig_getmethods__["numThrusters"] = _fswMessages.THRArrayConfigFswMsg_numThrusters_get
    if _newclass:
        numThrusters = _swig_property(_fswMessages.THRArrayConfigFswMsg_numThrusters_get, _fswMessages.THRArrayConfigFswMsg_numThrusters_set)
    __swig_setmethods__["thrusters"] = _fswMessages.THRArrayConfigFswMsg_thrusters_set
    __swig_getmethods__["thrusters"] = _fswMessages.THRArrayConfigFswMsg_thrusters_get
    if _newclass:
        thrusters = _swig_property(_fswMessages.THRArrayConfigFswMsg_thrusters_get, _fswMessages.THRArrayConfigFswMsg_thrusters_set)

    def __init__(self):
        this = _fswMessages.new_THRArrayConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_THRArrayConfigFswMsg
    __del__ = lambda self: None
THRArrayConfigFswMsg_swigregister = _fswMessages.THRArrayConfigFswMsg_swigregister
THRArrayConfigFswMsg_swigregister(THRArrayConfigFswMsg)

sizeof_THRArrayConfigFswMsg = _fswMessages.sizeof_THRArrayConfigFswMsg
class THRConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rThrust_B"] = _fswMessages.THRConfigFswMsg_rThrust_B_set
    __swig_getmethods__["rThrust_B"] = _fswMessages.THRConfigFswMsg_rThrust_B_get
    if _newclass:
        rThrust_B = _swig_property(_fswMessages.THRConfigFswMsg_rThrust_B_get, _fswMessages.THRConfigFswMsg_rThrust_B_set)
    __swig_setmethods__["tHatThrust_B"] = _fswMessages.THRConfigFswMsg_tHatThrust_B_set
    __swig_getmethods__["tHatThrust_B"] = _fswMessages.THRConfigFswMsg_tHatThrust_B_get
    if _newclass:
        tHatThrust_B = _swig_property(_fswMessages.THRConfigFswMsg_tHatThrust_B_get, _fswMessages.THRConfigFswMsg_tHatThrust_B_set)
    __swig_setmethods__["maxThrust"] = _fswMessages.THRConfigFswMsg_maxThrust_set
    __swig_getmethods__["maxThrust"] = _fswMessages.THRConfigFswMsg_maxThrust_get
    if _newclass:
        maxThrust = _swig_property(_fswMessages.THRConfigFswMsg_maxThrust_get, _fswMessages.THRConfigFswMsg_maxThrust_set)

    def __init__(self):
        this = _fswMessages.new_THRConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_THRConfigFswMsg
    __del__ = lambda self: None
THRConfigFswMsg_swigregister = _fswMessages.THRConfigFswMsg_swigregister
THRConfigFswMsg_swigregister(THRConfigFswMsg)

sizeof_THRConfigFswMsg = _fswMessages.sizeof_THRConfigFswMsg
class VehicleConfigFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VehicleConfigFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VehicleConfigFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ISCPntB_B"] = _fswMessages.VehicleConfigFswMsg_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _fswMessages.VehicleConfigFswMsg_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_fswMessages.VehicleConfigFswMsg_ISCPntB_B_get, _fswMessages.VehicleConfigFswMsg_ISCPntB_B_set)
    __swig_setmethods__["CoM_B"] = _fswMessages.VehicleConfigFswMsg_CoM_B_set
    __swig_getmethods__["CoM_B"] = _fswMessages.VehicleConfigFswMsg_CoM_B_get
    if _newclass:
        CoM_B = _swig_property(_fswMessages.VehicleConfigFswMsg_CoM_B_get, _fswMessages.VehicleConfigFswMsg_CoM_B_set)
    __swig_setmethods__["CurrentADCSState"] = _fswMessages.VehicleConfigFswMsg_CurrentADCSState_set
    __swig_getmethods__["CurrentADCSState"] = _fswMessages.VehicleConfigFswMsg_CurrentADCSState_get
    if _newclass:
        CurrentADCSState = _swig_property(_fswMessages.VehicleConfigFswMsg_CurrentADCSState_get, _fswMessages.VehicleConfigFswMsg_CurrentADCSState_set)

    def __init__(self):
        this = _fswMessages.new_VehicleConfigFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_VehicleConfigFswMsg
    __del__ = lambda self: None
VehicleConfigFswMsg_swigregister = _fswMessages.VehicleConfigFswMsg_swigregister
VehicleConfigFswMsg_swigregister(VehicleConfigFswMsg)

sizeof_VehicleConfigFswMsg = _fswMessages.sizeof_VehicleConfigFswMsg
class RateCmdFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateCmdFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RateCmdFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["omega_BastR_B"] = _fswMessages.RateCmdFswMsg_omega_BastR_B_set
    __swig_getmethods__["omega_BastR_B"] = _fswMessages.RateCmdFswMsg_omega_BastR_B_get
    if _newclass:
        omega_BastR_B = _swig_property(_fswMessages.RateCmdFswMsg_omega_BastR_B_get, _fswMessages.RateCmdFswMsg_omega_BastR_B_set)
    __swig_setmethods__["omegap_BastR_B"] = _fswMessages.RateCmdFswMsg_omegap_BastR_B_set
    __swig_getmethods__["omegap_BastR_B"] = _fswMessages.RateCmdFswMsg_omegap_BastR_B_get
    if _newclass:
        omegap_BastR_B = _swig_property(_fswMessages.RateCmdFswMsg_omegap_BastR_B_get, _fswMessages.RateCmdFswMsg_omegap_BastR_B_set)

    def __init__(self):
        this = _fswMessages.new_RateCmdFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_RateCmdFswMsg
    __del__ = lambda self: None
RateCmdFswMsg_swigregister = _fswMessages.RateCmdFswMsg_swigregister
RateCmdFswMsg_swigregister(RateCmdFswMsg)

sizeof_RateCmdFswMsg = _fswMessages.sizeof_RateCmdFswMsg
class QuatGuidFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuatGuidFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuatGuidFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigma_BR"] = _fswMessages.QuatGuidFswMsg_sigma_BR_set
    __swig_getmethods__["sigma_BR"] = _fswMessages.QuatGuidFswMsg_sigma_BR_get
    if _newclass:
        sigma_BR = _swig_property(_fswMessages.QuatGuidFswMsg_sigma_BR_get, _fswMessages.QuatGuidFswMsg_sigma_BR_set)
    __swig_setmethods__["q_BN"] = _fswMessages.QuatGuidFswMsg_q_BN_set
    __swig_getmethods__["q_BN"] = _fswMessages.QuatGuidFswMsg_q_BN_get
    if _newclass:
        q_BN = _swig_property(_fswMessages.QuatGuidFswMsg_q_BN_get, _fswMessages.QuatGuidFswMsg_q_BN_set)
    __swig_setmethods__["q_BR"] = _fswMessages.QuatGuidFswMsg_q_BR_set
    __swig_getmethods__["q_BR"] = _fswMessages.QuatGuidFswMsg_q_BR_get
    if _newclass:
        q_BR = _swig_property(_fswMessages.QuatGuidFswMsg_q_BR_get, _fswMessages.QuatGuidFswMsg_q_BR_set)
    __swig_setmethods__["PRV_ang"] = _fswMessages.QuatGuidFswMsg_PRV_ang_set
    __swig_getmethods__["PRV_ang"] = _fswMessages.QuatGuidFswMsg_PRV_ang_get
    if _newclass:
        PRV_ang = _swig_property(_fswMessages.QuatGuidFswMsg_PRV_ang_get, _fswMessages.QuatGuidFswMsg_PRV_ang_set)

    def __init__(self):
        this = _fswMessages.new_QuatGuidFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_QuatGuidFswMsg
    __del__ = lambda self: None
QuatGuidFswMsg_swigregister = _fswMessages.QuatGuidFswMsg_swigregister
QuatGuidFswMsg_swigregister(QuatGuidFswMsg)

sizeof_QuatGuidFswMsg = _fswMessages.sizeof_QuatGuidFswMsg
class MagFswMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagFswMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagFswMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _fswMessages.MagFswMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _fswMessages.MagFswMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_fswMessages.MagFswMsg_timeTag_get, _fswMessages.MagFswMsg_timeTag_set)

    def __init__(self):
        this = _fswMessages.new_MagFswMsg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fswMessages.delete_MagFswMsg
    __del__ = lambda self: None
MagFswMsg_swigregister = _fswMessages.MagFswMsg_swigregister
MagFswMsg_swigregister(MagFswMsg)

sizeof_MagFswMsg = _fswMessages.sizeof_MagFswMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


