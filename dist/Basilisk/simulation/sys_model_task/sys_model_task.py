# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sys_model_task')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sys_model_task')
    _sys_model_task = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sys_model_task', [dirname(__file__)])
        except ImportError:
            import _sys_model_task
            return _sys_model_task
        try:
            _mod = imp.load_module('_sys_model_task', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sys_model_task = swig_import_helper()
    del swig_import_helper
else:
    import _sys_model_task
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sys_model_task.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _sys_model_task.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sys_model_task.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sys_model_task.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sys_model_task.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sys_model_task.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sys_model_task.SwigPyIterator_copy(self)

    def next(self):
        return _sys_model_task.SwigPyIterator_next(self)

    def __next__(self):
        return _sys_model_task.SwigPyIterator___next__(self)

    def previous(self):
        return _sys_model_task.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sys_model_task.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sys_model_task.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sys_model_task.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sys_model_task.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sys_model_task.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sys_model_task.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sys_model_task.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _sys_model_task.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sys_model_task.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sys_model_task.IntVector___nonzero__(self)

    def __bool__(self):
        return _sys_model_task.IntVector___bool__(self)

    def __len__(self):
        return _sys_model_task.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _sys_model_task.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sys_model_task.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sys_model_task.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sys_model_task.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sys_model_task.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sys_model_task.IntVector___setitem__(self, *args)

    def pop(self):
        return _sys_model_task.IntVector_pop(self)

    def append(self, x):
        return _sys_model_task.IntVector_append(self, x)

    def empty(self):
        return _sys_model_task.IntVector_empty(self)

    def size(self):
        return _sys_model_task.IntVector_size(self)

    def swap(self, v):
        return _sys_model_task.IntVector_swap(self, v)

    def begin(self):
        return _sys_model_task.IntVector_begin(self)

    def end(self):
        return _sys_model_task.IntVector_end(self)

    def rbegin(self):
        return _sys_model_task.IntVector_rbegin(self)

    def rend(self):
        return _sys_model_task.IntVector_rend(self)

    def clear(self):
        return _sys_model_task.IntVector_clear(self)

    def get_allocator(self):
        return _sys_model_task.IntVector_get_allocator(self)

    def pop_back(self):
        return _sys_model_task.IntVector_pop_back(self)

    def erase(self, *args):
        return _sys_model_task.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _sys_model_task.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sys_model_task.IntVector_push_back(self, x)

    def front(self):
        return _sys_model_task.IntVector_front(self)

    def back(self):
        return _sys_model_task.IntVector_back(self)

    def assign(self, n, x):
        return _sys_model_task.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _sys_model_task.IntVector_resize(self, *args)

    def insert(self, *args):
        return _sys_model_task.IntVector_insert(self, *args)

    def reserve(self, n):
        return _sys_model_task.IntVector_reserve(self, n)

    def capacity(self):
        return _sys_model_task.IntVector_capacity(self)
    __swig_destroy__ = _sys_model_task.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _sys_model_task.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sys_model_task.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sys_model_task.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _sys_model_task.DoubleVector___bool__(self)

    def __len__(self):
        return _sys_model_task.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _sys_model_task.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sys_model_task.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sys_model_task.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sys_model_task.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sys_model_task.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sys_model_task.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _sys_model_task.DoubleVector_pop(self)

    def append(self, x):
        return _sys_model_task.DoubleVector_append(self, x)

    def empty(self):
        return _sys_model_task.DoubleVector_empty(self)

    def size(self):
        return _sys_model_task.DoubleVector_size(self)

    def swap(self, v):
        return _sys_model_task.DoubleVector_swap(self, v)

    def begin(self):
        return _sys_model_task.DoubleVector_begin(self)

    def end(self):
        return _sys_model_task.DoubleVector_end(self)

    def rbegin(self):
        return _sys_model_task.DoubleVector_rbegin(self)

    def rend(self):
        return _sys_model_task.DoubleVector_rend(self)

    def clear(self):
        return _sys_model_task.DoubleVector_clear(self)

    def get_allocator(self):
        return _sys_model_task.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _sys_model_task.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _sys_model_task.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _sys_model_task.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sys_model_task.DoubleVector_push_back(self, x)

    def front(self):
        return _sys_model_task.DoubleVector_front(self)

    def back(self):
        return _sys_model_task.DoubleVector_back(self)

    def assign(self, n, x):
        return _sys_model_task.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _sys_model_task.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _sys_model_task.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _sys_model_task.DoubleVector_reserve(self, n)

    def capacity(self):
        return _sys_model_task.DoubleVector_capacity(self)
    __swig_destroy__ = _sys_model_task.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _sys_model_task.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sys_model_task.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sys_model_task.StringVector___nonzero__(self)

    def __bool__(self):
        return _sys_model_task.StringVector___bool__(self)

    def __len__(self):
        return _sys_model_task.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _sys_model_task.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sys_model_task.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sys_model_task.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sys_model_task.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sys_model_task.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sys_model_task.StringVector___setitem__(self, *args)

    def pop(self):
        return _sys_model_task.StringVector_pop(self)

    def append(self, x):
        return _sys_model_task.StringVector_append(self, x)

    def empty(self):
        return _sys_model_task.StringVector_empty(self)

    def size(self):
        return _sys_model_task.StringVector_size(self)

    def swap(self, v):
        return _sys_model_task.StringVector_swap(self, v)

    def begin(self):
        return _sys_model_task.StringVector_begin(self)

    def end(self):
        return _sys_model_task.StringVector_end(self)

    def rbegin(self):
        return _sys_model_task.StringVector_rbegin(self)

    def rend(self):
        return _sys_model_task.StringVector_rend(self)

    def clear(self):
        return _sys_model_task.StringVector_clear(self)

    def get_allocator(self):
        return _sys_model_task.StringVector_get_allocator(self)

    def pop_back(self):
        return _sys_model_task.StringVector_pop_back(self)

    def erase(self, *args):
        return _sys_model_task.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _sys_model_task.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sys_model_task.StringVector_push_back(self, x)

    def front(self):
        return _sys_model_task.StringVector_front(self)

    def back(self):
        return _sys_model_task.StringVector_back(self)

    def assign(self, n, x):
        return _sys_model_task.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _sys_model_task.StringVector_resize(self, *args)

    def insert(self, *args):
        return _sys_model_task.StringVector_insert(self, *args)

    def reserve(self, n):
        return _sys_model_task.StringVector_reserve(self, n)

    def capacity(self):
        return _sys_model_task.StringVector_capacity(self)
    __swig_destroy__ = _sys_model_task.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _sys_model_task.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sys_model_task.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sys_model_task.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _sys_model_task.ConstCharVector___bool__(self)

    def __len__(self):
        return _sys_model_task.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _sys_model_task.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sys_model_task.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sys_model_task.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sys_model_task.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sys_model_task.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sys_model_task.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _sys_model_task.ConstCharVector_pop(self)

    def append(self, x):
        return _sys_model_task.ConstCharVector_append(self, x)

    def empty(self):
        return _sys_model_task.ConstCharVector_empty(self)

    def size(self):
        return _sys_model_task.ConstCharVector_size(self)

    def swap(self, v):
        return _sys_model_task.ConstCharVector_swap(self, v)

    def begin(self):
        return _sys_model_task.ConstCharVector_begin(self)

    def end(self):
        return _sys_model_task.ConstCharVector_end(self)

    def rbegin(self):
        return _sys_model_task.ConstCharVector_rbegin(self)

    def rend(self):
        return _sys_model_task.ConstCharVector_rend(self)

    def clear(self):
        return _sys_model_task.ConstCharVector_clear(self)

    def get_allocator(self):
        return _sys_model_task.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _sys_model_task.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _sys_model_task.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _sys_model_task.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sys_model_task.ConstCharVector_push_back(self, x)

    def front(self):
        return _sys_model_task.ConstCharVector_front(self)

    def back(self):
        return _sys_model_task.ConstCharVector_back(self)

    def assign(self, n, x):
        return _sys_model_task.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _sys_model_task.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _sys_model_task.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _sys_model_task.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _sys_model_task.ConstCharVector_capacity(self)
    __swig_destroy__ = _sys_model_task.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _sys_model_task.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sys_model_task.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sys_model_task.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _sys_model_task.SysModel_SelfInit(self)

    def CrossInit(self):
        return _sys_model_task.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _sys_model_task.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _sys_model_task.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _sys_model_task.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _sys_model_task.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _sys_model_task.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_sys_model_task.SysModel_ModelTag_get, _sys_model_task.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _sys_model_task.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _sys_model_task.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_sys_model_task.SysModel_CallCounts_get, _sys_model_task.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _sys_model_task.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _sys_model_task.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_sys_model_task.SysModel_RNGSeed_get, _sys_model_task.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _sys_model_task.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _sys_model_task.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_sys_model_task.SysModel_moduleID_get, _sys_model_task.SysModel_moduleID_set)
SysModel_swigregister = _sys_model_task.SysModel_swigregister
SysModel_swigregister(SysModel)

class ModelPriorityPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPriorityPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPriorityPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CurrentModelPriority"] = _sys_model_task.ModelPriorityPair_CurrentModelPriority_set
    __swig_getmethods__["CurrentModelPriority"] = _sys_model_task.ModelPriorityPair_CurrentModelPriority_get
    if _newclass:
        CurrentModelPriority = _swig_property(_sys_model_task.ModelPriorityPair_CurrentModelPriority_get, _sys_model_task.ModelPriorityPair_CurrentModelPriority_set)
    __swig_setmethods__["ModelPtr"] = _sys_model_task.ModelPriorityPair_ModelPtr_set
    __swig_getmethods__["ModelPtr"] = _sys_model_task.ModelPriorityPair_ModelPtr_get
    if _newclass:
        ModelPtr = _swig_property(_sys_model_task.ModelPriorityPair_ModelPtr_get, _sys_model_task.ModelPriorityPair_ModelPtr_set)

    def __init__(self):
        this = _sys_model_task.new_ModelPriorityPair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sys_model_task.delete_ModelPriorityPair
    __del__ = lambda self: None
ModelPriorityPair_swigregister = _sys_model_task.ModelPriorityPair_swigregister
ModelPriorityPair_swigregister(ModelPriorityPair)

class SysModelTask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModelTask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModelTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sys_model_task.new_SysModelTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sys_model_task.delete_SysModelTask
    __del__ = lambda self: None

    def AddNewObject(self, NewModel, Priority=-1):
        return _sys_model_task.SysModelTask_AddNewObject(self, NewModel, Priority)

    def SelfInitTaskList(self):
        return _sys_model_task.SysModelTask_SelfInitTaskList(self)

    def CrossInitTaskList(self):
        return _sys_model_task.SysModelTask_CrossInitTaskList(self)

    def ExecuteTaskList(self, CurrentSimTime):
        return _sys_model_task.SysModelTask_ExecuteTaskList(self, CurrentSimTime)

    def ResetTaskList(self, CurrentSimTime):
        return _sys_model_task.SysModelTask_ResetTaskList(self, CurrentSimTime)

    def ResetTask(self):
        return _sys_model_task.SysModelTask_ResetTask(self)

    def enableTask(self):
        return _sys_model_task.SysModelTask_enableTask(self)

    def disableTask(self):
        return _sys_model_task.SysModelTask_disableTask(self)

    def updatePeriod(self, newPeriod):
        return _sys_model_task.SysModelTask_updatePeriod(self, newPeriod)
    __swig_setmethods__["TaskModels"] = _sys_model_task.SysModelTask_TaskModels_set
    __swig_getmethods__["TaskModels"] = _sys_model_task.SysModelTask_TaskModels_get
    if _newclass:
        TaskModels = _swig_property(_sys_model_task.SysModelTask_TaskModels_get, _sys_model_task.SysModelTask_TaskModels_set)
    __swig_setmethods__["TaskName"] = _sys_model_task.SysModelTask_TaskName_set
    __swig_getmethods__["TaskName"] = _sys_model_task.SysModelTask_TaskName_get
    if _newclass:
        TaskName = _swig_property(_sys_model_task.SysModelTask_TaskName_get, _sys_model_task.SysModelTask_TaskName_set)
    __swig_setmethods__["NextStartTime"] = _sys_model_task.SysModelTask_NextStartTime_set
    __swig_getmethods__["NextStartTime"] = _sys_model_task.SysModelTask_NextStartTime_get
    if _newclass:
        NextStartTime = _swig_property(_sys_model_task.SysModelTask_NextStartTime_get, _sys_model_task.SysModelTask_NextStartTime_set)
    __swig_setmethods__["NextPickupTime"] = _sys_model_task.SysModelTask_NextPickupTime_set
    __swig_getmethods__["NextPickupTime"] = _sys_model_task.SysModelTask_NextPickupTime_get
    if _newclass:
        NextPickupTime = _swig_property(_sys_model_task.SysModelTask_NextPickupTime_get, _sys_model_task.SysModelTask_NextPickupTime_set)
    __swig_setmethods__["TaskPeriod"] = _sys_model_task.SysModelTask_TaskPeriod_set
    __swig_getmethods__["TaskPeriod"] = _sys_model_task.SysModelTask_TaskPeriod_get
    if _newclass:
        TaskPeriod = _swig_property(_sys_model_task.SysModelTask_TaskPeriod_get, _sys_model_task.SysModelTask_TaskPeriod_set)
    __swig_setmethods__["PickupDelay"] = _sys_model_task.SysModelTask_PickupDelay_set
    __swig_getmethods__["PickupDelay"] = _sys_model_task.SysModelTask_PickupDelay_get
    if _newclass:
        PickupDelay = _swig_property(_sys_model_task.SysModelTask_PickupDelay_get, _sys_model_task.SysModelTask_PickupDelay_set)
    __swig_setmethods__["FirstTaskTime"] = _sys_model_task.SysModelTask_FirstTaskTime_set
    __swig_getmethods__["FirstTaskTime"] = _sys_model_task.SysModelTask_FirstTaskTime_get
    if _newclass:
        FirstTaskTime = _swig_property(_sys_model_task.SysModelTask_FirstTaskTime_get, _sys_model_task.SysModelTask_FirstTaskTime_set)
    __swig_setmethods__["taskActive"] = _sys_model_task.SysModelTask_taskActive_set
    __swig_getmethods__["taskActive"] = _sys_model_task.SysModelTask_taskActive_get
    if _newclass:
        taskActive = _swig_property(_sys_model_task.SysModelTask_taskActive_get, _sys_model_task.SysModelTask_taskActive_set)
SysModelTask_swigregister = _sys_model_task.SysModelTask_swigregister
SysModelTask_swigregister(SysModelTask)

# This file is compatible with both classic and new-style classes.


