# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coarse_sun_sensor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coarse_sun_sensor')
    _coarse_sun_sensor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coarse_sun_sensor', [dirname(__file__)])
        except ImportError:
            import _coarse_sun_sensor
            return _coarse_sun_sensor
        try:
            _mod = imp.load_module('_coarse_sun_sensor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coarse_sun_sensor = swig_import_helper()
    del swig_import_helper
else:
    import _coarse_sun_sensor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coarse_sun_sensor.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _coarse_sun_sensor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _coarse_sun_sensor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _coarse_sun_sensor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _coarse_sun_sensor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _coarse_sun_sensor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _coarse_sun_sensor.SwigPyIterator_copy(self)

    def next(self):
        return _coarse_sun_sensor.SwigPyIterator_next(self)

    def __next__(self):
        return _coarse_sun_sensor.SwigPyIterator___next__(self)

    def previous(self):
        return _coarse_sun_sensor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _coarse_sun_sensor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _coarse_sun_sensor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _coarse_sun_sensor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _coarse_sun_sensor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _coarse_sun_sensor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _coarse_sun_sensor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _coarse_sun_sensor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _coarse_sun_sensor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _coarse_sun_sensor.new_doubleArray(nelements)
new_doubleArray = _coarse_sun_sensor.new_doubleArray

def delete_doubleArray(ary):
    return _coarse_sun_sensor.delete_doubleArray(ary)
delete_doubleArray = _coarse_sun_sensor.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _coarse_sun_sensor.doubleArray_getitem(ary, index)
doubleArray_getitem = _coarse_sun_sensor.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _coarse_sun_sensor.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _coarse_sun_sensor.doubleArray_setitem

def new_longArray(nelements):
    return _coarse_sun_sensor.new_longArray(nelements)
new_longArray = _coarse_sun_sensor.new_longArray

def delete_longArray(ary):
    return _coarse_sun_sensor.delete_longArray(ary)
delete_longArray = _coarse_sun_sensor.delete_longArray

def longArray_getitem(ary, index):
    return _coarse_sun_sensor.longArray_getitem(ary, index)
longArray_getitem = _coarse_sun_sensor.longArray_getitem

def longArray_setitem(ary, index, value):
    return _coarse_sun_sensor.longArray_setitem(ary, index, value)
longArray_setitem = _coarse_sun_sensor.longArray_setitem

def new_intArray(nelements):
    return _coarse_sun_sensor.new_intArray(nelements)
new_intArray = _coarse_sun_sensor.new_intArray

def delete_intArray(ary):
    return _coarse_sun_sensor.delete_intArray(ary)
delete_intArray = _coarse_sun_sensor.delete_intArray

def intArray_getitem(ary, index):
    return _coarse_sun_sensor.intArray_getitem(ary, index)
intArray_getitem = _coarse_sun_sensor.intArray_getitem

def intArray_setitem(ary, index, value):
    return _coarse_sun_sensor.intArray_setitem(ary, index, value)
intArray_setitem = _coarse_sun_sensor.intArray_setitem

def new_shortArray(nelements):
    return _coarse_sun_sensor.new_shortArray(nelements)
new_shortArray = _coarse_sun_sensor.new_shortArray

def delete_shortArray(ary):
    return _coarse_sun_sensor.delete_shortArray(ary)
delete_shortArray = _coarse_sun_sensor.delete_shortArray

def shortArray_getitem(ary, index):
    return _coarse_sun_sensor.shortArray_getitem(ary, index)
shortArray_getitem = _coarse_sun_sensor.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _coarse_sun_sensor.shortArray_setitem(ary, index, value)
shortArray_setitem = _coarse_sun_sensor.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _coarse_sun_sensor.new_boolArray(nelements)
new_boolArray = _coarse_sun_sensor.new_boolArray

def delete_boolArray(ary):
    return _coarse_sun_sensor.delete_boolArray(ary)
delete_boolArray = _coarse_sun_sensor.delete_boolArray

def boolArray_getitem(ary, index):
    return _coarse_sun_sensor.boolArray_getitem(ary, index)
boolArray_getitem = _coarse_sun_sensor.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _coarse_sun_sensor.boolArray_setitem(ary, index, value)
boolArray_setitem = _coarse_sun_sensor.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.IntVector___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.IntVector___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.IntVector___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.IntVector_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.IntVector_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.IntVector_empty(self)

    def size(self):
        return _coarse_sun_sensor.IntVector_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.IntVector_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.IntVector_begin(self)

    def end(self):
        return _coarse_sun_sensor.IntVector_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.IntVector_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.IntVector_rend(self)

    def clear(self):
        return _coarse_sun_sensor.IntVector_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.IntVector_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.IntVector_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.IntVector_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.IntVector_front(self)

    def back(self):
        return _coarse_sun_sensor.IntVector_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.IntVector_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.IntVector_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.IntVector_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.IntVector_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _coarse_sun_sensor.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.DoubleVector___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.DoubleVector_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.DoubleVector_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.DoubleVector_empty(self)

    def size(self):
        return _coarse_sun_sensor.DoubleVector_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.DoubleVector_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.DoubleVector_begin(self)

    def end(self):
        return _coarse_sun_sensor.DoubleVector_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.DoubleVector_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.DoubleVector_rend(self)

    def clear(self):
        return _coarse_sun_sensor.DoubleVector_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.DoubleVector_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.DoubleVector_front(self)

    def back(self):
        return _coarse_sun_sensor.DoubleVector_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.DoubleVector_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.DoubleVector_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _coarse_sun_sensor.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.StringVector___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.StringVector___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.StringVector___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.StringVector_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.StringVector_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.StringVector_empty(self)

    def size(self):
        return _coarse_sun_sensor.StringVector_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.StringVector_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.StringVector_begin(self)

    def end(self):
        return _coarse_sun_sensor.StringVector_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.StringVector_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.StringVector_rend(self)

    def clear(self):
        return _coarse_sun_sensor.StringVector_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.StringVector_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.StringVector_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.StringVector_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.StringVector_front(self)

    def back(self):
        return _coarse_sun_sensor.StringVector_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.StringVector_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.StringVector_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.StringVector_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.StringVector_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _coarse_sun_sensor.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.StringSet___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.StringSet___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.StringSet___len__(self)

    def append(self, x):
        return _coarse_sun_sensor.StringSet_append(self, x)

    def __contains__(self, x):
        return _coarse_sun_sensor.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _coarse_sun_sensor.StringSet___getitem__(self, i)

    def add(self, x):
        return _coarse_sun_sensor.StringSet_add(self, x)

    def discard(self, x):
        return _coarse_sun_sensor.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _coarse_sun_sensor.StringSet_empty(self)

    def size(self):
        return _coarse_sun_sensor.StringSet_size(self)

    def clear(self):
        return _coarse_sun_sensor.StringSet_clear(self)

    def swap(self, v):
        return _coarse_sun_sensor.StringSet_swap(self, v)

    def count(self, x):
        return _coarse_sun_sensor.StringSet_count(self, x)

    def begin(self):
        return _coarse_sun_sensor.StringSet_begin(self)

    def end(self):
        return _coarse_sun_sensor.StringSet_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.StringSet_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.StringSet_rend(self)

    def erase(self, *args):
        return _coarse_sun_sensor.StringSet_erase(self, *args)

    def find(self, x):
        return _coarse_sun_sensor.StringSet_find(self, x)

    def lower_bound(self, x):
        return _coarse_sun_sensor.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _coarse_sun_sensor.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _coarse_sun_sensor.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _coarse_sun_sensor.StringSet_insert(self, __x)
    __swig_destroy__ = _coarse_sun_sensor.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _coarse_sun_sensor.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.intSet___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.intSet___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.intSet___len__(self)

    def append(self, x):
        return _coarse_sun_sensor.intSet_append(self, x)

    def __contains__(self, x):
        return _coarse_sun_sensor.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _coarse_sun_sensor.intSet___getitem__(self, i)

    def add(self, x):
        return _coarse_sun_sensor.intSet_add(self, x)

    def discard(self, x):
        return _coarse_sun_sensor.intSet_discard(self, x)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _coarse_sun_sensor.intSet_empty(self)

    def size(self):
        return _coarse_sun_sensor.intSet_size(self)

    def clear(self):
        return _coarse_sun_sensor.intSet_clear(self)

    def swap(self, v):
        return _coarse_sun_sensor.intSet_swap(self, v)

    def count(self, x):
        return _coarse_sun_sensor.intSet_count(self, x)

    def begin(self):
        return _coarse_sun_sensor.intSet_begin(self)

    def end(self):
        return _coarse_sun_sensor.intSet_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.intSet_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.intSet_rend(self)

    def erase(self, *args):
        return _coarse_sun_sensor.intSet_erase(self, *args)

    def find(self, x):
        return _coarse_sun_sensor.intSet_find(self, x)

    def lower_bound(self, x):
        return _coarse_sun_sensor.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _coarse_sun_sensor.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _coarse_sun_sensor.intSet_equal_range(self, x)

    def insert(self, __x):
        return _coarse_sun_sensor.intSet_insert(self, __x)
    __swig_destroy__ = _coarse_sun_sensor.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _coarse_sun_sensor.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.ConstCharVector___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.ConstCharVector_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.ConstCharVector_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.ConstCharVector_empty(self)

    def size(self):
        return _coarse_sun_sensor.ConstCharVector_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.ConstCharVector_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.ConstCharVector_begin(self)

    def end(self):
        return _coarse_sun_sensor.ConstCharVector_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.ConstCharVector_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.ConstCharVector_rend(self)

    def clear(self):
        return _coarse_sun_sensor.ConstCharVector_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.ConstCharVector_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.ConstCharVector_front(self)

    def back(self):
        return _coarse_sun_sensor.ConstCharVector_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.ConstCharVector_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _coarse_sun_sensor.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.MultiArray___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.MultiArray___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.MultiArray___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.MultiArray_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.MultiArray_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.MultiArray_empty(self)

    def size(self):
        return _coarse_sun_sensor.MultiArray_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.MultiArray_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.MultiArray_begin(self)

    def end(self):
        return _coarse_sun_sensor.MultiArray_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.MultiArray_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.MultiArray_rend(self)

    def clear(self):
        return _coarse_sun_sensor.MultiArray_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.MultiArray_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.MultiArray_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.MultiArray_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.MultiArray_front(self)

    def back(self):
        return _coarse_sun_sensor.MultiArray_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.MultiArray_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.MultiArray_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _coarse_sun_sensor.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class CSSVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _coarse_sun_sensor.CSSVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _coarse_sun_sensor.CSSVector___nonzero__(self)

    def __bool__(self):
        return _coarse_sun_sensor.CSSVector___bool__(self)

    def __len__(self):
        return _coarse_sun_sensor.CSSVector___len__(self)

    def __getslice__(self, i, j):
        return _coarse_sun_sensor.CSSVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _coarse_sun_sensor.CSSVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _coarse_sun_sensor.CSSVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _coarse_sun_sensor.CSSVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _coarse_sun_sensor.CSSVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _coarse_sun_sensor.CSSVector___setitem__(self, *args)

    def pop(self):
        return _coarse_sun_sensor.CSSVector_pop(self)

    def append(self, x):
        return _coarse_sun_sensor.CSSVector_append(self, x)

    def empty(self):
        return _coarse_sun_sensor.CSSVector_empty(self)

    def size(self):
        return _coarse_sun_sensor.CSSVector_size(self)

    def swap(self, v):
        return _coarse_sun_sensor.CSSVector_swap(self, v)

    def begin(self):
        return _coarse_sun_sensor.CSSVector_begin(self)

    def end(self):
        return _coarse_sun_sensor.CSSVector_end(self)

    def rbegin(self):
        return _coarse_sun_sensor.CSSVector_rbegin(self)

    def rend(self):
        return _coarse_sun_sensor.CSSVector_rend(self)

    def clear(self):
        return _coarse_sun_sensor.CSSVector_clear(self)

    def get_allocator(self):
        return _coarse_sun_sensor.CSSVector_get_allocator(self)

    def pop_back(self):
        return _coarse_sun_sensor.CSSVector_pop_back(self)

    def erase(self, *args):
        return _coarse_sun_sensor.CSSVector_erase(self, *args)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_CSSVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _coarse_sun_sensor.CSSVector_push_back(self, x)

    def front(self):
        return _coarse_sun_sensor.CSSVector_front(self)

    def back(self):
        return _coarse_sun_sensor.CSSVector_back(self)

    def assign(self, n, x):
        return _coarse_sun_sensor.CSSVector_assign(self, n, x)

    def resize(self, *args):
        return _coarse_sun_sensor.CSSVector_resize(self, *args)

    def insert(self, *args):
        return _coarse_sun_sensor.CSSVector_insert(self, *args)

    def reserve(self, n):
        return _coarse_sun_sensor.CSSVector_reserve(self, n)

    def capacity(self):
        return _coarse_sun_sensor.CSSVector_capacity(self)
    __swig_destroy__ = _coarse_sun_sensor.delete_CSSVector
    __del__ = lambda self: None
CSSVector_swigregister = _coarse_sun_sensor.CSSVector_swigregister
CSSVector_swigregister(CSSVector)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _coarse_sun_sensor.SysModel_SelfInit(self)

    def CrossInit(self):
        return _coarse_sun_sensor.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _coarse_sun_sensor.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _coarse_sun_sensor.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _coarse_sun_sensor.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _coarse_sun_sensor.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _coarse_sun_sensor.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_coarse_sun_sensor.SysModel_ModelTag_get, _coarse_sun_sensor.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _coarse_sun_sensor.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _coarse_sun_sensor.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_coarse_sun_sensor.SysModel_CallCounts_get, _coarse_sun_sensor.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _coarse_sun_sensor.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _coarse_sun_sensor.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_coarse_sun_sensor.SysModel_RNGSeed_get, _coarse_sun_sensor.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _coarse_sun_sensor.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _coarse_sun_sensor.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_coarse_sun_sensor.SysModel_moduleID_get, _coarse_sun_sensor.SysModel_moduleID_set)
SysModel_swigregister = _coarse_sun_sensor.SysModel_swigregister
SysModel_swigregister(SysModel)

CSSFAULT_OFF = _coarse_sun_sensor.CSSFAULT_OFF
CSSFAULT_STUCK_CURRENT = _coarse_sun_sensor.CSSFAULT_STUCK_CURRENT
CSSFAULT_STUCK_MAX = _coarse_sun_sensor.CSSFAULT_STUCK_MAX
CSSFAULT_STUCK_RAND = _coarse_sun_sensor.CSSFAULT_STUCK_RAND
CSSFAULT_STUCK = _coarse_sun_sensor.CSSFAULT_STUCK
CSSFAULT_RAND = _coarse_sun_sensor.CSSFAULT_RAND
MAX_CSSFAULT = _coarse_sun_sensor.MAX_CSSFAULT
class CoarseSunSensor(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoarseSunSensor, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoarseSunSensor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coarse_sun_sensor.delete_CoarseSunSensor
    __del__ = lambda self: None

    def CrossInit(self):
        return _coarse_sun_sensor.CoarseSunSensor_CrossInit(self)

    def SelfInit(self):
        return _coarse_sun_sensor.CoarseSunSensor_SelfInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _coarse_sun_sensor.CoarseSunSensor_UpdateState(self, CurrentSimNanos)

    def setUnitDirectionVectorWithPerturbation(self, cssThetaPerturb, cssPhiPerturb):
        return _coarse_sun_sensor.CoarseSunSensor_setUnitDirectionVectorWithPerturbation(self, cssThetaPerturb, cssPhiPerturb)

    def setBodyToPlatformDCM(self, yaw, pitch, roll):
        return _coarse_sun_sensor.CoarseSunSensor_setBodyToPlatformDCM(self, yaw, pitch, roll)

    def readInputMessages(self):
        return _coarse_sun_sensor.CoarseSunSensor_readInputMessages(self)

    def computeSunData(self):
        return _coarse_sun_sensor.CoarseSunSensor_computeSunData(self)

    def computeTrueOutput(self):
        return _coarse_sun_sensor.CoarseSunSensor_computeTrueOutput(self)

    def applySensorErrors(self):
        return _coarse_sun_sensor.CoarseSunSensor_applySensorErrors(self)

    def scaleSensorValues(self):
        return _coarse_sun_sensor.CoarseSunSensor_scaleSensorValues(self)

    def applySaturation(self):
        return _coarse_sun_sensor.CoarseSunSensor_applySaturation(self)

    def writeOutputMessages(self, Clock):
        return _coarse_sun_sensor.CoarseSunSensor_writeOutputMessages(self, Clock)
    __swig_setmethods__["sunInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_sunInMsgName_set
    __swig_getmethods__["sunInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_sunInMsgName_get
    if _newclass:
        sunInMsgName = _swig_property(_coarse_sun_sensor.CoarseSunSensor_sunInMsgName_get, _coarse_sun_sensor.CoarseSunSensor_sunInMsgName_set)
    __swig_setmethods__["stateInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_stateInMsgName_set
    __swig_getmethods__["stateInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_stateInMsgName_get
    if _newclass:
        stateInMsgName = _swig_property(_coarse_sun_sensor.CoarseSunSensor_stateInMsgName_get, _coarse_sun_sensor.CoarseSunSensor_stateInMsgName_set)
    __swig_setmethods__["cssDataOutMsgName"] = _coarse_sun_sensor.CoarseSunSensor_cssDataOutMsgName_set
    __swig_getmethods__["cssDataOutMsgName"] = _coarse_sun_sensor.CoarseSunSensor_cssDataOutMsgName_get
    if _newclass:
        cssDataOutMsgName = _swig_property(_coarse_sun_sensor.CoarseSunSensor_cssDataOutMsgName_get, _coarse_sun_sensor.CoarseSunSensor_cssDataOutMsgName_set)
    __swig_setmethods__["sunEclipseInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_sunEclipseInMsgName_set
    __swig_getmethods__["sunEclipseInMsgName"] = _coarse_sun_sensor.CoarseSunSensor_sunEclipseInMsgName_get
    if _newclass:
        sunEclipseInMsgName = _swig_property(_coarse_sun_sensor.CoarseSunSensor_sunEclipseInMsgName_get, _coarse_sun_sensor.CoarseSunSensor_sunEclipseInMsgName_set)
    __swig_setmethods__["faultState"] = _coarse_sun_sensor.CoarseSunSensor_faultState_set
    __swig_getmethods__["faultState"] = _coarse_sun_sensor.CoarseSunSensor_faultState_get
    if _newclass:
        faultState = _swig_property(_coarse_sun_sensor.CoarseSunSensor_faultState_get, _coarse_sun_sensor.CoarseSunSensor_faultState_set)
    __swig_setmethods__["theta"] = _coarse_sun_sensor.CoarseSunSensor_theta_set
    __swig_getmethods__["theta"] = _coarse_sun_sensor.CoarseSunSensor_theta_get
    if _newclass:
        theta = _swig_property(_coarse_sun_sensor.CoarseSunSensor_theta_get, _coarse_sun_sensor.CoarseSunSensor_theta_set)
    __swig_setmethods__["phi"] = _coarse_sun_sensor.CoarseSunSensor_phi_set
    __swig_getmethods__["phi"] = _coarse_sun_sensor.CoarseSunSensor_phi_get
    if _newclass:
        phi = _swig_property(_coarse_sun_sensor.CoarseSunSensor_phi_get, _coarse_sun_sensor.CoarseSunSensor_phi_set)
    __swig_setmethods__["B2P321Angles"] = _coarse_sun_sensor.CoarseSunSensor_B2P321Angles_set
    __swig_getmethods__["B2P321Angles"] = _coarse_sun_sensor.CoarseSunSensor_B2P321Angles_get
    if _newclass:
        B2P321Angles = _swig_property(_coarse_sun_sensor.CoarseSunSensor_B2P321Angles_get, _coarse_sun_sensor.CoarseSunSensor_B2P321Angles_set)
    __swig_setmethods__["dcm_PB"] = _coarse_sun_sensor.CoarseSunSensor_dcm_PB_set
    __swig_getmethods__["dcm_PB"] = _coarse_sun_sensor.CoarseSunSensor_dcm_PB_get
    if _newclass:
        dcm_PB = _swig_property(_coarse_sun_sensor.CoarseSunSensor_dcm_PB_get, _coarse_sun_sensor.CoarseSunSensor_dcm_PB_set)
    __swig_setmethods__["nHat_B"] = _coarse_sun_sensor.CoarseSunSensor_nHat_B_set
    __swig_getmethods__["nHat_B"] = _coarse_sun_sensor.CoarseSunSensor_nHat_B_get
    if _newclass:
        nHat_B = _swig_property(_coarse_sun_sensor.CoarseSunSensor_nHat_B_get, _coarse_sun_sensor.CoarseSunSensor_nHat_B_set)
    __swig_setmethods__["sHat_B"] = _coarse_sun_sensor.CoarseSunSensor_sHat_B_set
    __swig_getmethods__["sHat_B"] = _coarse_sun_sensor.CoarseSunSensor_sHat_B_get
    if _newclass:
        sHat_B = _swig_property(_coarse_sun_sensor.CoarseSunSensor_sHat_B_get, _coarse_sun_sensor.CoarseSunSensor_sHat_B_set)
    __swig_setmethods__["directValue"] = _coarse_sun_sensor.CoarseSunSensor_directValue_set
    __swig_getmethods__["directValue"] = _coarse_sun_sensor.CoarseSunSensor_directValue_get
    if _newclass:
        directValue = _swig_property(_coarse_sun_sensor.CoarseSunSensor_directValue_get, _coarse_sun_sensor.CoarseSunSensor_directValue_set)
    __swig_setmethods__["albedoValue"] = _coarse_sun_sensor.CoarseSunSensor_albedoValue_set
    __swig_getmethods__["albedoValue"] = _coarse_sun_sensor.CoarseSunSensor_albedoValue_get
    if _newclass:
        albedoValue = _swig_property(_coarse_sun_sensor.CoarseSunSensor_albedoValue_get, _coarse_sun_sensor.CoarseSunSensor_albedoValue_set)
    __swig_setmethods__["scaleFactor"] = _coarse_sun_sensor.CoarseSunSensor_scaleFactor_set
    __swig_getmethods__["scaleFactor"] = _coarse_sun_sensor.CoarseSunSensor_scaleFactor_get
    if _newclass:
        scaleFactor = _swig_property(_coarse_sun_sensor.CoarseSunSensor_scaleFactor_get, _coarse_sun_sensor.CoarseSunSensor_scaleFactor_set)
    __swig_setmethods__["sensedValue"] = _coarse_sun_sensor.CoarseSunSensor_sensedValue_set
    __swig_getmethods__["sensedValue"] = _coarse_sun_sensor.CoarseSunSensor_sensedValue_get
    if _newclass:
        sensedValue = _swig_property(_coarse_sun_sensor.CoarseSunSensor_sensedValue_get, _coarse_sun_sensor.CoarseSunSensor_sensedValue_set)
    __swig_setmethods__["trueValue"] = _coarse_sun_sensor.CoarseSunSensor_trueValue_set
    __swig_getmethods__["trueValue"] = _coarse_sun_sensor.CoarseSunSensor_trueValue_get
    if _newclass:
        trueValue = _swig_property(_coarse_sun_sensor.CoarseSunSensor_trueValue_get, _coarse_sun_sensor.CoarseSunSensor_trueValue_set)
    __swig_setmethods__["kellyFactor"] = _coarse_sun_sensor.CoarseSunSensor_kellyFactor_set
    __swig_getmethods__["kellyFactor"] = _coarse_sun_sensor.CoarseSunSensor_kellyFactor_get
    if _newclass:
        kellyFactor = _swig_property(_coarse_sun_sensor.CoarseSunSensor_kellyFactor_get, _coarse_sun_sensor.CoarseSunSensor_kellyFactor_set)
    __swig_setmethods__["fov"] = _coarse_sun_sensor.CoarseSunSensor_fov_set
    __swig_getmethods__["fov"] = _coarse_sun_sensor.CoarseSunSensor_fov_get
    if _newclass:
        fov = _swig_property(_coarse_sun_sensor.CoarseSunSensor_fov_get, _coarse_sun_sensor.CoarseSunSensor_fov_set)
    __swig_setmethods__["r_B"] = _coarse_sun_sensor.CoarseSunSensor_r_B_set
    __swig_getmethods__["r_B"] = _coarse_sun_sensor.CoarseSunSensor_r_B_get
    if _newclass:
        r_B = _swig_property(_coarse_sun_sensor.CoarseSunSensor_r_B_get, _coarse_sun_sensor.CoarseSunSensor_r_B_set)
    __swig_setmethods__["senBias"] = _coarse_sun_sensor.CoarseSunSensor_senBias_set
    __swig_getmethods__["senBias"] = _coarse_sun_sensor.CoarseSunSensor_senBias_get
    if _newclass:
        senBias = _swig_property(_coarse_sun_sensor.CoarseSunSensor_senBias_get, _coarse_sun_sensor.CoarseSunSensor_senBias_set)
    __swig_setmethods__["senNoiseStd"] = _coarse_sun_sensor.CoarseSunSensor_senNoiseStd_set
    __swig_getmethods__["senNoiseStd"] = _coarse_sun_sensor.CoarseSunSensor_senNoiseStd_get
    if _newclass:
        senNoiseStd = _swig_property(_coarse_sun_sensor.CoarseSunSensor_senNoiseStd_get, _coarse_sun_sensor.CoarseSunSensor_senNoiseStd_set)
    __swig_setmethods__["outputBufferCount"] = _coarse_sun_sensor.CoarseSunSensor_outputBufferCount_set
    __swig_getmethods__["outputBufferCount"] = _coarse_sun_sensor.CoarseSunSensor_outputBufferCount_get
    if _newclass:
        outputBufferCount = _swig_property(_coarse_sun_sensor.CoarseSunSensor_outputBufferCount_get, _coarse_sun_sensor.CoarseSunSensor_outputBufferCount_set)
    __swig_setmethods__["maxOutput"] = _coarse_sun_sensor.CoarseSunSensor_maxOutput_set
    __swig_getmethods__["maxOutput"] = _coarse_sun_sensor.CoarseSunSensor_maxOutput_get
    if _newclass:
        maxOutput = _swig_property(_coarse_sun_sensor.CoarseSunSensor_maxOutput_get, _coarse_sun_sensor.CoarseSunSensor_maxOutput_set)
    __swig_setmethods__["minOutput"] = _coarse_sun_sensor.CoarseSunSensor_minOutput_set
    __swig_getmethods__["minOutput"] = _coarse_sun_sensor.CoarseSunSensor_minOutput_get
    if _newclass:
        minOutput = _swig_property(_coarse_sun_sensor.CoarseSunSensor_minOutput_get, _coarse_sun_sensor.CoarseSunSensor_minOutput_set)
    __swig_setmethods__["walkBounds"] = _coarse_sun_sensor.CoarseSunSensor_walkBounds_set
    __swig_getmethods__["walkBounds"] = _coarse_sun_sensor.CoarseSunSensor_walkBounds_get
    if _newclass:
        walkBounds = _swig_property(_coarse_sun_sensor.CoarseSunSensor_walkBounds_get, _coarse_sun_sensor.CoarseSunSensor_walkBounds_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_CoarseSunSensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CoarseSunSensor_swigregister = _coarse_sun_sensor.CoarseSunSensor_swigregister
CoarseSunSensor_swigregister(CoarseSunSensor)

class CSSConstellation(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSConstellation, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSSConstellation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _coarse_sun_sensor.delete_CSSConstellation
    __del__ = lambda self: None

    def CrossInit(self):
        return _coarse_sun_sensor.CSSConstellation_CrossInit(self)

    def SelfInit(self):
        return _coarse_sun_sensor.CSSConstellation_SelfInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _coarse_sun_sensor.CSSConstellation_UpdateState(self, CurrentSimNanos)

    def appendCSS(self, newSensor):
        return _coarse_sun_sensor.CSSConstellation_appendCSS(self, newSensor)
    __swig_setmethods__["outputBufferCount"] = _coarse_sun_sensor.CSSConstellation_outputBufferCount_set
    __swig_getmethods__["outputBufferCount"] = _coarse_sun_sensor.CSSConstellation_outputBufferCount_get
    if _newclass:
        outputBufferCount = _swig_property(_coarse_sun_sensor.CSSConstellation_outputBufferCount_get, _coarse_sun_sensor.CSSConstellation_outputBufferCount_set)
    __swig_setmethods__["outputConstellationMessage"] = _coarse_sun_sensor.CSSConstellation_outputConstellationMessage_set
    __swig_getmethods__["outputConstellationMessage"] = _coarse_sun_sensor.CSSConstellation_outputConstellationMessage_get
    if _newclass:
        outputConstellationMessage = _swig_property(_coarse_sun_sensor.CSSConstellation_outputConstellationMessage_get, _coarse_sun_sensor.CSSConstellation_outputConstellationMessage_set)
    __swig_setmethods__["outputConstID"] = _coarse_sun_sensor.CSSConstellation_outputConstID_set
    __swig_getmethods__["outputConstID"] = _coarse_sun_sensor.CSSConstellation_outputConstID_get
    if _newclass:
        outputConstID = _swig_property(_coarse_sun_sensor.CSSConstellation_outputConstID_get, _coarse_sun_sensor.CSSConstellation_outputConstID_set)
    __swig_setmethods__["sensorList"] = _coarse_sun_sensor.CSSConstellation_sensorList_set
    __swig_getmethods__["sensorList"] = _coarse_sun_sensor.CSSConstellation_sensorList_get
    if _newclass:
        sensorList = _swig_property(_coarse_sun_sensor.CSSConstellation_sensorList_get, _coarse_sun_sensor.CSSConstellation_sensorList_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_CSSConstellation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CSSConstellation_swigregister = _coarse_sun_sensor.CSSConstellation_swigregister
CSSConstellation_swigregister(CSSConstellation)

class SCPlusStatesSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPlusStatesSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPlusStatesSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_r_BN_N_set
    __swig_getmethods__["r_BN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_r_BN_N_get
    if _newclass:
        r_BN_N = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_r_BN_N_get, _coarse_sun_sensor.SCPlusStatesSimMsg_r_BN_N_set)
    __swig_setmethods__["v_BN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_v_BN_N_set
    __swig_getmethods__["v_BN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_v_BN_N_get
    if _newclass:
        v_BN_N = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_v_BN_N_get, _coarse_sun_sensor.SCPlusStatesSimMsg_v_BN_N_set)
    __swig_setmethods__["r_CN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_r_CN_N_set
    __swig_getmethods__["r_CN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_r_CN_N_get
    if _newclass:
        r_CN_N = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_r_CN_N_get, _coarse_sun_sensor.SCPlusStatesSimMsg_r_CN_N_set)
    __swig_setmethods__["v_CN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_v_CN_N_set
    __swig_getmethods__["v_CN_N"] = _coarse_sun_sensor.SCPlusStatesSimMsg_v_CN_N_get
    if _newclass:
        v_CN_N = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_v_CN_N_get, _coarse_sun_sensor.SCPlusStatesSimMsg_v_CN_N_set)
    __swig_setmethods__["sigma_BN"] = _coarse_sun_sensor.SCPlusStatesSimMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _coarse_sun_sensor.SCPlusStatesSimMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_sigma_BN_get, _coarse_sun_sensor.SCPlusStatesSimMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_omega_BN_B_get, _coarse_sun_sensor.SCPlusStatesSimMsg_omega_BN_B_set)
    __swig_setmethods__["omegaDot_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_omegaDot_BN_B_set
    __swig_getmethods__["omegaDot_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_omegaDot_BN_B_get
    if _newclass:
        omegaDot_BN_B = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_omegaDot_BN_B_get, _coarse_sun_sensor.SCPlusStatesSimMsg_omegaDot_BN_B_set)
    __swig_setmethods__["TotalAccumDVBdy"] = _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDVBdy_set
    __swig_getmethods__["TotalAccumDVBdy"] = _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDVBdy_get
    if _newclass:
        TotalAccumDVBdy = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDVBdy_get, _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDVBdy_set)
    __swig_setmethods__["TotalAccumDV_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDV_BN_B_set
    __swig_getmethods__["TotalAccumDV_BN_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDV_BN_B_get
    if _newclass:
        TotalAccumDV_BN_B = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDV_BN_B_get, _coarse_sun_sensor.SCPlusStatesSimMsg_TotalAccumDV_BN_B_set)
    __swig_setmethods__["nonConservativeAccelpntB_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_set
    __swig_getmethods__["nonConservativeAccelpntB_B"] = _coarse_sun_sensor.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_get
    if _newclass:
        nonConservativeAccelpntB_B = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_get, _coarse_sun_sensor.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_set)
    __swig_setmethods__["MRPSwitchCount"] = _coarse_sun_sensor.SCPlusStatesSimMsg_MRPSwitchCount_set
    __swig_getmethods__["MRPSwitchCount"] = _coarse_sun_sensor.SCPlusStatesSimMsg_MRPSwitchCount_get
    if _newclass:
        MRPSwitchCount = _swig_property(_coarse_sun_sensor.SCPlusStatesSimMsg_MRPSwitchCount_get, _coarse_sun_sensor.SCPlusStatesSimMsg_MRPSwitchCount_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_SCPlusStatesSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_SCPlusStatesSimMsg
    __del__ = lambda self: None
SCPlusStatesSimMsg_swigregister = _coarse_sun_sensor.SCPlusStatesSimMsg_swigregister
SCPlusStatesSimMsg_swigregister(SCPlusStatesSimMsg)

MAX_BODY_NAME_LENGTH = _coarse_sun_sensor.MAX_BODY_NAME_LENGTH
class SpicePlanetStateSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpicePlanetStateSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpicePlanetStateSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["J2000Current"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J2000Current_set
    __swig_getmethods__["J2000Current"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J2000Current_get
    if _newclass:
        J2000Current = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_J2000Current_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_J2000Current_set)
    __swig_setmethods__["PositionVector"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_PositionVector_set
    __swig_getmethods__["PositionVector"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_PositionVector_get
    if _newclass:
        PositionVector = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_PositionVector_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_PositionVector_set)
    __swig_setmethods__["VelocityVector"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_VelocityVector_set
    __swig_getmethods__["VelocityVector"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_VelocityVector_get
    if _newclass:
        VelocityVector = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_VelocityVector_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_VelocityVector_set)
    __swig_setmethods__["J20002Pfix"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_set
    __swig_getmethods__["J20002Pfix"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_get
    if _newclass:
        J20002Pfix = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_set)
    __swig_setmethods__["J20002Pfix_dot"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_dot_set
    __swig_getmethods__["J20002Pfix_dot"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_dot_get
    if _newclass:
        J20002Pfix_dot = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_dot_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_J20002Pfix_dot_set)
    __swig_setmethods__["computeOrient"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_computeOrient_set
    __swig_getmethods__["computeOrient"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_computeOrient_get
    if _newclass:
        computeOrient = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_computeOrient_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_computeOrient_set)
    __swig_setmethods__["PlanetName"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_PlanetName_set
    __swig_getmethods__["PlanetName"] = _coarse_sun_sensor.SpicePlanetStateSimMsg_PlanetName_get
    if _newclass:
        PlanetName = _swig_property(_coarse_sun_sensor.SpicePlanetStateSimMsg_PlanetName_get, _coarse_sun_sensor.SpicePlanetStateSimMsg_PlanetName_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_SpicePlanetStateSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_SpicePlanetStateSimMsg
    __del__ = lambda self: None
SpicePlanetStateSimMsg_swigregister = _coarse_sun_sensor.SpicePlanetStateSimMsg_swigregister
SpicePlanetStateSimMsg_swigregister(SpicePlanetStateSimMsg)

class CSSRawDataSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSRawDataSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSRawDataSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OutputData"] = _coarse_sun_sensor.CSSRawDataSimMsg_OutputData_set
    __swig_getmethods__["OutputData"] = _coarse_sun_sensor.CSSRawDataSimMsg_OutputData_get
    if _newclass:
        OutputData = _swig_property(_coarse_sun_sensor.CSSRawDataSimMsg_OutputData_get, _coarse_sun_sensor.CSSRawDataSimMsg_OutputData_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_CSSRawDataSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_CSSRawDataSimMsg
    __del__ = lambda self: None
CSSRawDataSimMsg_swigregister = _coarse_sun_sensor.CSSRawDataSimMsg_swigregister
CSSRawDataSimMsg_swigregister(CSSRawDataSimMsg)

class EclipseSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EclipseSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EclipseSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shadowFactor"] = _coarse_sun_sensor.EclipseSimMsg_shadowFactor_set
    __swig_getmethods__["shadowFactor"] = _coarse_sun_sensor.EclipseSimMsg_shadowFactor_get
    if _newclass:
        shadowFactor = _swig_property(_coarse_sun_sensor.EclipseSimMsg_shadowFactor_get, _coarse_sun_sensor.EclipseSimMsg_shadowFactor_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_EclipseSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_EclipseSimMsg
    __del__ = lambda self: None
EclipseSimMsg_swigregister = _coarse_sun_sensor.EclipseSimMsg_swigregister
EclipseSimMsg_swigregister(EclipseSimMsg)

class CSSArraySensorIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSArraySensorIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSArraySensorIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CosValue"] = _coarse_sun_sensor.CSSArraySensorIntMsg_CosValue_set
    __swig_getmethods__["CosValue"] = _coarse_sun_sensor.CSSArraySensorIntMsg_CosValue_get
    if _newclass:
        CosValue = _swig_property(_coarse_sun_sensor.CSSArraySensorIntMsg_CosValue_get, _coarse_sun_sensor.CSSArraySensorIntMsg_CosValue_set)

    def __init__(self, *args):
        this = _coarse_sun_sensor.new_CSSArraySensorIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _coarse_sun_sensor.delete_CSSArraySensorIntMsg
    __del__ = lambda self: None
CSSArraySensorIntMsg_swigregister = _coarse_sun_sensor.CSSArraySensorIntMsg_swigregister
CSSArraySensorIntMsg_swigregister(CSSArraySensorIntMsg)

sizeof_CSSRawDataSimMsg = _coarse_sun_sensor.sizeof_CSSRawDataSimMsg
sizeof_EclipseSimMsg = _coarse_sun_sensor.sizeof_EclipseSimMsg
sizeof_CSSArraySensorIntMsg = _coarse_sun_sensor.sizeof_CSSArraySensorIntMsg
sizeof_SpicePlanetStateSimMsg = _coarse_sun_sensor.sizeof_SpicePlanetStateSimMsg
sizeof_SCPlusStatesSimMsg = _coarse_sun_sensor.sizeof_SCPlusStatesSimMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


