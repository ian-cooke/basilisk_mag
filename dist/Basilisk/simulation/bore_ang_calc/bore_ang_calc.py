# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bore_ang_calc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bore_ang_calc')
    _bore_ang_calc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bore_ang_calc', [dirname(__file__)])
        except ImportError:
            import _bore_ang_calc
            return _bore_ang_calc
        try:
            _mod = imp.load_module('_bore_ang_calc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bore_ang_calc = swig_import_helper()
    del swig_import_helper
else:
    import _bore_ang_calc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bore_ang_calc.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _bore_ang_calc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bore_ang_calc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bore_ang_calc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bore_ang_calc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bore_ang_calc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bore_ang_calc.SwigPyIterator_copy(self)

    def next(self):
        return _bore_ang_calc.SwigPyIterator_next(self)

    def __next__(self):
        return _bore_ang_calc.SwigPyIterator___next__(self)

    def previous(self):
        return _bore_ang_calc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bore_ang_calc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bore_ang_calc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bore_ang_calc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bore_ang_calc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bore_ang_calc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bore_ang_calc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bore_ang_calc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _bore_ang_calc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _bore_ang_calc.new_doubleArray(nelements)
new_doubleArray = _bore_ang_calc.new_doubleArray

def delete_doubleArray(ary):
    return _bore_ang_calc.delete_doubleArray(ary)
delete_doubleArray = _bore_ang_calc.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _bore_ang_calc.doubleArray_getitem(ary, index)
doubleArray_getitem = _bore_ang_calc.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _bore_ang_calc.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _bore_ang_calc.doubleArray_setitem

def new_longArray(nelements):
    return _bore_ang_calc.new_longArray(nelements)
new_longArray = _bore_ang_calc.new_longArray

def delete_longArray(ary):
    return _bore_ang_calc.delete_longArray(ary)
delete_longArray = _bore_ang_calc.delete_longArray

def longArray_getitem(ary, index):
    return _bore_ang_calc.longArray_getitem(ary, index)
longArray_getitem = _bore_ang_calc.longArray_getitem

def longArray_setitem(ary, index, value):
    return _bore_ang_calc.longArray_setitem(ary, index, value)
longArray_setitem = _bore_ang_calc.longArray_setitem

def new_intArray(nelements):
    return _bore_ang_calc.new_intArray(nelements)
new_intArray = _bore_ang_calc.new_intArray

def delete_intArray(ary):
    return _bore_ang_calc.delete_intArray(ary)
delete_intArray = _bore_ang_calc.delete_intArray

def intArray_getitem(ary, index):
    return _bore_ang_calc.intArray_getitem(ary, index)
intArray_getitem = _bore_ang_calc.intArray_getitem

def intArray_setitem(ary, index, value):
    return _bore_ang_calc.intArray_setitem(ary, index, value)
intArray_setitem = _bore_ang_calc.intArray_setitem

def new_shortArray(nelements):
    return _bore_ang_calc.new_shortArray(nelements)
new_shortArray = _bore_ang_calc.new_shortArray

def delete_shortArray(ary):
    return _bore_ang_calc.delete_shortArray(ary)
delete_shortArray = _bore_ang_calc.delete_shortArray

def shortArray_getitem(ary, index):
    return _bore_ang_calc.shortArray_getitem(ary, index)
shortArray_getitem = _bore_ang_calc.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _bore_ang_calc.shortArray_setitem(ary, index, value)
shortArray_setitem = _bore_ang_calc.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _bore_ang_calc.new_boolArray(nelements)
new_boolArray = _bore_ang_calc.new_boolArray

def delete_boolArray(ary):
    return _bore_ang_calc.delete_boolArray(ary)
delete_boolArray = _bore_ang_calc.delete_boolArray

def boolArray_getitem(ary, index):
    return _bore_ang_calc.boolArray_getitem(ary, index)
boolArray_getitem = _bore_ang_calc.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _bore_ang_calc.boolArray_setitem(ary, index, value)
boolArray_setitem = _bore_ang_calc.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.IntVector___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.IntVector___bool__(self)

    def __len__(self):
        return _bore_ang_calc.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _bore_ang_calc.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bore_ang_calc.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bore_ang_calc.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bore_ang_calc.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bore_ang_calc.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bore_ang_calc.IntVector___setitem__(self, *args)

    def pop(self):
        return _bore_ang_calc.IntVector_pop(self)

    def append(self, x):
        return _bore_ang_calc.IntVector_append(self, x)

    def empty(self):
        return _bore_ang_calc.IntVector_empty(self)

    def size(self):
        return _bore_ang_calc.IntVector_size(self)

    def swap(self, v):
        return _bore_ang_calc.IntVector_swap(self, v)

    def begin(self):
        return _bore_ang_calc.IntVector_begin(self)

    def end(self):
        return _bore_ang_calc.IntVector_end(self)

    def rbegin(self):
        return _bore_ang_calc.IntVector_rbegin(self)

    def rend(self):
        return _bore_ang_calc.IntVector_rend(self)

    def clear(self):
        return _bore_ang_calc.IntVector_clear(self)

    def get_allocator(self):
        return _bore_ang_calc.IntVector_get_allocator(self)

    def pop_back(self):
        return _bore_ang_calc.IntVector_pop_back(self)

    def erase(self, *args):
        return _bore_ang_calc.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _bore_ang_calc.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _bore_ang_calc.IntVector_push_back(self, x)

    def front(self):
        return _bore_ang_calc.IntVector_front(self)

    def back(self):
        return _bore_ang_calc.IntVector_back(self)

    def assign(self, n, x):
        return _bore_ang_calc.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _bore_ang_calc.IntVector_resize(self, *args)

    def insert(self, *args):
        return _bore_ang_calc.IntVector_insert(self, *args)

    def reserve(self, n):
        return _bore_ang_calc.IntVector_reserve(self, n)

    def capacity(self):
        return _bore_ang_calc.IntVector_capacity(self)
    __swig_destroy__ = _bore_ang_calc.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _bore_ang_calc.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.DoubleVector___bool__(self)

    def __len__(self):
        return _bore_ang_calc.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _bore_ang_calc.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bore_ang_calc.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bore_ang_calc.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bore_ang_calc.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bore_ang_calc.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bore_ang_calc.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _bore_ang_calc.DoubleVector_pop(self)

    def append(self, x):
        return _bore_ang_calc.DoubleVector_append(self, x)

    def empty(self):
        return _bore_ang_calc.DoubleVector_empty(self)

    def size(self):
        return _bore_ang_calc.DoubleVector_size(self)

    def swap(self, v):
        return _bore_ang_calc.DoubleVector_swap(self, v)

    def begin(self):
        return _bore_ang_calc.DoubleVector_begin(self)

    def end(self):
        return _bore_ang_calc.DoubleVector_end(self)

    def rbegin(self):
        return _bore_ang_calc.DoubleVector_rbegin(self)

    def rend(self):
        return _bore_ang_calc.DoubleVector_rend(self)

    def clear(self):
        return _bore_ang_calc.DoubleVector_clear(self)

    def get_allocator(self):
        return _bore_ang_calc.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _bore_ang_calc.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _bore_ang_calc.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _bore_ang_calc.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _bore_ang_calc.DoubleVector_push_back(self, x)

    def front(self):
        return _bore_ang_calc.DoubleVector_front(self)

    def back(self):
        return _bore_ang_calc.DoubleVector_back(self)

    def assign(self, n, x):
        return _bore_ang_calc.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _bore_ang_calc.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _bore_ang_calc.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _bore_ang_calc.DoubleVector_reserve(self, n)

    def capacity(self):
        return _bore_ang_calc.DoubleVector_capacity(self)
    __swig_destroy__ = _bore_ang_calc.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _bore_ang_calc.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.StringVector___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.StringVector___bool__(self)

    def __len__(self):
        return _bore_ang_calc.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _bore_ang_calc.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bore_ang_calc.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bore_ang_calc.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bore_ang_calc.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bore_ang_calc.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bore_ang_calc.StringVector___setitem__(self, *args)

    def pop(self):
        return _bore_ang_calc.StringVector_pop(self)

    def append(self, x):
        return _bore_ang_calc.StringVector_append(self, x)

    def empty(self):
        return _bore_ang_calc.StringVector_empty(self)

    def size(self):
        return _bore_ang_calc.StringVector_size(self)

    def swap(self, v):
        return _bore_ang_calc.StringVector_swap(self, v)

    def begin(self):
        return _bore_ang_calc.StringVector_begin(self)

    def end(self):
        return _bore_ang_calc.StringVector_end(self)

    def rbegin(self):
        return _bore_ang_calc.StringVector_rbegin(self)

    def rend(self):
        return _bore_ang_calc.StringVector_rend(self)

    def clear(self):
        return _bore_ang_calc.StringVector_clear(self)

    def get_allocator(self):
        return _bore_ang_calc.StringVector_get_allocator(self)

    def pop_back(self):
        return _bore_ang_calc.StringVector_pop_back(self)

    def erase(self, *args):
        return _bore_ang_calc.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _bore_ang_calc.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _bore_ang_calc.StringVector_push_back(self, x)

    def front(self):
        return _bore_ang_calc.StringVector_front(self)

    def back(self):
        return _bore_ang_calc.StringVector_back(self)

    def assign(self, n, x):
        return _bore_ang_calc.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _bore_ang_calc.StringVector_resize(self, *args)

    def insert(self, *args):
        return _bore_ang_calc.StringVector_insert(self, *args)

    def reserve(self, n):
        return _bore_ang_calc.StringVector_reserve(self, n)

    def capacity(self):
        return _bore_ang_calc.StringVector_capacity(self)
    __swig_destroy__ = _bore_ang_calc.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _bore_ang_calc.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.StringSet___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.StringSet___bool__(self)

    def __len__(self):
        return _bore_ang_calc.StringSet___len__(self)

    def append(self, x):
        return _bore_ang_calc.StringSet_append(self, x)

    def __contains__(self, x):
        return _bore_ang_calc.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _bore_ang_calc.StringSet___getitem__(self, i)

    def add(self, x):
        return _bore_ang_calc.StringSet_add(self, x)

    def discard(self, x):
        return _bore_ang_calc.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _bore_ang_calc.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _bore_ang_calc.StringSet_empty(self)

    def size(self):
        return _bore_ang_calc.StringSet_size(self)

    def clear(self):
        return _bore_ang_calc.StringSet_clear(self)

    def swap(self, v):
        return _bore_ang_calc.StringSet_swap(self, v)

    def count(self, x):
        return _bore_ang_calc.StringSet_count(self, x)

    def begin(self):
        return _bore_ang_calc.StringSet_begin(self)

    def end(self):
        return _bore_ang_calc.StringSet_end(self)

    def rbegin(self):
        return _bore_ang_calc.StringSet_rbegin(self)

    def rend(self):
        return _bore_ang_calc.StringSet_rend(self)

    def erase(self, *args):
        return _bore_ang_calc.StringSet_erase(self, *args)

    def find(self, x):
        return _bore_ang_calc.StringSet_find(self, x)

    def lower_bound(self, x):
        return _bore_ang_calc.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _bore_ang_calc.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _bore_ang_calc.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _bore_ang_calc.StringSet_insert(self, __x)
    __swig_destroy__ = _bore_ang_calc.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _bore_ang_calc.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.intSet___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.intSet___bool__(self)

    def __len__(self):
        return _bore_ang_calc.intSet___len__(self)

    def append(self, x):
        return _bore_ang_calc.intSet_append(self, x)

    def __contains__(self, x):
        return _bore_ang_calc.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _bore_ang_calc.intSet___getitem__(self, i)

    def add(self, x):
        return _bore_ang_calc.intSet_add(self, x)

    def discard(self, x):
        return _bore_ang_calc.intSet_discard(self, x)

    def __init__(self, *args):
        this = _bore_ang_calc.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _bore_ang_calc.intSet_empty(self)

    def size(self):
        return _bore_ang_calc.intSet_size(self)

    def clear(self):
        return _bore_ang_calc.intSet_clear(self)

    def swap(self, v):
        return _bore_ang_calc.intSet_swap(self, v)

    def count(self, x):
        return _bore_ang_calc.intSet_count(self, x)

    def begin(self):
        return _bore_ang_calc.intSet_begin(self)

    def end(self):
        return _bore_ang_calc.intSet_end(self)

    def rbegin(self):
        return _bore_ang_calc.intSet_rbegin(self)

    def rend(self):
        return _bore_ang_calc.intSet_rend(self)

    def erase(self, *args):
        return _bore_ang_calc.intSet_erase(self, *args)

    def find(self, x):
        return _bore_ang_calc.intSet_find(self, x)

    def lower_bound(self, x):
        return _bore_ang_calc.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _bore_ang_calc.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _bore_ang_calc.intSet_equal_range(self, x)

    def insert(self, __x):
        return _bore_ang_calc.intSet_insert(self, __x)
    __swig_destroy__ = _bore_ang_calc.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _bore_ang_calc.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.ConstCharVector___bool__(self)

    def __len__(self):
        return _bore_ang_calc.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _bore_ang_calc.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bore_ang_calc.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bore_ang_calc.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bore_ang_calc.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bore_ang_calc.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bore_ang_calc.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _bore_ang_calc.ConstCharVector_pop(self)

    def append(self, x):
        return _bore_ang_calc.ConstCharVector_append(self, x)

    def empty(self):
        return _bore_ang_calc.ConstCharVector_empty(self)

    def size(self):
        return _bore_ang_calc.ConstCharVector_size(self)

    def swap(self, v):
        return _bore_ang_calc.ConstCharVector_swap(self, v)

    def begin(self):
        return _bore_ang_calc.ConstCharVector_begin(self)

    def end(self):
        return _bore_ang_calc.ConstCharVector_end(self)

    def rbegin(self):
        return _bore_ang_calc.ConstCharVector_rbegin(self)

    def rend(self):
        return _bore_ang_calc.ConstCharVector_rend(self)

    def clear(self):
        return _bore_ang_calc.ConstCharVector_clear(self)

    def get_allocator(self):
        return _bore_ang_calc.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _bore_ang_calc.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _bore_ang_calc.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _bore_ang_calc.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _bore_ang_calc.ConstCharVector_push_back(self, x)

    def front(self):
        return _bore_ang_calc.ConstCharVector_front(self)

    def back(self):
        return _bore_ang_calc.ConstCharVector_back(self)

    def assign(self, n, x):
        return _bore_ang_calc.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _bore_ang_calc.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _bore_ang_calc.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _bore_ang_calc.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _bore_ang_calc.ConstCharVector_capacity(self)
    __swig_destroy__ = _bore_ang_calc.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _bore_ang_calc.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bore_ang_calc.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bore_ang_calc.MultiArray___nonzero__(self)

    def __bool__(self):
        return _bore_ang_calc.MultiArray___bool__(self)

    def __len__(self):
        return _bore_ang_calc.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _bore_ang_calc.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bore_ang_calc.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bore_ang_calc.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bore_ang_calc.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bore_ang_calc.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bore_ang_calc.MultiArray___setitem__(self, *args)

    def pop(self):
        return _bore_ang_calc.MultiArray_pop(self)

    def append(self, x):
        return _bore_ang_calc.MultiArray_append(self, x)

    def empty(self):
        return _bore_ang_calc.MultiArray_empty(self)

    def size(self):
        return _bore_ang_calc.MultiArray_size(self)

    def swap(self, v):
        return _bore_ang_calc.MultiArray_swap(self, v)

    def begin(self):
        return _bore_ang_calc.MultiArray_begin(self)

    def end(self):
        return _bore_ang_calc.MultiArray_end(self)

    def rbegin(self):
        return _bore_ang_calc.MultiArray_rbegin(self)

    def rend(self):
        return _bore_ang_calc.MultiArray_rend(self)

    def clear(self):
        return _bore_ang_calc.MultiArray_clear(self)

    def get_allocator(self):
        return _bore_ang_calc.MultiArray_get_allocator(self)

    def pop_back(self):
        return _bore_ang_calc.MultiArray_pop_back(self)

    def erase(self, *args):
        return _bore_ang_calc.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _bore_ang_calc.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _bore_ang_calc.MultiArray_push_back(self, x)

    def front(self):
        return _bore_ang_calc.MultiArray_front(self)

    def back(self):
        return _bore_ang_calc.MultiArray_back(self)

    def assign(self, n, x):
        return _bore_ang_calc.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _bore_ang_calc.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _bore_ang_calc.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _bore_ang_calc.MultiArray_reserve(self, n)

    def capacity(self):
        return _bore_ang_calc.MultiArray_capacity(self)
    __swig_destroy__ = _bore_ang_calc.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _bore_ang_calc.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class AngOffValuesSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngOffValuesSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngOffValuesSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["azimuth"] = _bore_ang_calc.AngOffValuesSimMsg_azimuth_set
    __swig_getmethods__["azimuth"] = _bore_ang_calc.AngOffValuesSimMsg_azimuth_get
    if _newclass:
        azimuth = _swig_property(_bore_ang_calc.AngOffValuesSimMsg_azimuth_get, _bore_ang_calc.AngOffValuesSimMsg_azimuth_set)
    __swig_setmethods__["missAngle"] = _bore_ang_calc.AngOffValuesSimMsg_missAngle_set
    __swig_getmethods__["missAngle"] = _bore_ang_calc.AngOffValuesSimMsg_missAngle_get
    if _newclass:
        missAngle = _swig_property(_bore_ang_calc.AngOffValuesSimMsg_missAngle_get, _bore_ang_calc.AngOffValuesSimMsg_missAngle_set)

    def __init__(self, *args):
        this = _bore_ang_calc.new_AngOffValuesSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bore_ang_calc.delete_AngOffValuesSimMsg
    __del__ = lambda self: None
AngOffValuesSimMsg_swigregister = _bore_ang_calc.AngOffValuesSimMsg_swigregister
AngOffValuesSimMsg_swigregister(AngOffValuesSimMsg)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bore_ang_calc.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bore_ang_calc.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _bore_ang_calc.SysModel_SelfInit(self)

    def CrossInit(self):
        return _bore_ang_calc.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _bore_ang_calc.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _bore_ang_calc.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _bore_ang_calc.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _bore_ang_calc.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _bore_ang_calc.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_bore_ang_calc.SysModel_ModelTag_get, _bore_ang_calc.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _bore_ang_calc.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _bore_ang_calc.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_bore_ang_calc.SysModel_CallCounts_get, _bore_ang_calc.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _bore_ang_calc.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _bore_ang_calc.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_bore_ang_calc.SysModel_RNGSeed_get, _bore_ang_calc.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _bore_ang_calc.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _bore_ang_calc.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_bore_ang_calc.SysModel_moduleID_get, _bore_ang_calc.SysModel_moduleID_set)
SysModel_swigregister = _bore_ang_calc.SysModel_swigregister
SysModel_swigregister(SysModel)

sizeof_BoreAngCalc = _bore_ang_calc.sizeof_BoreAngCalc
sizeof_AngOffValuesSimMsg = _bore_ang_calc.sizeof_AngOffValuesSimMsg
class BoreAngCalc(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoreAngCalc, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoreAngCalc, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _bore_ang_calc.delete_BoreAngCalc
    __del__ = lambda self: None

    def SelfInit(self):
        return _bore_ang_calc.BoreAngCalc_SelfInit(self)

    def CrossInit(self):
        return _bore_ang_calc.BoreAngCalc_CrossInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _bore_ang_calc.BoreAngCalc_UpdateState(self, CurrentSimNanos)

    def computeAxisPoint(self):
        return _bore_ang_calc.BoreAngCalc_computeAxisPoint(self)

    def computeOutputData(self):
        return _bore_ang_calc.BoreAngCalc_computeOutputData(self)

    def WriteOutputMessages(self, CurrentClock):
        return _bore_ang_calc.BoreAngCalc_WriteOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _bore_ang_calc.BoreAngCalc_ReadInputs(self)
    __swig_setmethods__["StateString"] = _bore_ang_calc.BoreAngCalc_StateString_set
    __swig_getmethods__["StateString"] = _bore_ang_calc.BoreAngCalc_StateString_get
    if _newclass:
        StateString = _swig_property(_bore_ang_calc.BoreAngCalc_StateString_get, _bore_ang_calc.BoreAngCalc_StateString_set)
    __swig_setmethods__["celBodyString"] = _bore_ang_calc.BoreAngCalc_celBodyString_set
    __swig_getmethods__["celBodyString"] = _bore_ang_calc.BoreAngCalc_celBodyString_get
    if _newclass:
        celBodyString = _swig_property(_bore_ang_calc.BoreAngCalc_celBodyString_get, _bore_ang_calc.BoreAngCalc_celBodyString_set)
    __swig_setmethods__["OutputDataString"] = _bore_ang_calc.BoreAngCalc_OutputDataString_set
    __swig_getmethods__["OutputDataString"] = _bore_ang_calc.BoreAngCalc_OutputDataString_get
    if _newclass:
        OutputDataString = _swig_property(_bore_ang_calc.BoreAngCalc_OutputDataString_get, _bore_ang_calc.BoreAngCalc_OutputDataString_set)
    __swig_setmethods__["OutputBufferCount"] = _bore_ang_calc.BoreAngCalc_OutputBufferCount_set
    __swig_getmethods__["OutputBufferCount"] = _bore_ang_calc.BoreAngCalc_OutputBufferCount_get
    if _newclass:
        OutputBufferCount = _swig_property(_bore_ang_calc.BoreAngCalc_OutputBufferCount_get, _bore_ang_calc.BoreAngCalc_OutputBufferCount_set)
    __swig_setmethods__["ReinitSelf"] = _bore_ang_calc.BoreAngCalc_ReinitSelf_set
    __swig_getmethods__["ReinitSelf"] = _bore_ang_calc.BoreAngCalc_ReinitSelf_get
    if _newclass:
        ReinitSelf = _swig_property(_bore_ang_calc.BoreAngCalc_ReinitSelf_get, _bore_ang_calc.BoreAngCalc_ReinitSelf_set)
    __swig_setmethods__["boreVec_B"] = _bore_ang_calc.BoreAngCalc_boreVec_B_set
    __swig_getmethods__["boreVec_B"] = _bore_ang_calc.BoreAngCalc_boreVec_B_get
    if _newclass:
        boreVec_B = _swig_property(_bore_ang_calc.BoreAngCalc_boreVec_B_get, _bore_ang_calc.BoreAngCalc_boreVec_B_set)
    __swig_setmethods__["boreVecPoint"] = _bore_ang_calc.BoreAngCalc_boreVecPoint_set
    __swig_getmethods__["boreVecPoint"] = _bore_ang_calc.BoreAngCalc_boreVecPoint_get
    if _newclass:
        boreVecPoint = _swig_property(_bore_ang_calc.BoreAngCalc_boreVecPoint_get, _bore_ang_calc.BoreAngCalc_boreVecPoint_set)
    __swig_setmethods__["boresightAng"] = _bore_ang_calc.BoreAngCalc_boresightAng_set
    __swig_getmethods__["boresightAng"] = _bore_ang_calc.BoreAngCalc_boresightAng_get
    if _newclass:
        boresightAng = _swig_property(_bore_ang_calc.BoreAngCalc_boresightAng_get, _bore_ang_calc.BoreAngCalc_boresightAng_set)
    __swig_setmethods__["inputsGood"] = _bore_ang_calc.BoreAngCalc_inputsGood_set
    __swig_getmethods__["inputsGood"] = _bore_ang_calc.BoreAngCalc_inputsGood_get
    if _newclass:
        inputsGood = _swig_property(_bore_ang_calc.BoreAngCalc_inputsGood_get, _bore_ang_calc.BoreAngCalc_inputsGood_set)

    def __init__(self, *args):
        this = _bore_ang_calc.new_BoreAngCalc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
BoreAngCalc_swigregister = _bore_ang_calc.BoreAngCalc_swigregister
BoreAngCalc_swigregister(BoreAngCalc)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


