# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gravityEffector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gravityEffector')
    _gravityEffector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gravityEffector', [dirname(__file__)])
        except ImportError:
            import _gravityEffector
            return _gravityEffector
        try:
            _mod = imp.load_module('_gravityEffector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gravityEffector = swig_import_helper()
    del swig_import_helper
else:
    import _gravityEffector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gravityEffector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gravityEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gravityEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gravityEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gravityEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gravityEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gravityEffector.SwigPyIterator_copy(self)

    def next(self):
        return _gravityEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _gravityEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _gravityEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gravityEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gravityEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gravityEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gravityEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gravityEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gravityEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gravityEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gravityEffector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _gravityEffector.new_doubleArray(nelements)
new_doubleArray = _gravityEffector.new_doubleArray

def delete_doubleArray(ary):
    return _gravityEffector.delete_doubleArray(ary)
delete_doubleArray = _gravityEffector.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _gravityEffector.doubleArray_getitem(ary, index)
doubleArray_getitem = _gravityEffector.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _gravityEffector.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _gravityEffector.doubleArray_setitem

def new_longArray(nelements):
    return _gravityEffector.new_longArray(nelements)
new_longArray = _gravityEffector.new_longArray

def delete_longArray(ary):
    return _gravityEffector.delete_longArray(ary)
delete_longArray = _gravityEffector.delete_longArray

def longArray_getitem(ary, index):
    return _gravityEffector.longArray_getitem(ary, index)
longArray_getitem = _gravityEffector.longArray_getitem

def longArray_setitem(ary, index, value):
    return _gravityEffector.longArray_setitem(ary, index, value)
longArray_setitem = _gravityEffector.longArray_setitem

def new_intArray(nelements):
    return _gravityEffector.new_intArray(nelements)
new_intArray = _gravityEffector.new_intArray

def delete_intArray(ary):
    return _gravityEffector.delete_intArray(ary)
delete_intArray = _gravityEffector.delete_intArray

def intArray_getitem(ary, index):
    return _gravityEffector.intArray_getitem(ary, index)
intArray_getitem = _gravityEffector.intArray_getitem

def intArray_setitem(ary, index, value):
    return _gravityEffector.intArray_setitem(ary, index, value)
intArray_setitem = _gravityEffector.intArray_setitem

def new_shortArray(nelements):
    return _gravityEffector.new_shortArray(nelements)
new_shortArray = _gravityEffector.new_shortArray

def delete_shortArray(ary):
    return _gravityEffector.delete_shortArray(ary)
delete_shortArray = _gravityEffector.delete_shortArray

def shortArray_getitem(ary, index):
    return _gravityEffector.shortArray_getitem(ary, index)
shortArray_getitem = _gravityEffector.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _gravityEffector.shortArray_setitem(ary, index, value)
shortArray_setitem = _gravityEffector.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _gravityEffector.new_boolArray(nelements)
new_boolArray = _gravityEffector.new_boolArray

def delete_boolArray(ary):
    return _gravityEffector.delete_boolArray(ary)
delete_boolArray = _gravityEffector.delete_boolArray

def boolArray_getitem(ary, index):
    return _gravityEffector.boolArray_getitem(ary, index)
boolArray_getitem = _gravityEffector.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _gravityEffector.boolArray_setitem(ary, index, value)
boolArray_setitem = _gravityEffector.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.IntVector___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.IntVector___bool__(self)

    def __len__(self):
        return _gravityEffector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.IntVector___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.IntVector_pop(self)

    def append(self, x):
        return _gravityEffector.IntVector_append(self, x)

    def empty(self):
        return _gravityEffector.IntVector_empty(self)

    def size(self):
        return _gravityEffector.IntVector_size(self)

    def swap(self, v):
        return _gravityEffector.IntVector_swap(self, v)

    def begin(self):
        return _gravityEffector.IntVector_begin(self)

    def end(self):
        return _gravityEffector.IntVector_end(self)

    def rbegin(self):
        return _gravityEffector.IntVector_rbegin(self)

    def rend(self):
        return _gravityEffector.IntVector_rend(self)

    def clear(self):
        return _gravityEffector.IntVector_clear(self)

    def get_allocator(self):
        return _gravityEffector.IntVector_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.IntVector_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.IntVector_push_back(self, x)

    def front(self):
        return _gravityEffector.IntVector_front(self)

    def back(self):
        return _gravityEffector.IntVector_back(self)

    def assign(self, n, x):
        return _gravityEffector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.IntVector_reserve(self, n)

    def capacity(self):
        return _gravityEffector.IntVector_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _gravityEffector.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.DoubleVector___bool__(self)

    def __len__(self):
        return _gravityEffector.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.DoubleVector_pop(self)

    def append(self, x):
        return _gravityEffector.DoubleVector_append(self, x)

    def empty(self):
        return _gravityEffector.DoubleVector_empty(self)

    def size(self):
        return _gravityEffector.DoubleVector_size(self)

    def swap(self, v):
        return _gravityEffector.DoubleVector_swap(self, v)

    def begin(self):
        return _gravityEffector.DoubleVector_begin(self)

    def end(self):
        return _gravityEffector.DoubleVector_end(self)

    def rbegin(self):
        return _gravityEffector.DoubleVector_rbegin(self)

    def rend(self):
        return _gravityEffector.DoubleVector_rend(self)

    def clear(self):
        return _gravityEffector.DoubleVector_clear(self)

    def get_allocator(self):
        return _gravityEffector.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.DoubleVector_push_back(self, x)

    def front(self):
        return _gravityEffector.DoubleVector_front(self)

    def back(self):
        return _gravityEffector.DoubleVector_back(self)

    def assign(self, n, x):
        return _gravityEffector.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.DoubleVector_reserve(self, n)

    def capacity(self):
        return _gravityEffector.DoubleVector_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _gravityEffector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.StringVector___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.StringVector___bool__(self)

    def __len__(self):
        return _gravityEffector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.StringVector___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.StringVector_pop(self)

    def append(self, x):
        return _gravityEffector.StringVector_append(self, x)

    def empty(self):
        return _gravityEffector.StringVector_empty(self)

    def size(self):
        return _gravityEffector.StringVector_size(self)

    def swap(self, v):
        return _gravityEffector.StringVector_swap(self, v)

    def begin(self):
        return _gravityEffector.StringVector_begin(self)

    def end(self):
        return _gravityEffector.StringVector_end(self)

    def rbegin(self):
        return _gravityEffector.StringVector_rbegin(self)

    def rend(self):
        return _gravityEffector.StringVector_rend(self)

    def clear(self):
        return _gravityEffector.StringVector_clear(self)

    def get_allocator(self):
        return _gravityEffector.StringVector_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.StringVector_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.StringVector_push_back(self, x)

    def front(self):
        return _gravityEffector.StringVector_front(self)

    def back(self):
        return _gravityEffector.StringVector_back(self)

    def assign(self, n, x):
        return _gravityEffector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.StringVector_reserve(self, n)

    def capacity(self):
        return _gravityEffector.StringVector_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _gravityEffector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.StringSet___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.StringSet___bool__(self)

    def __len__(self):
        return _gravityEffector.StringSet___len__(self)

    def append(self, x):
        return _gravityEffector.StringSet_append(self, x)

    def __contains__(self, x):
        return _gravityEffector.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _gravityEffector.StringSet___getitem__(self, i)

    def add(self, x):
        return _gravityEffector.StringSet_add(self, x)

    def discard(self, x):
        return _gravityEffector.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _gravityEffector.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gravityEffector.StringSet_empty(self)

    def size(self):
        return _gravityEffector.StringSet_size(self)

    def clear(self):
        return _gravityEffector.StringSet_clear(self)

    def swap(self, v):
        return _gravityEffector.StringSet_swap(self, v)

    def count(self, x):
        return _gravityEffector.StringSet_count(self, x)

    def begin(self):
        return _gravityEffector.StringSet_begin(self)

    def end(self):
        return _gravityEffector.StringSet_end(self)

    def rbegin(self):
        return _gravityEffector.StringSet_rbegin(self)

    def rend(self):
        return _gravityEffector.StringSet_rend(self)

    def erase(self, *args):
        return _gravityEffector.StringSet_erase(self, *args)

    def find(self, x):
        return _gravityEffector.StringSet_find(self, x)

    def lower_bound(self, x):
        return _gravityEffector.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _gravityEffector.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _gravityEffector.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _gravityEffector.StringSet_insert(self, __x)
    __swig_destroy__ = _gravityEffector.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _gravityEffector.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.intSet___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.intSet___bool__(self)

    def __len__(self):
        return _gravityEffector.intSet___len__(self)

    def append(self, x):
        return _gravityEffector.intSet_append(self, x)

    def __contains__(self, x):
        return _gravityEffector.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _gravityEffector.intSet___getitem__(self, i)

    def add(self, x):
        return _gravityEffector.intSet_add(self, x)

    def discard(self, x):
        return _gravityEffector.intSet_discard(self, x)

    def __init__(self, *args):
        this = _gravityEffector.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gravityEffector.intSet_empty(self)

    def size(self):
        return _gravityEffector.intSet_size(self)

    def clear(self):
        return _gravityEffector.intSet_clear(self)

    def swap(self, v):
        return _gravityEffector.intSet_swap(self, v)

    def count(self, x):
        return _gravityEffector.intSet_count(self, x)

    def begin(self):
        return _gravityEffector.intSet_begin(self)

    def end(self):
        return _gravityEffector.intSet_end(self)

    def rbegin(self):
        return _gravityEffector.intSet_rbegin(self)

    def rend(self):
        return _gravityEffector.intSet_rend(self)

    def erase(self, *args):
        return _gravityEffector.intSet_erase(self, *args)

    def find(self, x):
        return _gravityEffector.intSet_find(self, x)

    def lower_bound(self, x):
        return _gravityEffector.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _gravityEffector.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _gravityEffector.intSet_equal_range(self, x)

    def insert(self, __x):
        return _gravityEffector.intSet_insert(self, __x)
    __swig_destroy__ = _gravityEffector.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _gravityEffector.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.ConstCharVector___bool__(self)

    def __len__(self):
        return _gravityEffector.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.ConstCharVector_pop(self)

    def append(self, x):
        return _gravityEffector.ConstCharVector_append(self, x)

    def empty(self):
        return _gravityEffector.ConstCharVector_empty(self)

    def size(self):
        return _gravityEffector.ConstCharVector_size(self)

    def swap(self, v):
        return _gravityEffector.ConstCharVector_swap(self, v)

    def begin(self):
        return _gravityEffector.ConstCharVector_begin(self)

    def end(self):
        return _gravityEffector.ConstCharVector_end(self)

    def rbegin(self):
        return _gravityEffector.ConstCharVector_rbegin(self)

    def rend(self):
        return _gravityEffector.ConstCharVector_rend(self)

    def clear(self):
        return _gravityEffector.ConstCharVector_clear(self)

    def get_allocator(self):
        return _gravityEffector.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.ConstCharVector_push_back(self, x)

    def front(self):
        return _gravityEffector.ConstCharVector_front(self)

    def back(self):
        return _gravityEffector.ConstCharVector_back(self)

    def assign(self, n, x):
        return _gravityEffector.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _gravityEffector.ConstCharVector_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _gravityEffector.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.MultiArray___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.MultiArray___bool__(self)

    def __len__(self):
        return _gravityEffector.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.MultiArray___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.MultiArray_pop(self)

    def append(self, x):
        return _gravityEffector.MultiArray_append(self, x)

    def empty(self):
        return _gravityEffector.MultiArray_empty(self)

    def size(self):
        return _gravityEffector.MultiArray_size(self)

    def swap(self, v):
        return _gravityEffector.MultiArray_swap(self, v)

    def begin(self):
        return _gravityEffector.MultiArray_begin(self)

    def end(self):
        return _gravityEffector.MultiArray_end(self)

    def rbegin(self):
        return _gravityEffector.MultiArray_rbegin(self)

    def rend(self):
        return _gravityEffector.MultiArray_rend(self)

    def clear(self):
        return _gravityEffector.MultiArray_clear(self)

    def get_allocator(self):
        return _gravityEffector.MultiArray_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.MultiArray_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.MultiArray_push_back(self, x)

    def front(self):
        return _gravityEffector.MultiArray_front(self)

    def back(self):
        return _gravityEffector.MultiArray_back(self)

    def assign(self, n, x):
        return _gravityEffector.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.MultiArray_reserve(self, n)

    def capacity(self):
        return _gravityEffector.MultiArray_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _gravityEffector.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class DynamicEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gravityEffector.delete_DynamicEffector
    __del__ = lambda self: None

    def computeStateContribution(self, integTime):
        return _gravityEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _gravityEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _gravityEffector.DynamicEffector_computeForceTorque(self, integTime)
    __swig_setmethods__["stateDerivContribution"] = _gravityEffector.DynamicEffector_stateDerivContribution_set
    __swig_getmethods__["stateDerivContribution"] = _gravityEffector.DynamicEffector_stateDerivContribution_get
    if _newclass:
        stateDerivContribution = _swig_property(_gravityEffector.DynamicEffector_stateDerivContribution_get, _gravityEffector.DynamicEffector_stateDerivContribution_set)
    __swig_setmethods__["forceExternal_N"] = _gravityEffector.DynamicEffector_forceExternal_N_set
    __swig_getmethods__["forceExternal_N"] = _gravityEffector.DynamicEffector_forceExternal_N_get
    if _newclass:
        forceExternal_N = _swig_property(_gravityEffector.DynamicEffector_forceExternal_N_get, _gravityEffector.DynamicEffector_forceExternal_N_set)
    __swig_setmethods__["forceExternal_B"] = _gravityEffector.DynamicEffector_forceExternal_B_set
    __swig_getmethods__["forceExternal_B"] = _gravityEffector.DynamicEffector_forceExternal_B_get
    if _newclass:
        forceExternal_B = _swig_property(_gravityEffector.DynamicEffector_forceExternal_B_get, _gravityEffector.DynamicEffector_forceExternal_B_set)
    __swig_setmethods__["torqueExternalPntB_B"] = _gravityEffector.DynamicEffector_torqueExternalPntB_B_set
    __swig_getmethods__["torqueExternalPntB_B"] = _gravityEffector.DynamicEffector_torqueExternalPntB_B_get
    if _newclass:
        torqueExternalPntB_B = _swig_property(_gravityEffector.DynamicEffector_torqueExternalPntB_B_get, _gravityEffector.DynamicEffector_torqueExternalPntB_B_set)
DynamicEffector_swigregister = _gravityEffector.DynamicEffector_swigregister
DynamicEffector_swigregister(DynamicEffector)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _gravityEffector.StateData_state_set
    __swig_getmethods__["state"] = _gravityEffector.StateData_state_get
    if _newclass:
        state = _swig_property(_gravityEffector.StateData_state_get, _gravityEffector.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _gravityEffector.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _gravityEffector.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_gravityEffector.StateData_stateDeriv_get, _gravityEffector.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _gravityEffector.StateData_stateName_set
    __swig_getmethods__["stateName"] = _gravityEffector.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_gravityEffector.StateData_stateName_get, _gravityEffector.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _gravityEffector.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _gravityEffector.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_gravityEffector.StateData_stateEnabled_get, _gravityEffector.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _gravityEffector.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gravityEffector.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _gravityEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _gravityEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _gravityEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _gravityEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _gravityEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _gravityEffector.StateData_getName(self)

    def getRowSize(self):
        return _gravityEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _gravityEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _gravityEffector.StateData_isStateActive(self)

    def disable(self):
        return _gravityEffector.StateData_disable(self)

    def enable(self):
        return _gravityEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _gravityEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _gravityEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _gravityEffector.StateData___mul__(self, scaleFactor)
StateData_swigregister = _gravityEffector.StateData_swigregister
StateData_swigregister(StateData)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gravityEffector.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gravityEffector.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _gravityEffector.SysModel_SelfInit(self)

    def CrossInit(self):
        return _gravityEffector.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _gravityEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _gravityEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _gravityEffector.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _gravityEffector.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _gravityEffector.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_gravityEffector.SysModel_ModelTag_get, _gravityEffector.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _gravityEffector.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _gravityEffector.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_gravityEffector.SysModel_CallCounts_get, _gravityEffector.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _gravityEffector.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _gravityEffector.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_gravityEffector.SysModel_RNGSeed_get, _gravityEffector.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _gravityEffector.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _gravityEffector.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_gravityEffector.SysModel_moduleID_get, _gravityEffector.SysModel_moduleID_set)
SysModel_swigregister = _gravityEffector.SysModel_swigregister
SysModel_swigregister(SysModel)

class SphericalHarmonics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalHarmonics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalHarmonics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxDeg"] = _gravityEffector.SphericalHarmonics_maxDeg_set
    __swig_getmethods__["maxDeg"] = _gravityEffector.SphericalHarmonics_maxDeg_get
    if _newclass:
        maxDeg = _swig_property(_gravityEffector.SphericalHarmonics_maxDeg_get, _gravityEffector.SphericalHarmonics_maxDeg_set)
    __swig_setmethods__["radEquator"] = _gravityEffector.SphericalHarmonics_radEquator_set
    __swig_getmethods__["radEquator"] = _gravityEffector.SphericalHarmonics_radEquator_get
    if _newclass:
        radEquator = _swig_property(_gravityEffector.SphericalHarmonics_radEquator_get, _gravityEffector.SphericalHarmonics_radEquator_set)
    __swig_setmethods__["muBody"] = _gravityEffector.SphericalHarmonics_muBody_set
    __swig_getmethods__["muBody"] = _gravityEffector.SphericalHarmonics_muBody_get
    if _newclass:
        muBody = _swig_property(_gravityEffector.SphericalHarmonics_muBody_get, _gravityEffector.SphericalHarmonics_muBody_set)
    __swig_setmethods__["cBar"] = _gravityEffector.SphericalHarmonics_cBar_set
    __swig_getmethods__["cBar"] = _gravityEffector.SphericalHarmonics_cBar_get
    if _newclass:
        cBar = _swig_property(_gravityEffector.SphericalHarmonics_cBar_get, _gravityEffector.SphericalHarmonics_cBar_set)
    __swig_setmethods__["sBar"] = _gravityEffector.SphericalHarmonics_sBar_set
    __swig_getmethods__["sBar"] = _gravityEffector.SphericalHarmonics_sBar_get
    if _newclass:
        sBar = _swig_property(_gravityEffector.SphericalHarmonics_sBar_get, _gravityEffector.SphericalHarmonics_sBar_set)
    __swig_setmethods__["aBar"] = _gravityEffector.SphericalHarmonics_aBar_set
    __swig_getmethods__["aBar"] = _gravityEffector.SphericalHarmonics_aBar_get
    if _newclass:
        aBar = _swig_property(_gravityEffector.SphericalHarmonics_aBar_get, _gravityEffector.SphericalHarmonics_aBar_set)
    __swig_setmethods__["n1"] = _gravityEffector.SphericalHarmonics_n1_set
    __swig_getmethods__["n1"] = _gravityEffector.SphericalHarmonics_n1_get
    if _newclass:
        n1 = _swig_property(_gravityEffector.SphericalHarmonics_n1_get, _gravityEffector.SphericalHarmonics_n1_set)
    __swig_setmethods__["n2"] = _gravityEffector.SphericalHarmonics_n2_set
    __swig_getmethods__["n2"] = _gravityEffector.SphericalHarmonics_n2_get
    if _newclass:
        n2 = _swig_property(_gravityEffector.SphericalHarmonics_n2_get, _gravityEffector.SphericalHarmonics_n2_set)
    __swig_setmethods__["nQuot1"] = _gravityEffector.SphericalHarmonics_nQuot1_set
    __swig_getmethods__["nQuot1"] = _gravityEffector.SphericalHarmonics_nQuot1_get
    if _newclass:
        nQuot1 = _swig_property(_gravityEffector.SphericalHarmonics_nQuot1_get, _gravityEffector.SphericalHarmonics_nQuot1_set)
    __swig_setmethods__["nQuot2"] = _gravityEffector.SphericalHarmonics_nQuot2_set
    __swig_getmethods__["nQuot2"] = _gravityEffector.SphericalHarmonics_nQuot2_get
    if _newclass:
        nQuot2 = _swig_property(_gravityEffector.SphericalHarmonics_nQuot2_get, _gravityEffector.SphericalHarmonics_nQuot2_set)
    __swig_destroy__ = _gravityEffector.delete_SphericalHarmonics
    __del__ = lambda self: None

    def initializeParameters(self):
        return _gravityEffector.SphericalHarmonics_initializeParameters(self)

    def getK(self, degree):
        return _gravityEffector.SphericalHarmonics_getK(self, degree)

    def computeField(self, pos_Pfix, degree, include_zero_degree):
        return _gravityEffector.SphericalHarmonics_computeField(self, pos_Pfix, degree, include_zero_degree)

    def harmReady(self):
        return _gravityEffector.SphericalHarmonics_harmReady(self)

    def __init__(self, *args):
        this = _gravityEffector.new_SphericalHarmonics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SphericalHarmonics_swigregister = _gravityEffector.SphericalHarmonics_swigregister
SphericalHarmonics_swigregister(SphericalHarmonics)

class GravBodyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravBodyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GravBodyData, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gravityEffector.delete_GravBodyData
    __del__ = lambda self: None

    def initBody(self, moduleID):
        return _gravityEffector.GravBodyData_initBody(self, moduleID)

    def computeGravityInertial(self, r_I, simTimeNanos):
        return _gravityEffector.GravBodyData_computeGravityInertial(self, r_I, simTimeNanos)

    def computePotentialEnergy(self, r_I):
        return _gravityEffector.GravBodyData_computePotentialEnergy(self, r_I)

    def loadEphemeris(self, moduleID):
        return _gravityEffector.GravBodyData_loadEphemeris(self, moduleID)
    __swig_setmethods__["isCentralBody"] = _gravityEffector.GravBodyData_isCentralBody_set
    __swig_getmethods__["isCentralBody"] = _gravityEffector.GravBodyData_isCentralBody_get
    if _newclass:
        isCentralBody = _swig_property(_gravityEffector.GravBodyData_isCentralBody_get, _gravityEffector.GravBodyData_isCentralBody_set)
    __swig_setmethods__["isDisplayBody"] = _gravityEffector.GravBodyData_isDisplayBody_set
    __swig_getmethods__["isDisplayBody"] = _gravityEffector.GravBodyData_isDisplayBody_get
    if _newclass:
        isDisplayBody = _swig_property(_gravityEffector.GravBodyData_isDisplayBody_get, _gravityEffector.GravBodyData_isDisplayBody_set)
    __swig_setmethods__["useSphericalHarmParams"] = _gravityEffector.GravBodyData_useSphericalHarmParams_set
    __swig_getmethods__["useSphericalHarmParams"] = _gravityEffector.GravBodyData_useSphericalHarmParams_get
    if _newclass:
        useSphericalHarmParams = _swig_property(_gravityEffector.GravBodyData_useSphericalHarmParams_get, _gravityEffector.GravBodyData_useSphericalHarmParams_set)
    __swig_setmethods__["mu"] = _gravityEffector.GravBodyData_mu_set
    __swig_getmethods__["mu"] = _gravityEffector.GravBodyData_mu_get
    if _newclass:
        mu = _swig_property(_gravityEffector.GravBodyData_mu_get, _gravityEffector.GravBodyData_mu_set)
    __swig_setmethods__["ephemTime"] = _gravityEffector.GravBodyData_ephemTime_set
    __swig_getmethods__["ephemTime"] = _gravityEffector.GravBodyData_ephemTime_get
    if _newclass:
        ephemTime = _swig_property(_gravityEffector.GravBodyData_ephemTime_get, _gravityEffector.GravBodyData_ephemTime_set)
    __swig_setmethods__["ephIntTime"] = _gravityEffector.GravBodyData_ephIntTime_set
    __swig_getmethods__["ephIntTime"] = _gravityEffector.GravBodyData_ephIntTime_get
    if _newclass:
        ephIntTime = _swig_property(_gravityEffector.GravBodyData_ephIntTime_get, _gravityEffector.GravBodyData_ephIntTime_set)
    __swig_setmethods__["radEquator"] = _gravityEffector.GravBodyData_radEquator_set
    __swig_getmethods__["radEquator"] = _gravityEffector.GravBodyData_radEquator_get
    if _newclass:
        radEquator = _swig_property(_gravityEffector.GravBodyData_radEquator_get, _gravityEffector.GravBodyData_radEquator_set)
    __swig_setmethods__["localPlanet"] = _gravityEffector.GravBodyData_localPlanet_set
    __swig_getmethods__["localPlanet"] = _gravityEffector.GravBodyData_localPlanet_get
    if _newclass:
        localPlanet = _swig_property(_gravityEffector.GravBodyData_localPlanet_get, _gravityEffector.GravBodyData_localPlanet_set)
    __swig_setmethods__["localHeader"] = _gravityEffector.GravBodyData_localHeader_set
    __swig_getmethods__["localHeader"] = _gravityEffector.GravBodyData_localHeader_get
    if _newclass:
        localHeader = _swig_property(_gravityEffector.GravBodyData_localHeader_get, _gravityEffector.GravBodyData_localHeader_set)
    __swig_setmethods__["bodyInMsgName"] = _gravityEffector.GravBodyData_bodyInMsgName_set
    __swig_getmethods__["bodyInMsgName"] = _gravityEffector.GravBodyData_bodyInMsgName_get
    if _newclass:
        bodyInMsgName = _swig_property(_gravityEffector.GravBodyData_bodyInMsgName_get, _gravityEffector.GravBodyData_bodyInMsgName_set)
    __swig_setmethods__["outputMsgName"] = _gravityEffector.GravBodyData_outputMsgName_set
    __swig_getmethods__["outputMsgName"] = _gravityEffector.GravBodyData_outputMsgName_get
    if _newclass:
        outputMsgName = _swig_property(_gravityEffector.GravBodyData_outputMsgName_get, _gravityEffector.GravBodyData_outputMsgName_set)
    __swig_setmethods__["planetEphemName"] = _gravityEffector.GravBodyData_planetEphemName_set
    __swig_getmethods__["planetEphemName"] = _gravityEffector.GravBodyData_planetEphemName_get
    if _newclass:
        planetEphemName = _swig_property(_gravityEffector.GravBodyData_planetEphemName_get, _gravityEffector.GravBodyData_planetEphemName_set)
    __swig_setmethods__["outputMsgID"] = _gravityEffector.GravBodyData_outputMsgID_set
    __swig_getmethods__["outputMsgID"] = _gravityEffector.GravBodyData_outputMsgID_get
    if _newclass:
        outputMsgID = _swig_property(_gravityEffector.GravBodyData_outputMsgID_get, _gravityEffector.GravBodyData_outputMsgID_set)
    __swig_setmethods__["bodyMsgID"] = _gravityEffector.GravBodyData_bodyMsgID_set
    __swig_getmethods__["bodyMsgID"] = _gravityEffector.GravBodyData_bodyMsgID_get
    if _newclass:
        bodyMsgID = _swig_property(_gravityEffector.GravBodyData_bodyMsgID_get, _gravityEffector.GravBodyData_bodyMsgID_set)
    __swig_setmethods__["spherHarm"] = _gravityEffector.GravBodyData_spherHarm_set
    __swig_getmethods__["spherHarm"] = _gravityEffector.GravBodyData_spherHarm_get
    if _newclass:
        spherHarm = _swig_property(_gravityEffector.GravBodyData_spherHarm_get, _gravityEffector.GravBodyData_spherHarm_set)

    def __init__(self, *args):
        this = _gravityEffector.new_GravBodyData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GravBodyData_swigregister = _gravityEffector.GravBodyData_swigregister
GravBodyData_swigregister(GravBodyData)

class GravityEffector(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravityEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GravityEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gravityEffector.delete_GravityEffector
    __del__ = lambda self: None

    def SelfInit(self):
        return _gravityEffector.GravityEffector_SelfInit(self)

    def CrossInit(self):
        return _gravityEffector.GravityEffector_CrossInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _gravityEffector.GravityEffector_UpdateState(self, CurrentSimNanos)

    def linkInStates(self, statesIn):
        return _gravityEffector.GravityEffector_linkInStates(self, statesIn)

    def registerProperties(self, statesIn):
        return _gravityEffector.GravityEffector_registerProperties(self, statesIn)

    def computeGravityField(self, r_cF_N, rDot_cF_N):
        return _gravityEffector.GravityEffector_computeGravityField(self, r_cF_N, rDot_cF_N)

    def updateInertialPosAndVel(self, r_BF_N, rDot_BF_N):
        return _gravityEffector.GravityEffector_updateInertialPosAndVel(self, r_BF_N, rDot_BF_N)

    def updateEnergyContributions(self, r_CN_N, orbPotEnergyContr):
        return _gravityEffector.GravityEffector_updateEnergyContributions(self, r_CN_N, orbPotEnergyContr)

    def setGravBodies(self, gravBodies):
        return _gravityEffector.GravityEffector_setGravBodies(self, gravBodies)

    def addGravBody(self, gravBody):
        return _gravityEffector.GravityEffector_addGravBody(self, gravBody)

    def prependSpacecraftNameToStates(self):
        return _gravityEffector.GravityEffector_prependSpacecraftNameToStates(self)
    __swig_setmethods__["vehicleGravityPropName"] = _gravityEffector.GravityEffector_vehicleGravityPropName_set
    __swig_getmethods__["vehicleGravityPropName"] = _gravityEffector.GravityEffector_vehicleGravityPropName_get
    if _newclass:
        vehicleGravityPropName = _swig_property(_gravityEffector.GravityEffector_vehicleGravityPropName_get, _gravityEffector.GravityEffector_vehicleGravityPropName_set)
    __swig_setmethods__["systemTimeCorrPropName"] = _gravityEffector.GravityEffector_systemTimeCorrPropName_set
    __swig_getmethods__["systemTimeCorrPropName"] = _gravityEffector.GravityEffector_systemTimeCorrPropName_get
    if _newclass:
        systemTimeCorrPropName = _swig_property(_gravityEffector.GravityEffector_systemTimeCorrPropName_get, _gravityEffector.GravityEffector_systemTimeCorrPropName_set)
    __swig_setmethods__["gravBodies"] = _gravityEffector.GravityEffector_gravBodies_set
    __swig_getmethods__["gravBodies"] = _gravityEffector.GravityEffector_gravBodies_get
    if _newclass:
        gravBodies = _swig_property(_gravityEffector.GravityEffector_gravBodies_get, _gravityEffector.GravityEffector_gravBodies_set)
    __swig_setmethods__["centralBody"] = _gravityEffector.GravityEffector_centralBody_set
    __swig_getmethods__["centralBody"] = _gravityEffector.GravityEffector_centralBody_get
    if _newclass:
        centralBody = _swig_property(_gravityEffector.GravityEffector_centralBody_get, _gravityEffector.GravityEffector_centralBody_set)
    __swig_setmethods__["inertialPositionPropName"] = _gravityEffector.GravityEffector_inertialPositionPropName_set
    __swig_getmethods__["inertialPositionPropName"] = _gravityEffector.GravityEffector_inertialPositionPropName_get
    if _newclass:
        inertialPositionPropName = _swig_property(_gravityEffector.GravityEffector_inertialPositionPropName_get, _gravityEffector.GravityEffector_inertialPositionPropName_set)
    __swig_setmethods__["inertialVelocityPropName"] = _gravityEffector.GravityEffector_inertialVelocityPropName_set
    __swig_getmethods__["inertialVelocityPropName"] = _gravityEffector.GravityEffector_inertialVelocityPropName_get
    if _newclass:
        inertialVelocityPropName = _swig_property(_gravityEffector.GravityEffector_inertialVelocityPropName_get, _gravityEffector.GravityEffector_inertialVelocityPropName_set)
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _gravityEffector.GravityEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _gravityEffector.GravityEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_gravityEffector.GravityEffector_nameOfSpacecraftAttachedTo_get, _gravityEffector.GravityEffector_nameOfSpacecraftAttachedTo_set)

    def __init__(self, *args):
        this = _gravityEffector.new_GravityEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GravityEffector_swigregister = _gravityEffector.GravityEffector_swigregister
GravityEffector_swigregister(GravityEffector)

class GravBodyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravBodyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GravBodyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gravityEffector.GravBodyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gravityEffector.GravBodyVector___nonzero__(self)

    def __bool__(self):
        return _gravityEffector.GravBodyVector___bool__(self)

    def __len__(self):
        return _gravityEffector.GravBodyVector___len__(self)

    def __getslice__(self, i, j):
        return _gravityEffector.GravBodyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gravityEffector.GravBodyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gravityEffector.GravBodyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gravityEffector.GravBodyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gravityEffector.GravBodyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gravityEffector.GravBodyVector___setitem__(self, *args)

    def pop(self):
        return _gravityEffector.GravBodyVector_pop(self)

    def append(self, x):
        return _gravityEffector.GravBodyVector_append(self, x)

    def empty(self):
        return _gravityEffector.GravBodyVector_empty(self)

    def size(self):
        return _gravityEffector.GravBodyVector_size(self)

    def swap(self, v):
        return _gravityEffector.GravBodyVector_swap(self, v)

    def begin(self):
        return _gravityEffector.GravBodyVector_begin(self)

    def end(self):
        return _gravityEffector.GravBodyVector_end(self)

    def rbegin(self):
        return _gravityEffector.GravBodyVector_rbegin(self)

    def rend(self):
        return _gravityEffector.GravBodyVector_rend(self)

    def clear(self):
        return _gravityEffector.GravBodyVector_clear(self)

    def get_allocator(self):
        return _gravityEffector.GravBodyVector_get_allocator(self)

    def pop_back(self):
        return _gravityEffector.GravBodyVector_pop_back(self)

    def erase(self, *args):
        return _gravityEffector.GravBodyVector_erase(self, *args)

    def __init__(self, *args):
        this = _gravityEffector.new_GravBodyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gravityEffector.GravBodyVector_push_back(self, x)

    def front(self):
        return _gravityEffector.GravBodyVector_front(self)

    def back(self):
        return _gravityEffector.GravBodyVector_back(self)

    def assign(self, n, x):
        return _gravityEffector.GravBodyVector_assign(self, n, x)

    def resize(self, *args):
        return _gravityEffector.GravBodyVector_resize(self, *args)

    def insert(self, *args):
        return _gravityEffector.GravBodyVector_insert(self, *args)

    def reserve(self, n):
        return _gravityEffector.GravBodyVector_reserve(self, n)

    def capacity(self):
        return _gravityEffector.GravBodyVector_capacity(self)
    __swig_destroy__ = _gravityEffector.delete_GravBodyVector
    __del__ = lambda self: None
GravBodyVector_swigregister = _gravityEffector.GravBodyVector_swigregister
GravBodyVector_swigregister(GravBodyVector)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


