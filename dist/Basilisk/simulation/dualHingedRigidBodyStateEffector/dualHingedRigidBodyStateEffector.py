# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dualHingedRigidBodyStateEffector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dualHingedRigidBodyStateEffector')
    _dualHingedRigidBodyStateEffector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dualHingedRigidBodyStateEffector', [dirname(__file__)])
        except ImportError:
            import _dualHingedRigidBodyStateEffector
            return _dualHingedRigidBodyStateEffector
        try:
            _mod = imp.load_module('_dualHingedRigidBodyStateEffector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dualHingedRigidBodyStateEffector = swig_import_helper()
    del swig_import_helper
else:
    import _dualHingedRigidBodyStateEffector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_copy(self)

    def next(self):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dualHingedRigidBodyStateEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _dualHingedRigidBodyStateEffector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _dualHingedRigidBodyStateEffector.new_doubleArray(nelements)
new_doubleArray = _dualHingedRigidBodyStateEffector.new_doubleArray

def delete_doubleArray(ary):
    return _dualHingedRigidBodyStateEffector.delete_doubleArray(ary)
delete_doubleArray = _dualHingedRigidBodyStateEffector.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _dualHingedRigidBodyStateEffector.doubleArray_getitem(ary, index)
doubleArray_getitem = _dualHingedRigidBodyStateEffector.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _dualHingedRigidBodyStateEffector.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _dualHingedRigidBodyStateEffector.doubleArray_setitem

def new_longArray(nelements):
    return _dualHingedRigidBodyStateEffector.new_longArray(nelements)
new_longArray = _dualHingedRigidBodyStateEffector.new_longArray

def delete_longArray(ary):
    return _dualHingedRigidBodyStateEffector.delete_longArray(ary)
delete_longArray = _dualHingedRigidBodyStateEffector.delete_longArray

def longArray_getitem(ary, index):
    return _dualHingedRigidBodyStateEffector.longArray_getitem(ary, index)
longArray_getitem = _dualHingedRigidBodyStateEffector.longArray_getitem

def longArray_setitem(ary, index, value):
    return _dualHingedRigidBodyStateEffector.longArray_setitem(ary, index, value)
longArray_setitem = _dualHingedRigidBodyStateEffector.longArray_setitem

def new_intArray(nelements):
    return _dualHingedRigidBodyStateEffector.new_intArray(nelements)
new_intArray = _dualHingedRigidBodyStateEffector.new_intArray

def delete_intArray(ary):
    return _dualHingedRigidBodyStateEffector.delete_intArray(ary)
delete_intArray = _dualHingedRigidBodyStateEffector.delete_intArray

def intArray_getitem(ary, index):
    return _dualHingedRigidBodyStateEffector.intArray_getitem(ary, index)
intArray_getitem = _dualHingedRigidBodyStateEffector.intArray_getitem

def intArray_setitem(ary, index, value):
    return _dualHingedRigidBodyStateEffector.intArray_setitem(ary, index, value)
intArray_setitem = _dualHingedRigidBodyStateEffector.intArray_setitem

def new_shortArray(nelements):
    return _dualHingedRigidBodyStateEffector.new_shortArray(nelements)
new_shortArray = _dualHingedRigidBodyStateEffector.new_shortArray

def delete_shortArray(ary):
    return _dualHingedRigidBodyStateEffector.delete_shortArray(ary)
delete_shortArray = _dualHingedRigidBodyStateEffector.delete_shortArray

def shortArray_getitem(ary, index):
    return _dualHingedRigidBodyStateEffector.shortArray_getitem(ary, index)
shortArray_getitem = _dualHingedRigidBodyStateEffector.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _dualHingedRigidBodyStateEffector.shortArray_setitem(ary, index, value)
shortArray_setitem = _dualHingedRigidBodyStateEffector.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _dualHingedRigidBodyStateEffector.new_boolArray(nelements)
new_boolArray = _dualHingedRigidBodyStateEffector.new_boolArray

def delete_boolArray(ary):
    return _dualHingedRigidBodyStateEffector.delete_boolArray(ary)
delete_boolArray = _dualHingedRigidBodyStateEffector.delete_boolArray

def boolArray_getitem(ary, index):
    return _dualHingedRigidBodyStateEffector.boolArray_getitem(ary, index)
boolArray_getitem = _dualHingedRigidBodyStateEffector.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _dualHingedRigidBodyStateEffector.boolArray_setitem(ary, index, value)
boolArray_setitem = _dualHingedRigidBodyStateEffector.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.IntVector___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.IntVector___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector___setitem__(self, *args)

    def pop(self):
        return _dualHingedRigidBodyStateEffector.IntVector_pop(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.IntVector_append(self, x)

    def empty(self):
        return _dualHingedRigidBodyStateEffector.IntVector_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.IntVector_size(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.IntVector_swap(self, v)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.IntVector_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.IntVector_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.IntVector_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.IntVector_rend(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.IntVector_clear(self)

    def get_allocator(self):
        return _dualHingedRigidBodyStateEffector.IntVector_get_allocator(self)

    def pop_back(self):
        return _dualHingedRigidBodyStateEffector.IntVector_pop_back(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dualHingedRigidBodyStateEffector.IntVector_push_back(self, x)

    def front(self):
        return _dualHingedRigidBodyStateEffector.IntVector_front(self)

    def back(self):
        return _dualHingedRigidBodyStateEffector.IntVector_back(self)

    def assign(self, n, x):
        return _dualHingedRigidBodyStateEffector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _dualHingedRigidBodyStateEffector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _dualHingedRigidBodyStateEffector.IntVector_reserve(self, n)

    def capacity(self):
        return _dualHingedRigidBodyStateEffector.IntVector_capacity(self)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _dualHingedRigidBodyStateEffector.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_pop(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.DoubleVector_append(self, x)

    def empty(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_size(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.DoubleVector_swap(self, v)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_rend(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_clear(self)

    def get_allocator(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dualHingedRigidBodyStateEffector.DoubleVector_push_back(self, x)

    def front(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_front(self)

    def back(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_back(self)

    def assign(self, n, x):
        return _dualHingedRigidBodyStateEffector.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _dualHingedRigidBodyStateEffector.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _dualHingedRigidBodyStateEffector.DoubleVector_reserve(self, n)

    def capacity(self):
        return _dualHingedRigidBodyStateEffector.DoubleVector_capacity(self)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _dualHingedRigidBodyStateEffector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.StringVector___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.StringVector___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector___setitem__(self, *args)

    def pop(self):
        return _dualHingedRigidBodyStateEffector.StringVector_pop(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.StringVector_append(self, x)

    def empty(self):
        return _dualHingedRigidBodyStateEffector.StringVector_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.StringVector_size(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.StringVector_swap(self, v)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.StringVector_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.StringVector_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.StringVector_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.StringVector_rend(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.StringVector_clear(self)

    def get_allocator(self):
        return _dualHingedRigidBodyStateEffector.StringVector_get_allocator(self)

    def pop_back(self):
        return _dualHingedRigidBodyStateEffector.StringVector_pop_back(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dualHingedRigidBodyStateEffector.StringVector_push_back(self, x)

    def front(self):
        return _dualHingedRigidBodyStateEffector.StringVector_front(self)

    def back(self):
        return _dualHingedRigidBodyStateEffector.StringVector_back(self)

    def assign(self, n, x):
        return _dualHingedRigidBodyStateEffector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _dualHingedRigidBodyStateEffector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _dualHingedRigidBodyStateEffector.StringVector_reserve(self, n)

    def capacity(self):
        return _dualHingedRigidBodyStateEffector.StringVector_capacity(self)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _dualHingedRigidBodyStateEffector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.StringSet___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.StringSet___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.StringSet___len__(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_append(self, x)

    def __contains__(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _dualHingedRigidBodyStateEffector.StringSet___getitem__(self, i)

    def add(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_add(self, x)

    def discard(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _dualHingedRigidBodyStateEffector.StringSet_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.StringSet_size(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.StringSet_clear(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.StringSet_swap(self, v)

    def count(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_count(self, x)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.StringSet_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.StringSet_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.StringSet_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.StringSet_rend(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.StringSet_erase(self, *args)

    def find(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_find(self, x)

    def lower_bound(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _dualHingedRigidBodyStateEffector.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _dualHingedRigidBodyStateEffector.StringSet_insert(self, __x)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _dualHingedRigidBodyStateEffector.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.intSet___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.intSet___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.intSet___len__(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_append(self, x)

    def __contains__(self, x):
        return _dualHingedRigidBodyStateEffector.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _dualHingedRigidBodyStateEffector.intSet___getitem__(self, i)

    def add(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_add(self, x)

    def discard(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_discard(self, x)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _dualHingedRigidBodyStateEffector.intSet_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.intSet_size(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.intSet_clear(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.intSet_swap(self, v)

    def count(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_count(self, x)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.intSet_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.intSet_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.intSet_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.intSet_rend(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.intSet_erase(self, *args)

    def find(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_find(self, x)

    def lower_bound(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _dualHingedRigidBodyStateEffector.intSet_equal_range(self, x)

    def insert(self, __x):
        return _dualHingedRigidBodyStateEffector.intSet_insert(self, __x)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _dualHingedRigidBodyStateEffector.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_pop(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_append(self, x)

    def empty(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_size(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_swap(self, v)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_rend(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_clear(self)

    def get_allocator(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_push_back(self, x)

    def front(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_front(self)

    def back(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_back(self)

    def assign(self, n, x):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _dualHingedRigidBodyStateEffector.ConstCharVector_capacity(self)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _dualHingedRigidBodyStateEffector.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dualHingedRigidBodyStateEffector.MultiArray___nonzero__(self)

    def __bool__(self):
        return _dualHingedRigidBodyStateEffector.MultiArray___bool__(self)

    def __len__(self):
        return _dualHingedRigidBodyStateEffector.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dualHingedRigidBodyStateEffector.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray___setitem__(self, *args)

    def pop(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_pop(self)

    def append(self, x):
        return _dualHingedRigidBodyStateEffector.MultiArray_append(self, x)

    def empty(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_empty(self)

    def size(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_size(self)

    def swap(self, v):
        return _dualHingedRigidBodyStateEffector.MultiArray_swap(self, v)

    def begin(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_begin(self)

    def end(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_end(self)

    def rbegin(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_rbegin(self)

    def rend(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_rend(self)

    def clear(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_clear(self)

    def get_allocator(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_get_allocator(self)

    def pop_back(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_pop_back(self)

    def erase(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dualHingedRigidBodyStateEffector.MultiArray_push_back(self, x)

    def front(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_front(self)

    def back(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_back(self)

    def assign(self, n, x):
        return _dualHingedRigidBodyStateEffector.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _dualHingedRigidBodyStateEffector.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _dualHingedRigidBodyStateEffector.MultiArray_reserve(self, n)

    def capacity(self):
        return _dualHingedRigidBodyStateEffector.MultiArray_capacity(self)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _dualHingedRigidBodyStateEffector.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _dualHingedRigidBodyStateEffector.SysModel_SelfInit(self)

    def CrossInit(self):
        return _dualHingedRigidBodyStateEffector.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _dualHingedRigidBodyStateEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _dualHingedRigidBodyStateEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _dualHingedRigidBodyStateEffector.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _dualHingedRigidBodyStateEffector.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _dualHingedRigidBodyStateEffector.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_dualHingedRigidBodyStateEffector.SysModel_ModelTag_get, _dualHingedRigidBodyStateEffector.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _dualHingedRigidBodyStateEffector.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _dualHingedRigidBodyStateEffector.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_dualHingedRigidBodyStateEffector.SysModel_CallCounts_get, _dualHingedRigidBodyStateEffector.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _dualHingedRigidBodyStateEffector.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _dualHingedRigidBodyStateEffector.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_dualHingedRigidBodyStateEffector.SysModel_RNGSeed_get, _dualHingedRigidBodyStateEffector.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _dualHingedRigidBodyStateEffector.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _dualHingedRigidBodyStateEffector.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_dualHingedRigidBodyStateEffector.SysModel_moduleID_get, _dualHingedRigidBodyStateEffector.SysModel_moduleID_set)
SysModel_swigregister = _dualHingedRigidBodyStateEffector.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _dualHingedRigidBodyStateEffector.StateData_state_set
    __swig_getmethods__["state"] = _dualHingedRigidBodyStateEffector.StateData_state_get
    if _newclass:
        state = _swig_property(_dualHingedRigidBodyStateEffector.StateData_state_get, _dualHingedRigidBodyStateEffector.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _dualHingedRigidBodyStateEffector.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _dualHingedRigidBodyStateEffector.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_dualHingedRigidBodyStateEffector.StateData_stateDeriv_get, _dualHingedRigidBodyStateEffector.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _dualHingedRigidBodyStateEffector.StateData_stateName_set
    __swig_getmethods__["stateName"] = _dualHingedRigidBodyStateEffector.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_dualHingedRigidBodyStateEffector.StateData_stateName_get, _dualHingedRigidBodyStateEffector.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _dualHingedRigidBodyStateEffector.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _dualHingedRigidBodyStateEffector.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_dualHingedRigidBodyStateEffector.StateData_stateEnabled_get, _dualHingedRigidBodyStateEffector.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _dualHingedRigidBodyStateEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _dualHingedRigidBodyStateEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _dualHingedRigidBodyStateEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _dualHingedRigidBodyStateEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _dualHingedRigidBodyStateEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _dualHingedRigidBodyStateEffector.StateData_getName(self)

    def getRowSize(self):
        return _dualHingedRigidBodyStateEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _dualHingedRigidBodyStateEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _dualHingedRigidBodyStateEffector.StateData_isStateActive(self)

    def disable(self):
        return _dualHingedRigidBodyStateEffector.StateData_disable(self)

    def enable(self):
        return _dualHingedRigidBodyStateEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _dualHingedRigidBodyStateEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _dualHingedRigidBodyStateEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _dualHingedRigidBodyStateEffector.StateData___mul__(self, scaleFactor)
StateData_swigregister = _dualHingedRigidBodyStateEffector.StateData_swigregister
StateData_swigregister(StateData)

class BackSubMatrices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackSubMatrices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackSubMatrices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrixA"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixA_set
    __swig_getmethods__["matrixA"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixA_get
    if _newclass:
        matrixA = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_matrixA_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixA_set)
    __swig_setmethods__["matrixB"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixB_set
    __swig_getmethods__["matrixB"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixB_get
    if _newclass:
        matrixB = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_matrixB_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixB_set)
    __swig_setmethods__["matrixC"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixC_set
    __swig_getmethods__["matrixC"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixC_get
    if _newclass:
        matrixC = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_matrixC_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixC_set)
    __swig_setmethods__["matrixD"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixD_set
    __swig_getmethods__["matrixD"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixD_get
    if _newclass:
        matrixD = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_matrixD_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_matrixD_set)
    __swig_setmethods__["vecTrans"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_vecTrans_set
    __swig_getmethods__["vecTrans"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_vecTrans_get
    if _newclass:
        vecTrans = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_vecTrans_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_vecTrans_set)
    __swig_setmethods__["vecRot"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_vecRot_set
    __swig_getmethods__["vecRot"] = _dualHingedRigidBodyStateEffector.BackSubMatrices_vecRot_get
    if _newclass:
        vecRot = _swig_property(_dualHingedRigidBodyStateEffector.BackSubMatrices_vecRot_get, _dualHingedRigidBodyStateEffector.BackSubMatrices_vecRot_set)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_BackSubMatrices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_BackSubMatrices
    __del__ = lambda self: None
BackSubMatrices_swigregister = _dualHingedRigidBodyStateEffector.BackSubMatrices_swigregister
BackSubMatrices_swigregister(BackSubMatrices)

class EffectorMassProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorMassProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorMassProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mEff"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_mEff_set
    __swig_getmethods__["mEff"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_mEff_get
    if _newclass:
        mEff = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_mEff_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_mEff_set)
    __swig_setmethods__["mEffDot"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_mEffDot_set
    __swig_getmethods__["mEffDot"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_mEffDot_get
    if _newclass:
        mEffDot = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_mEffDot_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_mEffDot_set)
    __swig_setmethods__["IEffPntB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPntB_B_set
    __swig_getmethods__["IEffPntB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPntB_B_get
    if _newclass:
        IEffPntB_B = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPntB_B_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPntB_B_set)
    __swig_setmethods__["rEff_CB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_rEff_CB_B_set
    __swig_getmethods__["rEff_CB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_rEff_CB_B_get
    if _newclass:
        rEff_CB_B = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_rEff_CB_B_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_rEff_CB_B_set)
    __swig_setmethods__["rEffPrime_CB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_rEffPrime_CB_B_set
    __swig_getmethods__["rEffPrime_CB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_rEffPrime_CB_B_get
    if _newclass:
        rEffPrime_CB_B = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_rEffPrime_CB_B_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_rEffPrime_CB_B_set)
    __swig_setmethods__["IEffPrimePntB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPrimePntB_B_set
    __swig_getmethods__["IEffPrimePntB_B"] = _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPrimePntB_B_get
    if _newclass:
        IEffPrimePntB_B = _swig_property(_dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPrimePntB_B_get, _dualHingedRigidBodyStateEffector.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_EffectorMassProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_EffectorMassProps
    __del__ = lambda self: None
EffectorMassProps_swigregister = _dualHingedRigidBodyStateEffector.EffectorMassProps_swigregister
EffectorMassProps_swigregister(EffectorMassProps)

class StateEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _dualHingedRigidBodyStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _dualHingedRigidBodyStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get, _dualHingedRigidBodyStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set)
    __swig_setmethods__["effProps"] = _dualHingedRigidBodyStateEffector.StateEffector_effProps_set
    __swig_getmethods__["effProps"] = _dualHingedRigidBodyStateEffector.StateEffector_effProps_get
    if _newclass:
        effProps = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_effProps_get, _dualHingedRigidBodyStateEffector.StateEffector_effProps_set)
    __swig_setmethods__["forceOnBody_B"] = _dualHingedRigidBodyStateEffector.StateEffector_forceOnBody_B_set
    __swig_getmethods__["forceOnBody_B"] = _dualHingedRigidBodyStateEffector.StateEffector_forceOnBody_B_get
    if _newclass:
        forceOnBody_B = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_forceOnBody_B_get, _dualHingedRigidBodyStateEffector.StateEffector_forceOnBody_B_set)
    __swig_setmethods__["torqueOnBodyPntB_B"] = _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntB_B_set
    __swig_getmethods__["torqueOnBodyPntB_B"] = _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntB_B_get
    if _newclass:
        torqueOnBodyPntB_B = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntB_B_get, _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntB_B_set)
    __swig_setmethods__["torqueOnBodyPntC_B"] = _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntC_B_set
    __swig_getmethods__["torqueOnBodyPntC_B"] = _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntC_B_get
    if _newclass:
        torqueOnBodyPntC_B = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntC_B_get, _dualHingedRigidBodyStateEffector.StateEffector_torqueOnBodyPntC_B_set)
    __swig_setmethods__["r_BP_P"] = _dualHingedRigidBodyStateEffector.StateEffector_r_BP_P_set
    __swig_getmethods__["r_BP_P"] = _dualHingedRigidBodyStateEffector.StateEffector_r_BP_P_get
    if _newclass:
        r_BP_P = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_r_BP_P_get, _dualHingedRigidBodyStateEffector.StateEffector_r_BP_P_set)
    __swig_setmethods__["dcm_BP"] = _dualHingedRigidBodyStateEffector.StateEffector_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _dualHingedRigidBodyStateEffector.StateEffector_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_dualHingedRigidBodyStateEffector.StateEffector_dcm_BP_get, _dualHingedRigidBodyStateEffector.StateEffector_dcm_BP_set)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_StateEffector
    __del__ = lambda self: None

    def updateEffectorMassProps(self, integTime):
        return _dualHingedRigidBodyStateEffector.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _dualHingedRigidBodyStateEffector.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _dualHingedRigidBodyStateEffector.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _dualHingedRigidBodyStateEffector.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _dualHingedRigidBodyStateEffector.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _dualHingedRigidBodyStateEffector.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _dualHingedRigidBodyStateEffector.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _dualHingedRigidBodyStateEffector.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _dualHingedRigidBodyStateEffector.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _dualHingedRigidBodyStateEffector.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _dualHingedRigidBodyStateEffector.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)
StateEffector_swigregister = _dualHingedRigidBodyStateEffector.StateEffector_swigregister
StateEffector_swigregister(StateEffector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _dualHingedRigidBodyStateEffector.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _dualHingedRigidBodyStateEffector.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_dualHingedRigidBodyStateEffector.StateVector_stateMap_get, _dualHingedRigidBodyStateEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _dualHingedRigidBodyStateEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _dualHingedRigidBodyStateEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _dualHingedRigidBodyStateEffector.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _dualHingedRigidBodyStateEffector.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _dualHingedRigidBodyStateEffector.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_dualHingedRigidBodyStateEffector.DynParamManager_dynProperties_get, _dualHingedRigidBodyStateEffector.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _dualHingedRigidBodyStateEffector.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _dualHingedRigidBodyStateEffector.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_dualHingedRigidBodyStateEffector.DynParamManager_stateContainer_get, _dualHingedRigidBodyStateEffector.DynParamManager_stateContainer_set)
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _dualHingedRigidBodyStateEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _dualHingedRigidBodyStateEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _dualHingedRigidBodyStateEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _dualHingedRigidBodyStateEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _dualHingedRigidBodyStateEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _dualHingedRigidBodyStateEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _dualHingedRigidBodyStateEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _dualHingedRigidBodyStateEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _dualHingedRigidBodyStateEffector.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class DualHingedRigidBodyStateEffector(StateEffector, SysModel):
    __swig_setmethods__ = {}
    for _s in [StateEffector, SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DualHingedRigidBodyStateEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [StateEffector, SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DualHingedRigidBodyStateEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _dualHingedRigidBodyStateEffector.delete_DualHingedRigidBodyStateEffector
    __del__ = lambda self: None

    def registerStates(self, statesIn):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_registerStates(self, statesIn)

    def linkInStates(self, states):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_linkInStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)
    __swig_setmethods__["mass1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass1_set
    __swig_getmethods__["mass1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass1_get
    if _newclass:
        mass1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass1_set)
    __swig_setmethods__["mass2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass2_set
    __swig_getmethods__["mass2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass2_get
    if _newclass:
        mass2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_mass2_set)
    __swig_setmethods__["d1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d1_set
    __swig_getmethods__["d1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d1_get
    if _newclass:
        d1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d1_set)
    __swig_setmethods__["d2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d2_set
    __swig_getmethods__["d2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d2_get
    if _newclass:
        d2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_d2_set)
    __swig_setmethods__["l1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l1_set
    __swig_getmethods__["l1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l1_get
    if _newclass:
        l1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l1_set)
    __swig_setmethods__["l2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l2_set
    __swig_getmethods__["l2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l2_get
    if _newclass:
        l2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_l2_set)
    __swig_setmethods__["k1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k1_set
    __swig_getmethods__["k1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k1_get
    if _newclass:
        k1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k1_set)
    __swig_setmethods__["k2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k2_set
    __swig_getmethods__["k2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k2_get
    if _newclass:
        k2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_k2_set)
    __swig_setmethods__["c1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c1_set
    __swig_getmethods__["c1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c1_get
    if _newclass:
        c1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c1_set)
    __swig_setmethods__["c2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c2_set
    __swig_getmethods__["c2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c2_get
    if _newclass:
        c2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_c2_set)
    __swig_setmethods__["theta1Init"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1Init_set
    __swig_getmethods__["theta1Init"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1Init_get
    if _newclass:
        theta1Init = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1Init_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1Init_set)
    __swig_setmethods__["theta1DotInit"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1DotInit_set
    __swig_getmethods__["theta1DotInit"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1DotInit_get
    if _newclass:
        theta1DotInit = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1DotInit_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta1DotInit_set)
    __swig_setmethods__["theta2Init"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2Init_set
    __swig_getmethods__["theta2Init"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2Init_get
    if _newclass:
        theta2Init = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2Init_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2Init_set)
    __swig_setmethods__["theta2DotInit"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2DotInit_set
    __swig_getmethods__["theta2DotInit"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2DotInit_get
    if _newclass:
        theta2DotInit = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2DotInit_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_theta2DotInit_set)
    __swig_setmethods__["IPntS1_S1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS1_S1_set
    __swig_getmethods__["IPntS1_S1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS1_S1_get
    if _newclass:
        IPntS1_S1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS1_S1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS1_S1_set)
    __swig_setmethods__["IPntS2_S2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS2_S2_set
    __swig_getmethods__["IPntS2_S2"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS2_S2_get
    if _newclass:
        IPntS2_S2 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS2_S2_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_IPntS2_S2_set)
    __swig_setmethods__["rH1B_B"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_rH1B_B_set
    __swig_getmethods__["rH1B_B"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_rH1B_B_get
    if _newclass:
        rH1B_B = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_rH1B_B_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_rH1B_B_set)
    __swig_setmethods__["dcmH1B"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_dcmH1B_set
    __swig_getmethods__["dcmH1B"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_dcmH1B_get
    if _newclass:
        dcmH1B = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_dcmH1B_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_dcmH1B_set)
    __swig_setmethods__["thetaH2S1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_thetaH2S1_set
    __swig_getmethods__["thetaH2S1"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_thetaH2S1_get
    if _newclass:
        thetaH2S1 = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_thetaH2S1_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_thetaH2S1_set)
    __swig_setmethods__["nameOfTheta1State"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1State_set
    __swig_getmethods__["nameOfTheta1State"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1State_get
    if _newclass:
        nameOfTheta1State = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1State_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1State_set)
    __swig_setmethods__["nameOfTheta1DotState"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1DotState_set
    __swig_getmethods__["nameOfTheta1DotState"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1DotState_get
    if _newclass:
        nameOfTheta1DotState = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1DotState_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta1DotState_set)
    __swig_setmethods__["nameOfTheta2State"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2State_set
    __swig_getmethods__["nameOfTheta2State"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2State_get
    if _newclass:
        nameOfTheta2State = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2State_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2State_set)
    __swig_setmethods__["nameOfTheta2DotState"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2DotState_set
    __swig_getmethods__["nameOfTheta2DotState"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2DotState_get
    if _newclass:
        nameOfTheta2DotState = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2DotState_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_nameOfTheta2DotState_set)
    __swig_setmethods__["g_N"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_g_N_set
    __swig_getmethods__["g_N"] = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_g_N_get
    if _newclass:
        g_N = _swig_property(_dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_g_N_get, _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_g_N_set)

    def __init__(self, *args):
        this = _dualHingedRigidBodyStateEffector.new_DualHingedRigidBodyStateEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DualHingedRigidBodyStateEffector_swigregister = _dualHingedRigidBodyStateEffector.DualHingedRigidBodyStateEffector_swigregister
DualHingedRigidBodyStateEffector_swigregister(DualHingedRigidBodyStateEffector)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


