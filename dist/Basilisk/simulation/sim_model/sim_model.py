# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sim_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sim_model')
    _sim_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sim_model', [dirname(__file__)])
        except ImportError:
            import _sim_model
            return _sim_model
        try:
            _mod = imp.load_module('_sim_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sim_model = swig_import_helper()
    del swig_import_helper
else:
    import _sim_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_model.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _sim_model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sim_model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sim_model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sim_model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sim_model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sim_model.SwigPyIterator_copy(self)

    def next(self):
        return _sim_model.SwigPyIterator_next(self)

    def __next__(self):
        return _sim_model.SwigPyIterator___next__(self)

    def previous(self):
        return _sim_model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sim_model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sim_model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sim_model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sim_model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sim_model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sim_model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sim_model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _sim_model.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def cdata(ptr, nelements=1):
    return _sim_model.cdata(ptr, nelements)
cdata = _sim_model.cdata

def memmove(data, indata):
    return _sim_model.memmove(data, indata)
memmove = _sim_model.memmove

def new_doubleArray(nelements):
    return _sim_model.new_doubleArray(nelements)
new_doubleArray = _sim_model.new_doubleArray

def delete_doubleArray(ary):
    return _sim_model.delete_doubleArray(ary)
delete_doubleArray = _sim_model.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _sim_model.doubleArray_getitem(ary, index)
doubleArray_getitem = _sim_model.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _sim_model.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _sim_model.doubleArray_setitem

def new_longArray(nelements):
    return _sim_model.new_longArray(nelements)
new_longArray = _sim_model.new_longArray

def delete_longArray(ary):
    return _sim_model.delete_longArray(ary)
delete_longArray = _sim_model.delete_longArray

def longArray_getitem(ary, index):
    return _sim_model.longArray_getitem(ary, index)
longArray_getitem = _sim_model.longArray_getitem

def longArray_setitem(ary, index, value):
    return _sim_model.longArray_setitem(ary, index, value)
longArray_setitem = _sim_model.longArray_setitem

def new_intArray(nelements):
    return _sim_model.new_intArray(nelements)
new_intArray = _sim_model.new_intArray

def delete_intArray(ary):
    return _sim_model.delete_intArray(ary)
delete_intArray = _sim_model.delete_intArray

def intArray_getitem(ary, index):
    return _sim_model.intArray_getitem(ary, index)
intArray_getitem = _sim_model.intArray_getitem

def intArray_setitem(ary, index, value):
    return _sim_model.intArray_setitem(ary, index, value)
intArray_setitem = _sim_model.intArray_setitem

def new_shortArray(nelements):
    return _sim_model.new_shortArray(nelements)
new_shortArray = _sim_model.new_shortArray

def delete_shortArray(ary):
    return _sim_model.delete_shortArray(ary)
delete_shortArray = _sim_model.delete_shortArray

def shortArray_getitem(ary, index):
    return _sim_model.shortArray_getitem(ary, index)
shortArray_getitem = _sim_model.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _sim_model.shortArray_setitem(ary, index, value)
shortArray_setitem = _sim_model.shortArray_setitem

def new_boolArray(nelements):
    return _sim_model.new_boolArray(nelements)
new_boolArray = _sim_model.new_boolArray

def delete_boolArray(ary):
    return _sim_model.delete_boolArray(ary)
delete_boolArray = _sim_model.delete_boolArray

def boolArray_getitem(ary, index):
    return _sim_model.boolArray_getitem(ary, index)
boolArray_getitem = _sim_model.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _sim_model.boolArray_setitem(ary, index, value)
boolArray_setitem = _sim_model.boolArray_setitem

def new_cByteArray(nelements):
    return _sim_model.new_cByteArray(nelements)
new_cByteArray = _sim_model.new_cByteArray

def delete_cByteArray(ary):
    return _sim_model.delete_cByteArray(ary)
delete_cByteArray = _sim_model.delete_cByteArray

def cByteArray_getitem(ary, index):
    return _sim_model.cByteArray_getitem(ary, index)
cByteArray_getitem = _sim_model.cByteArray_getitem

def cByteArray_setitem(ary, index, value):
    return _sim_model.cByteArray_setitem(ary, index, value)
cByteArray_setitem = _sim_model.cByteArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.IntVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.IntVector___bool__(self)

    def __len__(self):
        return _sim_model.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.IntVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.IntVector_pop(self)

    def append(self, x):
        return _sim_model.IntVector_append(self, x)

    def empty(self):
        return _sim_model.IntVector_empty(self)

    def size(self):
        return _sim_model.IntVector_size(self)

    def swap(self, v):
        return _sim_model.IntVector_swap(self, v)

    def begin(self):
        return _sim_model.IntVector_begin(self)

    def end(self):
        return _sim_model.IntVector_end(self)

    def rbegin(self):
        return _sim_model.IntVector_rbegin(self)

    def rend(self):
        return _sim_model.IntVector_rend(self)

    def clear(self):
        return _sim_model.IntVector_clear(self)

    def get_allocator(self):
        return _sim_model.IntVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.IntVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.IntVector_push_back(self, x)

    def front(self):
        return _sim_model.IntVector_front(self)

    def back(self):
        return _sim_model.IntVector_back(self)

    def assign(self, n, x):
        return _sim_model.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.IntVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.IntVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.IntVector_reserve(self, n)

    def capacity(self):
        return _sim_model.IntVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _sim_model.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.DoubleVector___bool__(self)

    def __len__(self):
        return _sim_model.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.DoubleVector_pop(self)

    def append(self, x):
        return _sim_model.DoubleVector_append(self, x)

    def empty(self):
        return _sim_model.DoubleVector_empty(self)

    def size(self):
        return _sim_model.DoubleVector_size(self)

    def swap(self, v):
        return _sim_model.DoubleVector_swap(self, v)

    def begin(self):
        return _sim_model.DoubleVector_begin(self)

    def end(self):
        return _sim_model.DoubleVector_end(self)

    def rbegin(self):
        return _sim_model.DoubleVector_rbegin(self)

    def rend(self):
        return _sim_model.DoubleVector_rend(self)

    def clear(self):
        return _sim_model.DoubleVector_clear(self)

    def get_allocator(self):
        return _sim_model.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.DoubleVector_push_back(self, x)

    def front(self):
        return _sim_model.DoubleVector_front(self)

    def back(self):
        return _sim_model.DoubleVector_back(self)

    def assign(self, n, x):
        return _sim_model.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.DoubleVector_reserve(self, n)

    def capacity(self):
        return _sim_model.DoubleVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _sim_model.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.MultiArray___nonzero__(self)

    def __bool__(self):
        return _sim_model.MultiArray___bool__(self)

    def __len__(self):
        return _sim_model.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.MultiArray___setitem__(self, *args)

    def pop(self):
        return _sim_model.MultiArray_pop(self)

    def append(self, x):
        return _sim_model.MultiArray_append(self, x)

    def empty(self):
        return _sim_model.MultiArray_empty(self)

    def size(self):
        return _sim_model.MultiArray_size(self)

    def swap(self, v):
        return _sim_model.MultiArray_swap(self, v)

    def begin(self):
        return _sim_model.MultiArray_begin(self)

    def end(self):
        return _sim_model.MultiArray_end(self)

    def rbegin(self):
        return _sim_model.MultiArray_rbegin(self)

    def rend(self):
        return _sim_model.MultiArray_rend(self)

    def clear(self):
        return _sim_model.MultiArray_clear(self)

    def get_allocator(self):
        return _sim_model.MultiArray_get_allocator(self)

    def pop_back(self):
        return _sim_model.MultiArray_pop_back(self)

    def erase(self, *args):
        return _sim_model.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.MultiArray_push_back(self, x)

    def front(self):
        return _sim_model.MultiArray_front(self)

    def back(self):
        return _sim_model.MultiArray_back(self)

    def assign(self, n, x):
        return _sim_model.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _sim_model.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _sim_model.MultiArray_reserve(self, n)

    def capacity(self):
        return _sim_model.MultiArray_capacity(self)
    __swig_destroy__ = _sim_model.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _sim_model.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.StringVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.StringVector___bool__(self)

    def __len__(self):
        return _sim_model.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.StringVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.StringVector_pop(self)

    def append(self, x):
        return _sim_model.StringVector_append(self, x)

    def empty(self):
        return _sim_model.StringVector_empty(self)

    def size(self):
        return _sim_model.StringVector_size(self)

    def swap(self, v):
        return _sim_model.StringVector_swap(self, v)

    def begin(self):
        return _sim_model.StringVector_begin(self)

    def end(self):
        return _sim_model.StringVector_end(self)

    def rbegin(self):
        return _sim_model.StringVector_rbegin(self)

    def rend(self):
        return _sim_model.StringVector_rend(self)

    def clear(self):
        return _sim_model.StringVector_clear(self)

    def get_allocator(self):
        return _sim_model.StringVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.StringVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.StringVector_push_back(self, x)

    def front(self):
        return _sim_model.StringVector_front(self)

    def back(self):
        return _sim_model.StringVector_back(self)

    def assign(self, n, x):
        return _sim_model.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.StringVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.StringVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.StringVector_reserve(self, n)

    def capacity(self):
        return _sim_model.StringVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _sim_model.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.StringSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.StringSet___bool__(self)

    def __len__(self):
        return _sim_model.StringSet___len__(self)

    def append(self, x):
        return _sim_model.StringSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.StringSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.StringSet_add(self, x)

    def discard(self, x):
        return _sim_model.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _sim_model.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _sim_model.StringSet_empty(self)

    def size(self):
        return _sim_model.StringSet_size(self)

    def clear(self):
        return _sim_model.StringSet_clear(self)

    def swap(self, v):
        return _sim_model.StringSet_swap(self, v)

    def count(self, x):
        return _sim_model.StringSet_count(self, x)

    def begin(self):
        return _sim_model.StringSet_begin(self)

    def end(self):
        return _sim_model.StringSet_end(self)

    def rbegin(self):
        return _sim_model.StringSet_rbegin(self)

    def rend(self):
        return _sim_model.StringSet_rend(self)

    def erase(self, *args):
        return _sim_model.StringSet_erase(self, *args)

    def find(self, x):
        return _sim_model.StringSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.StringSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _sim_model.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.intSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.intSet___bool__(self)

    def __len__(self):
        return _sim_model.intSet___len__(self)

    def append(self, x):
        return _sim_model.intSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.intSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.intSet_add(self, x)

    def discard(self, x):
        return _sim_model.intSet_discard(self, x)

    def __init__(self, *args):
        this = _sim_model.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _sim_model.intSet_empty(self)

    def size(self):
        return _sim_model.intSet_size(self)

    def clear(self):
        return _sim_model.intSet_clear(self)

    def swap(self, v):
        return _sim_model.intSet_swap(self, v)

    def count(self, x):
        return _sim_model.intSet_count(self, x)

    def begin(self):
        return _sim_model.intSet_begin(self)

    def end(self):
        return _sim_model.intSet_end(self)

    def rbegin(self):
        return _sim_model.intSet_rbegin(self)

    def rend(self):
        return _sim_model.intSet_rend(self)

    def erase(self, *args):
        return _sim_model.intSet_erase(self, *args)

    def find(self, x):
        return _sim_model.intSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.intSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.intSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _sim_model.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.ConstCharVector___bool__(self)

    def __len__(self):
        return _sim_model.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.ConstCharVector_pop(self)

    def append(self, x):
        return _sim_model.ConstCharVector_append(self, x)

    def empty(self):
        return _sim_model.ConstCharVector_empty(self)

    def size(self):
        return _sim_model.ConstCharVector_size(self)

    def swap(self, v):
        return _sim_model.ConstCharVector_swap(self, v)

    def begin(self):
        return _sim_model.ConstCharVector_begin(self)

    def end(self):
        return _sim_model.ConstCharVector_end(self)

    def rbegin(self):
        return _sim_model.ConstCharVector_rbegin(self)

    def rend(self):
        return _sim_model.ConstCharVector_rend(self)

    def clear(self):
        return _sim_model.ConstCharVector_clear(self)

    def get_allocator(self):
        return _sim_model.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.ConstCharVector_push_back(self, x)

    def front(self):
        return _sim_model.ConstCharVector_front(self)

    def back(self):
        return _sim_model.ConstCharVector_back(self)

    def assign(self, n, x):
        return _sim_model.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _sim_model.ConstCharVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _sim_model.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class messsageLogVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, messsageLogVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, messsageLogVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.messsageLogVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.messsageLogVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.messsageLogVector___bool__(self)

    def __len__(self):
        return _sim_model.messsageLogVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.messsageLogVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.messsageLogVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.messsageLogVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.messsageLogVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.messsageLogVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.messsageLogVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.messsageLogVector_pop(self)

    def append(self, x):
        return _sim_model.messsageLogVector_append(self, x)

    def empty(self):
        return _sim_model.messsageLogVector_empty(self)

    def size(self):
        return _sim_model.messsageLogVector_size(self)

    def swap(self, v):
        return _sim_model.messsageLogVector_swap(self, v)

    def begin(self):
        return _sim_model.messsageLogVector_begin(self)

    def end(self):
        return _sim_model.messsageLogVector_end(self)

    def rbegin(self):
        return _sim_model.messsageLogVector_rbegin(self)

    def rend(self):
        return _sim_model.messsageLogVector_rend(self)

    def clear(self):
        return _sim_model.messsageLogVector_clear(self)

    def get_allocator(self):
        return _sim_model.messsageLogVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.messsageLogVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.messsageLogVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_messsageLogVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.messsageLogVector_push_back(self, x)

    def front(self):
        return _sim_model.messsageLogVector_front(self)

    def back(self):
        return _sim_model.messsageLogVector_back(self)

    def assign(self, n, x):
        return _sim_model.messsageLogVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.messsageLogVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.messsageLogVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.messsageLogVector_reserve(self, n)

    def capacity(self):
        return _sim_model.messsageLogVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_messsageLogVector
    __del__ = lambda self: None
messsageLogVector_swigregister = _sim_model.messsageLogVector_swigregister
messsageLogVector_swigregister(messsageLogVector)

class exchangeSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exchangeSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exchangeSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.exchangeSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.exchangeSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.exchangeSet___bool__(self)

    def __len__(self):
        return _sim_model.exchangeSet___len__(self)

    def append(self, x):
        return _sim_model.exchangeSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.exchangeSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.exchangeSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.exchangeSet_add(self, x)

    def discard(self, x):
        return _sim_model.exchangeSet_discard(self, x)

    def __init__(self, *args):
        this = _sim_model.new_exchangeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _sim_model.exchangeSet_empty(self)

    def size(self):
        return _sim_model.exchangeSet_size(self)

    def clear(self):
        return _sim_model.exchangeSet_clear(self)

    def swap(self, v):
        return _sim_model.exchangeSet_swap(self, v)

    def count(self, x):
        return _sim_model.exchangeSet_count(self, x)

    def begin(self):
        return _sim_model.exchangeSet_begin(self)

    def end(self):
        return _sim_model.exchangeSet_end(self)

    def rbegin(self):
        return _sim_model.exchangeSet_rbegin(self)

    def rend(self):
        return _sim_model.exchangeSet_rend(self)

    def erase(self, *args):
        return _sim_model.exchangeSet_erase(self, *args)

    def find(self, x):
        return _sim_model.exchangeSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.exchangeSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.exchangeSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.exchangeSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.exchangeSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_exchangeSet
    __del__ = lambda self: None
exchangeSet_swigregister = _sim_model.exchangeSet_swigregister
exchangeSet_swigregister(exchangeSet)

class modelPriPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modelPriPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modelPriPair, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.modelPriPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.modelPriPair___nonzero__(self)

    def __bool__(self):
        return _sim_model.modelPriPair___bool__(self)

    def __len__(self):
        return _sim_model.modelPriPair___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.modelPriPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.modelPriPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.modelPriPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.modelPriPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.modelPriPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.modelPriPair___setitem__(self, *args)

    def pop(self):
        return _sim_model.modelPriPair_pop(self)

    def append(self, x):
        return _sim_model.modelPriPair_append(self, x)

    def empty(self):
        return _sim_model.modelPriPair_empty(self)

    def size(self):
        return _sim_model.modelPriPair_size(self)

    def swap(self, v):
        return _sim_model.modelPriPair_swap(self, v)

    def begin(self):
        return _sim_model.modelPriPair_begin(self)

    def end(self):
        return _sim_model.modelPriPair_end(self)

    def rbegin(self):
        return _sim_model.modelPriPair_rbegin(self)

    def rend(self):
        return _sim_model.modelPriPair_rend(self)

    def clear(self):
        return _sim_model.modelPriPair_clear(self)

    def get_allocator(self):
        return _sim_model.modelPriPair_get_allocator(self)

    def pop_back(self):
        return _sim_model.modelPriPair_pop_back(self)

    def erase(self, *args):
        return _sim_model.modelPriPair_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_modelPriPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.modelPriPair_push_back(self, x)

    def front(self):
        return _sim_model.modelPriPair_front(self)

    def back(self):
        return _sim_model.modelPriPair_back(self)

    def assign(self, n, x):
        return _sim_model.modelPriPair_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.modelPriPair_resize(self, *args)

    def insert(self, *args):
        return _sim_model.modelPriPair_insert(self, *args)

    def reserve(self, n):
        return _sim_model.modelPriPair_reserve(self, n)

    def capacity(self):
        return _sim_model.modelPriPair_capacity(self)
    __swig_destroy__ = _sim_model.delete_modelPriPair
    __del__ = lambda self: None
modelPriPair_swigregister = _sim_model.modelPriPair_swigregister
modelPriPair_swigregister(modelPriPair)

class interfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interfaceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.interfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.interfaceVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.interfaceVector___bool__(self)

    def __len__(self):
        return _sim_model.interfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.interfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.interfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.interfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.interfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.interfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.interfaceVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.interfaceVector_pop(self)

    def append(self, x):
        return _sim_model.interfaceVector_append(self, x)

    def empty(self):
        return _sim_model.interfaceVector_empty(self)

    def size(self):
        return _sim_model.interfaceVector_size(self)

    def swap(self, v):
        return _sim_model.interfaceVector_swap(self, v)

    def begin(self):
        return _sim_model.interfaceVector_begin(self)

    def end(self):
        return _sim_model.interfaceVector_end(self)

    def rbegin(self):
        return _sim_model.interfaceVector_rbegin(self)

    def rend(self):
        return _sim_model.interfaceVector_rend(self)

    def clear(self):
        return _sim_model.interfaceVector_clear(self)

    def get_allocator(self):
        return _sim_model.interfaceVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.interfaceVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.interfaceVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_interfaceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.interfaceVector_push_back(self, x)

    def front(self):
        return _sim_model.interfaceVector_front(self)

    def back(self):
        return _sim_model.interfaceVector_back(self)

    def assign(self, n, x):
        return _sim_model.interfaceVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.interfaceVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.interfaceVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.interfaceVector_reserve(self, n)

    def capacity(self):
        return _sim_model.interfaceVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_interfaceVector
    __del__ = lambda self: None
interfaceVector_swigregister = _sim_model.interfaceVector_swigregister
interfaceVector_swigregister(interfaceVector)

class interfaceSingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interfaceSingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interfaceSingVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.interfaceSingVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.interfaceSingVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.interfaceSingVector___bool__(self)

    def __len__(self):
        return _sim_model.interfaceSingVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.interfaceSingVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.interfaceSingVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.interfaceSingVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.interfaceSingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.interfaceSingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.interfaceSingVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.interfaceSingVector_pop(self)

    def append(self, x):
        return _sim_model.interfaceSingVector_append(self, x)

    def empty(self):
        return _sim_model.interfaceSingVector_empty(self)

    def size(self):
        return _sim_model.interfaceSingVector_size(self)

    def swap(self, v):
        return _sim_model.interfaceSingVector_swap(self, v)

    def begin(self):
        return _sim_model.interfaceSingVector_begin(self)

    def end(self):
        return _sim_model.interfaceSingVector_end(self)

    def rbegin(self):
        return _sim_model.interfaceSingVector_rbegin(self)

    def rend(self):
        return _sim_model.interfaceSingVector_rend(self)

    def clear(self):
        return _sim_model.interfaceSingVector_clear(self)

    def get_allocator(self):
        return _sim_model.interfaceSingVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.interfaceSingVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.interfaceSingVector_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_interfaceSingVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.interfaceSingVector_push_back(self, x)

    def front(self):
        return _sim_model.interfaceSingVector_front(self)

    def back(self):
        return _sim_model.interfaceSingVector_back(self)

    def assign(self, n, x):
        return _sim_model.interfaceSingVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.interfaceSingVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.interfaceSingVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.interfaceSingVector_reserve(self, n)

    def capacity(self):
        return _sim_model.interfaceSingVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_interfaceSingVector
    __del__ = lambda self: None
interfaceSingVector_swigregister = _sim_model.interfaceSingVector_swigregister
interfaceSingVector_swigregister(interfaceSingVector)

class procSchedList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, procSchedList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, procSchedList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.procSchedList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.procSchedList___nonzero__(self)

    def __bool__(self):
        return _sim_model.procSchedList___bool__(self)

    def __len__(self):
        return _sim_model.procSchedList___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.procSchedList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.procSchedList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.procSchedList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.procSchedList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.procSchedList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.procSchedList___setitem__(self, *args)

    def pop(self):
        return _sim_model.procSchedList_pop(self)

    def append(self, x):
        return _sim_model.procSchedList_append(self, x)

    def empty(self):
        return _sim_model.procSchedList_empty(self)

    def size(self):
        return _sim_model.procSchedList_size(self)

    def swap(self, v):
        return _sim_model.procSchedList_swap(self, v)

    def begin(self):
        return _sim_model.procSchedList_begin(self)

    def end(self):
        return _sim_model.procSchedList_end(self)

    def rbegin(self):
        return _sim_model.procSchedList_rbegin(self)

    def rend(self):
        return _sim_model.procSchedList_rend(self)

    def clear(self):
        return _sim_model.procSchedList_clear(self)

    def get_allocator(self):
        return _sim_model.procSchedList_get_allocator(self)

    def pop_back(self):
        return _sim_model.procSchedList_pop_back(self)

    def erase(self, *args):
        return _sim_model.procSchedList_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_procSchedList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.procSchedList_push_back(self, x)

    def front(self):
        return _sim_model.procSchedList_front(self)

    def back(self):
        return _sim_model.procSchedList_back(self)

    def assign(self, n, x):
        return _sim_model.procSchedList_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.procSchedList_resize(self, *args)

    def insert(self, *args):
        return _sim_model.procSchedList_insert(self, *args)

    def reserve(self, n):
        return _sim_model.procSchedList_reserve(self, n)

    def capacity(self):
        return _sim_model.procSchedList_capacity(self)
    __swig_destroy__ = _sim_model.delete_procSchedList
    __del__ = lambda self: None
procSchedList_swigregister = _sim_model.procSchedList_swigregister
procSchedList_swigregister(procSchedList)

class simProcList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simProcList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simProcList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.simProcList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.simProcList___nonzero__(self)

    def __bool__(self):
        return _sim_model.simProcList___bool__(self)

    def __len__(self):
        return _sim_model.simProcList___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.simProcList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.simProcList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.simProcList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.simProcList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.simProcList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.simProcList___setitem__(self, *args)

    def pop(self):
        return _sim_model.simProcList_pop(self)

    def append(self, x):
        return _sim_model.simProcList_append(self, x)

    def empty(self):
        return _sim_model.simProcList_empty(self)

    def size(self):
        return _sim_model.simProcList_size(self)

    def swap(self, v):
        return _sim_model.simProcList_swap(self, v)

    def begin(self):
        return _sim_model.simProcList_begin(self)

    def end(self):
        return _sim_model.simProcList_end(self)

    def rbegin(self):
        return _sim_model.simProcList_rbegin(self)

    def rend(self):
        return _sim_model.simProcList_rend(self)

    def clear(self):
        return _sim_model.simProcList_clear(self)

    def get_allocator(self):
        return _sim_model.simProcList_get_allocator(self)

    def pop_back(self):
        return _sim_model.simProcList_pop_back(self)

    def erase(self, *args):
        return _sim_model.simProcList_erase(self, *args)

    def __init__(self, *args):
        this = _sim_model.new_simProcList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _sim_model.simProcList_push_back(self, x)

    def front(self):
        return _sim_model.simProcList_front(self)

    def back(self):
        return _sim_model.simProcList_back(self)

    def assign(self, n, x):
        return _sim_model.simProcList_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.simProcList_resize(self, *args)

    def insert(self, *args):
        return _sim_model.simProcList_insert(self, *args)

    def reserve(self, n):
        return _sim_model.simProcList_reserve(self, n)

    def capacity(self):
        return _sim_model.simProcList_capacity(self)
    __swig_destroy__ = _sim_model.delete_simProcList
    __del__ = lambda self: None
simProcList_swigregister = _sim_model.simProcList_swigregister
simProcList_swigregister(simProcList)


def getObjectAddress(variable):
    return _sim_model.getObjectAddress(variable)
getObjectAddress = _sim_model.getObjectAddress
class ModelPriorityPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPriorityPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPriorityPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CurrentModelPriority"] = _sim_model.ModelPriorityPair_CurrentModelPriority_set
    __swig_getmethods__["CurrentModelPriority"] = _sim_model.ModelPriorityPair_CurrentModelPriority_get
    if _newclass:
        CurrentModelPriority = _swig_property(_sim_model.ModelPriorityPair_CurrentModelPriority_get, _sim_model.ModelPriorityPair_CurrentModelPriority_set)
    __swig_setmethods__["ModelPtr"] = _sim_model.ModelPriorityPair_ModelPtr_set
    __swig_getmethods__["ModelPtr"] = _sim_model.ModelPriorityPair_ModelPtr_get
    if _newclass:
        ModelPtr = _swig_property(_sim_model.ModelPriorityPair_ModelPtr_get, _sim_model.ModelPriorityPair_ModelPtr_set)

    def __init__(self):
        this = _sim_model.new_ModelPriorityPair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_ModelPriorityPair
    __del__ = lambda self: None
ModelPriorityPair_swigregister = _sim_model.ModelPriorityPair_swigregister
ModelPriorityPair_swigregister(ModelPriorityPair)

class SysModelTask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModelTask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModelTask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_model.new_SysModelTask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SysModelTask
    __del__ = lambda self: None

    def AddNewObject(self, NewModel, Priority=-1):
        return _sim_model.SysModelTask_AddNewObject(self, NewModel, Priority)

    def SelfInitTaskList(self):
        return _sim_model.SysModelTask_SelfInitTaskList(self)

    def CrossInitTaskList(self):
        return _sim_model.SysModelTask_CrossInitTaskList(self)

    def ExecuteTaskList(self, CurrentSimTime):
        return _sim_model.SysModelTask_ExecuteTaskList(self, CurrentSimTime)

    def ResetTaskList(self, CurrentSimTime):
        return _sim_model.SysModelTask_ResetTaskList(self, CurrentSimTime)

    def ResetTask(self):
        return _sim_model.SysModelTask_ResetTask(self)

    def enableTask(self):
        return _sim_model.SysModelTask_enableTask(self)

    def disableTask(self):
        return _sim_model.SysModelTask_disableTask(self)

    def updatePeriod(self, newPeriod):
        return _sim_model.SysModelTask_updatePeriod(self, newPeriod)
    __swig_setmethods__["TaskModels"] = _sim_model.SysModelTask_TaskModels_set
    __swig_getmethods__["TaskModels"] = _sim_model.SysModelTask_TaskModels_get
    if _newclass:
        TaskModels = _swig_property(_sim_model.SysModelTask_TaskModels_get, _sim_model.SysModelTask_TaskModels_set)
    __swig_setmethods__["TaskName"] = _sim_model.SysModelTask_TaskName_set
    __swig_getmethods__["TaskName"] = _sim_model.SysModelTask_TaskName_get
    if _newclass:
        TaskName = _swig_property(_sim_model.SysModelTask_TaskName_get, _sim_model.SysModelTask_TaskName_set)
    __swig_setmethods__["NextStartTime"] = _sim_model.SysModelTask_NextStartTime_set
    __swig_getmethods__["NextStartTime"] = _sim_model.SysModelTask_NextStartTime_get
    if _newclass:
        NextStartTime = _swig_property(_sim_model.SysModelTask_NextStartTime_get, _sim_model.SysModelTask_NextStartTime_set)
    __swig_setmethods__["NextPickupTime"] = _sim_model.SysModelTask_NextPickupTime_set
    __swig_getmethods__["NextPickupTime"] = _sim_model.SysModelTask_NextPickupTime_get
    if _newclass:
        NextPickupTime = _swig_property(_sim_model.SysModelTask_NextPickupTime_get, _sim_model.SysModelTask_NextPickupTime_set)
    __swig_setmethods__["TaskPeriod"] = _sim_model.SysModelTask_TaskPeriod_set
    __swig_getmethods__["TaskPeriod"] = _sim_model.SysModelTask_TaskPeriod_get
    if _newclass:
        TaskPeriod = _swig_property(_sim_model.SysModelTask_TaskPeriod_get, _sim_model.SysModelTask_TaskPeriod_set)
    __swig_setmethods__["PickupDelay"] = _sim_model.SysModelTask_PickupDelay_set
    __swig_getmethods__["PickupDelay"] = _sim_model.SysModelTask_PickupDelay_get
    if _newclass:
        PickupDelay = _swig_property(_sim_model.SysModelTask_PickupDelay_get, _sim_model.SysModelTask_PickupDelay_set)
    __swig_setmethods__["FirstTaskTime"] = _sim_model.SysModelTask_FirstTaskTime_set
    __swig_getmethods__["FirstTaskTime"] = _sim_model.SysModelTask_FirstTaskTime_get
    if _newclass:
        FirstTaskTime = _swig_property(_sim_model.SysModelTask_FirstTaskTime_get, _sim_model.SysModelTask_FirstTaskTime_set)
    __swig_setmethods__["taskActive"] = _sim_model.SysModelTask_taskActive_set
    __swig_getmethods__["taskActive"] = _sim_model.SysModelTask_taskActive_get
    if _newclass:
        taskActive = _swig_property(_sim_model.SysModelTask_taskActive_get, _sim_model.SysModelTask_taskActive_set)
SysModelTask_swigregister = _sim_model.SysModelTask_swigregister
SysModelTask_swigregister(SysModelTask)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_model.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _sim_model.SysModel_SelfInit(self)

    def CrossInit(self):
        return _sim_model.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _sim_model.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _sim_model.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _sim_model.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _sim_model.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _sim_model.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_sim_model.SysModel_ModelTag_get, _sim_model.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _sim_model.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _sim_model.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_sim_model.SysModel_CallCounts_get, _sim_model.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _sim_model.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _sim_model.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_sim_model.SysModel_RNGSeed_get, _sim_model.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _sim_model.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _sim_model.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_sim_model.SysModel_moduleID_get, _sim_model.SysModel_moduleID_set)
SysModel_swigregister = _sim_model.SysModel_swigregister
SysModel_swigregister(SysModel)

class ModelScheduleEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelScheduleEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelScheduleEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NextTaskStart"] = _sim_model.ModelScheduleEntry_NextTaskStart_set
    __swig_getmethods__["NextTaskStart"] = _sim_model.ModelScheduleEntry_NextTaskStart_get
    if _newclass:
        NextTaskStart = _swig_property(_sim_model.ModelScheduleEntry_NextTaskStart_get, _sim_model.ModelScheduleEntry_NextTaskStart_set)
    __swig_setmethods__["TaskUpdatePeriod"] = _sim_model.ModelScheduleEntry_TaskUpdatePeriod_set
    __swig_getmethods__["TaskUpdatePeriod"] = _sim_model.ModelScheduleEntry_TaskUpdatePeriod_get
    if _newclass:
        TaskUpdatePeriod = _swig_property(_sim_model.ModelScheduleEntry_TaskUpdatePeriod_get, _sim_model.ModelScheduleEntry_TaskUpdatePeriod_set)
    __swig_setmethods__["taskPriority"] = _sim_model.ModelScheduleEntry_taskPriority_set
    __swig_getmethods__["taskPriority"] = _sim_model.ModelScheduleEntry_taskPriority_get
    if _newclass:
        taskPriority = _swig_property(_sim_model.ModelScheduleEntry_taskPriority_get, _sim_model.ModelScheduleEntry_taskPriority_set)
    __swig_setmethods__["TaskPtr"] = _sim_model.ModelScheduleEntry_TaskPtr_set
    __swig_getmethods__["TaskPtr"] = _sim_model.ModelScheduleEntry_TaskPtr_get
    if _newclass:
        TaskPtr = _swig_property(_sim_model.ModelScheduleEntry_TaskPtr_get, _sim_model.ModelScheduleEntry_TaskPtr_set)

    def __init__(self):
        this = _sim_model.new_ModelScheduleEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_ModelScheduleEntry
    __del__ = lambda self: None
ModelScheduleEntry_swigregister = _sim_model.ModelScheduleEntry_swigregister
ModelScheduleEntry_swigregister(ModelScheduleEntry)

class SysProcess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysProcess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysProcess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_model.new_SysProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SysProcess
    __del__ = lambda self: None

    def addNewTask(self, newTask, taskPriority=-1):
        return _sim_model.SysProcess_addNewTask(self, newTask, taskPriority)

    def selfInitProcess(self):
        return _sim_model.SysProcess_selfInitProcess(self)

    def crossInitProcess(self):
        return _sim_model.SysProcess_crossInitProcess(self)

    def resetProcess(self, currentTime):
        return _sim_model.SysProcess_resetProcess(self, currentTime)

    def reInitProcess(self):
        return _sim_model.SysProcess_reInitProcess(self)

    def enableProcess(self):
        return _sim_model.SysProcess_enableProcess(self)

    def disableProcess(self):
        return _sim_model.SysProcess_disableProcess(self)

    def scheduleTask(self, taskCall):
        return _sim_model.SysProcess_scheduleTask(self, taskCall)

    def selectProcess(self):
        return _sim_model.SysProcess_selectProcess(self)

    def setProcessName(self, newName):
        return _sim_model.SysProcess_setProcessName(self, newName)

    def getProcessName(self):
        return _sim_model.SysProcess_getProcessName(self)

    def getNextTime(self):
        return _sim_model.SysProcess_getNextTime(self)

    def singleStepNextTask(self, currentNanos):
        return _sim_model.SysProcess_singleStepNextTask(self, currentNanos)

    def processEnabled(self):
        return _sim_model.SysProcess_processEnabled(self)

    def addInterfaceRef(self, newInt):
        return _sim_model.SysProcess_addInterfaceRef(self, newInt)

    def changeTaskPeriod(self, taskName, newPeriod):
        return _sim_model.SysProcess_changeTaskPeriod(self, taskName, newPeriod)

    def setPriority(self, newPriority):
        return _sim_model.SysProcess_setPriority(self, newPriority)

    def routeInterfaces(self):
        return _sim_model.SysProcess_routeInterfaces(self)

    def disableAllTasks(self):
        return _sim_model.SysProcess_disableAllTasks(self)

    def enableAllTasks(self):
        return _sim_model.SysProcess_enableAllTasks(self)
    __swig_setmethods__["intRefs"] = _sim_model.SysProcess_intRefs_set
    __swig_getmethods__["intRefs"] = _sim_model.SysProcess_intRefs_get
    if _newclass:
        intRefs = _swig_property(_sim_model.SysProcess_intRefs_get, _sim_model.SysProcess_intRefs_set)
    __swig_setmethods__["processTasks"] = _sim_model.SysProcess_processTasks_set
    __swig_getmethods__["processTasks"] = _sim_model.SysProcess_processTasks_get
    if _newclass:
        processTasks = _swig_property(_sim_model.SysProcess_processTasks_get, _sim_model.SysProcess_processTasks_set)
    __swig_setmethods__["messageBuffer"] = _sim_model.SysProcess_messageBuffer_set
    __swig_getmethods__["messageBuffer"] = _sim_model.SysProcess_messageBuffer_get
    if _newclass:
        messageBuffer = _swig_property(_sim_model.SysProcess_messageBuffer_get, _sim_model.SysProcess_messageBuffer_set)
    __swig_setmethods__["nextTaskTime"] = _sim_model.SysProcess_nextTaskTime_set
    __swig_getmethods__["nextTaskTime"] = _sim_model.SysProcess_nextTaskTime_get
    if _newclass:
        nextTaskTime = _swig_property(_sim_model.SysProcess_nextTaskTime_get, _sim_model.SysProcess_nextTaskTime_set)
    __swig_setmethods__["prevRouteTime"] = _sim_model.SysProcess_prevRouteTime_set
    __swig_getmethods__["prevRouteTime"] = _sim_model.SysProcess_prevRouteTime_get
    if _newclass:
        prevRouteTime = _swig_property(_sim_model.SysProcess_prevRouteTime_get, _sim_model.SysProcess_prevRouteTime_set)
    __swig_setmethods__["processName"] = _sim_model.SysProcess_processName_set
    __swig_getmethods__["processName"] = _sim_model.SysProcess_processName_get
    if _newclass:
        processName = _swig_property(_sim_model.SysProcess_processName_get, _sim_model.SysProcess_processName_set)
    __swig_setmethods__["processActive"] = _sim_model.SysProcess_processActive_set
    __swig_getmethods__["processActive"] = _sim_model.SysProcess_processActive_get
    if _newclass:
        processActive = _swig_property(_sim_model.SysProcess_processActive_get, _sim_model.SysProcess_processActive_set)
    __swig_setmethods__["processPriority"] = _sim_model.SysProcess_processPriority_set
    __swig_getmethods__["processPriority"] = _sim_model.SysProcess_processPriority_get
    if _newclass:
        processPriority = _swig_property(_sim_model.SysProcess_processPriority_get, _sim_model.SysProcess_processPriority_set)
SysProcess_swigregister = _sim_model.SysProcess_swigregister
SysProcess_swigregister(SysProcess)

class MessageInterfaceMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageInterfaceMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageInterfaceMatch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["messageSource"] = _sim_model.MessageInterfaceMatch_messageSource_set
    __swig_getmethods__["messageSource"] = _sim_model.MessageInterfaceMatch_messageSource_get
    if _newclass:
        messageSource = _swig_property(_sim_model.MessageInterfaceMatch_messageSource_get, _sim_model.MessageInterfaceMatch_messageSource_set)
    __swig_setmethods__["messageDest"] = _sim_model.MessageInterfaceMatch_messageDest_set
    __swig_getmethods__["messageDest"] = _sim_model.MessageInterfaceMatch_messageDest_get
    if _newclass:
        messageDest = _swig_property(_sim_model.MessageInterfaceMatch_messageDest_get, _sim_model.MessageInterfaceMatch_messageDest_set)
    __swig_setmethods__["source"] = _sim_model.MessageInterfaceMatch_source_set
    __swig_getmethods__["source"] = _sim_model.MessageInterfaceMatch_source_get
    if _newclass:
        source = _swig_property(_sim_model.MessageInterfaceMatch_source_get, _sim_model.MessageInterfaceMatch_source_set)
    __swig_setmethods__["destination"] = _sim_model.MessageInterfaceMatch_destination_set
    __swig_getmethods__["destination"] = _sim_model.MessageInterfaceMatch_destination_get
    if _newclass:
        destination = _swig_property(_sim_model.MessageInterfaceMatch_destination_get, _sim_model.MessageInterfaceMatch_destination_set)
    __swig_setmethods__["updateCounter"] = _sim_model.MessageInterfaceMatch_updateCounter_set
    __swig_getmethods__["updateCounter"] = _sim_model.MessageInterfaceMatch_updateCounter_get
    if _newclass:
        updateCounter = _swig_property(_sim_model.MessageInterfaceMatch_updateCounter_get, _sim_model.MessageInterfaceMatch_updateCounter_set)

    def __init__(self):
        this = _sim_model.new_MessageInterfaceMatch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_MessageInterfaceMatch
    __del__ = lambda self: None
MessageInterfaceMatch_swigregister = _sim_model.MessageInterfaceMatch_swigregister
MessageInterfaceMatch_swigregister(MessageInterfaceMatch)

class InterfaceDataExchange(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterfaceDataExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterfaceDataExchange, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_model.new_InterfaceDataExchange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_InterfaceDataExchange
    __del__ = lambda self: None

    def linkProcesses(self):
        return _sim_model.InterfaceDataExchange_linkProcesses(self)

    def linkMessages(self):
        return _sim_model.InterfaceDataExchange_linkMessages(self)

    def discoverMessages(self):
        return _sim_model.InterfaceDataExchange_discoverMessages(self)

    def routeMessages(self):
        return _sim_model.InterfaceDataExchange_routeMessages(self)
    __swig_setmethods__["exchangeActive"] = _sim_model.InterfaceDataExchange_exchangeActive_set
    __swig_getmethods__["exchangeActive"] = _sim_model.InterfaceDataExchange_exchangeActive_get
    if _newclass:
        exchangeActive = _swig_property(_sim_model.InterfaceDataExchange_exchangeActive_get, _sim_model.InterfaceDataExchange_exchangeActive_set)
    __swig_setmethods__["processData"] = _sim_model.InterfaceDataExchange_processData_set
    __swig_getmethods__["processData"] = _sim_model.InterfaceDataExchange_processData_get
    if _newclass:
        processData = _swig_property(_sim_model.InterfaceDataExchange_processData_get, _sim_model.InterfaceDataExchange_processData_set)
    __swig_setmethods__["messageTraffic"] = _sim_model.InterfaceDataExchange_messageTraffic_set
    __swig_getmethods__["messageTraffic"] = _sim_model.InterfaceDataExchange_messageTraffic_get
    if _newclass:
        messageTraffic = _swig_property(_sim_model.InterfaceDataExchange_messageTraffic_get, _sim_model.InterfaceDataExchange_messageTraffic_set)
    __swig_setmethods__["needDelete"] = _sim_model.InterfaceDataExchange_needDelete_set
    __swig_getmethods__["needDelete"] = _sim_model.InterfaceDataExchange_needDelete_get
    if _newclass:
        needDelete = _swig_property(_sim_model.InterfaceDataExchange_needDelete_get, _sim_model.InterfaceDataExchange_needDelete_set)
InterfaceDataExchange_swigregister = _sim_model.InterfaceDataExchange_swigregister
InterfaceDataExchange_swigregister(InterfaceDataExchange)

class SysInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysInterface, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_model.new_SysInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SysInterface
    __del__ = lambda self: None

    def addNewInterface(self, *args):
        return _sim_model.SysInterface_addNewInterface(self, *args)

    def enableInterface(self):
        return _sim_model.SysInterface_enableInterface(self)

    def disableInterface(self):
        return _sim_model.SysInterface_disableInterface(self)

    def routeInputs(self, processBuffer):
        return _sim_model.SysInterface_routeInputs(self, processBuffer)

    def discoverAllMessages(self):
        return _sim_model.SysInterface_discoverAllMessages(self)

    def connectInterfaces(self):
        return _sim_model.SysInterface_connectInterfaces(self)
    __swig_setmethods__["interfaceDef"] = _sim_model.SysInterface_interfaceDef_set
    __swig_getmethods__["interfaceDef"] = _sim_model.SysInterface_interfaceDef_get
    if _newclass:
        interfaceDef = _swig_property(_sim_model.SysInterface_interfaceDef_get, _sim_model.SysInterface_interfaceDef_set)
    __swig_setmethods__["interfaceActive"] = _sim_model.SysInterface_interfaceActive_set
    __swig_getmethods__["interfaceActive"] = _sim_model.SysInterface_interfaceActive_get
    if _newclass:
        interfaceActive = _swig_property(_sim_model.SysInterface_interfaceActive_get, _sim_model.SysInterface_interfaceActive_set)
    __swig_setmethods__["interfacesLinked"] = _sim_model.SysInterface_interfacesLinked_set
    __swig_getmethods__["interfacesLinked"] = _sim_model.SysInterface_interfacesLinked_get
    if _newclass:
        interfacesLinked = _swig_property(_sim_model.SysInterface_interfacesLinked_get, _sim_model.SysInterface_interfacesLinked_set)
SysInterface_swigregister = _sim_model.SysInterface_swigregister
SysInterface_swigregister(SysInterface)

class messageLogContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, messageLogContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, messageLogContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["messageName"] = _sim_model.messageLogContainer_messageName_set
    __swig_getmethods__["messageName"] = _sim_model.messageLogContainer_messageName_get
    if _newclass:
        messageName = _swig_property(_sim_model.messageLogContainer_messageName_get, _sim_model.messageLogContainer_messageName_set)
    __swig_setmethods__["messageID"] = _sim_model.messageLogContainer_messageID_set
    __swig_getmethods__["messageID"] = _sim_model.messageLogContainer_messageID_get
    if _newclass:
        messageID = _swig_property(_sim_model.messageLogContainer_messageID_get, _sim_model.messageLogContainer_messageID_set)
    __swig_setmethods__["processID"] = _sim_model.messageLogContainer_processID_set
    __swig_getmethods__["processID"] = _sim_model.messageLogContainer_processID_get
    if _newclass:
        processID = _swig_property(_sim_model.messageLogContainer_processID_get, _sim_model.messageLogContainer_processID_set)
    __swig_setmethods__["lastLogTime"] = _sim_model.messageLogContainer_lastLogTime_set
    __swig_getmethods__["lastLogTime"] = _sim_model.messageLogContainer_lastLogTime_get
    if _newclass:
        lastLogTime = _swig_property(_sim_model.messageLogContainer_lastLogTime_get, _sim_model.messageLogContainer_lastLogTime_set)
    __swig_setmethods__["logInstanceCount"] = _sim_model.messageLogContainer_logInstanceCount_set
    __swig_getmethods__["logInstanceCount"] = _sim_model.messageLogContainer_logInstanceCount_get
    if _newclass:
        logInstanceCount = _swig_property(_sim_model.messageLogContainer_logInstanceCount_get, _sim_model.messageLogContainer_logInstanceCount_set)
    __swig_setmethods__["lastWriteCheck"] = _sim_model.messageLogContainer_lastWriteCheck_set
    __swig_getmethods__["lastWriteCheck"] = _sim_model.messageLogContainer_lastWriteCheck_get
    if _newclass:
        lastWriteCheck = _swig_property(_sim_model.messageLogContainer_lastWriteCheck_get, _sim_model.messageLogContainer_lastWriteCheck_set)
    __swig_setmethods__["writeDelta"] = _sim_model.messageLogContainer_writeDelta_set
    __swig_getmethods__["writeDelta"] = _sim_model.messageLogContainer_writeDelta_get
    if _newclass:
        writeDelta = _swig_property(_sim_model.messageLogContainer_writeDelta_get, _sim_model.messageLogContainer_writeDelta_set)
    __swig_setmethods__["bufferOffset"] = _sim_model.messageLogContainer_bufferOffset_set
    __swig_getmethods__["bufferOffset"] = _sim_model.messageLogContainer_bufferOffset_get
    if _newclass:
        bufferOffset = _swig_property(_sim_model.messageLogContainer_bufferOffset_get, _sim_model.messageLogContainer_bufferOffset_set)
    __swig_setmethods__["messageBuffer"] = _sim_model.messageLogContainer_messageBuffer_set
    __swig_getmethods__["messageBuffer"] = _sim_model.messageLogContainer_messageBuffer_get
    if _newclass:
        messageBuffer = _swig_property(_sim_model.messageLogContainer_messageBuffer_get, _sim_model.messageLogContainer_messageBuffer_set)
    __swig_setmethods__["storOff"] = _sim_model.messageLogContainer_storOff_set
    __swig_getmethods__["storOff"] = _sim_model.messageLogContainer_storOff_get
    if _newclass:
        storOff = _swig_property(_sim_model.messageLogContainer_storOff_get, _sim_model.messageLogContainer_storOff_set)

    def __init__(self):
        this = _sim_model.new_messageLogContainer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_messageLogContainer
    __del__ = lambda self: None
messageLogContainer_swigregister = _sim_model.messageLogContainer_swigregister
messageLogContainer_swigregister(messageLogContainer)

class messageLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, messageLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, messageLogger, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_model.new_messageLogger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_messageLogger
    __del__ = lambda self: None

    def addMessageLog(self, messageName, messagePeriod=0):
        return _sim_model.messageLogger_addMessageLog(self, messageName, messagePeriod)

    def linkMessages(self):
        return _sim_model.messageLogger_linkMessages(self)

    def messagesLinked(self):
        return _sim_model.messageLogger_messagesLinked(self)

    def logAllMessages(self):
        return _sim_model.messageLogger_logAllMessages(self)

    def readLog(self, messageID, dataHeader, maxBytes, msgPayload, currentOffset=0):
        return _sim_model.messageLogger_readLog(self, messageID, dataHeader, maxBytes, msgPayload, currentOffset)

    def getLogCount(self, processID, messageID):
        return _sim_model.messageLogger_getLogCount(self, processID, messageID)

    def clearLogs(self):
        return _sim_model.messageLogger_clearLogs(self)

    def archiveLogsToDisk(self, outFileName):
        return _sim_model.messageLogger_archiveLogsToDisk(self, outFileName)

    def loadArchiveFromDisk(self, inFileName):
        return _sim_model.messageLogger_loadArchiveFromDisk(self, inFileName)
    __swig_setmethods__["initBufferSize"] = _sim_model.messageLogger_initBufferSize_set
    __swig_getmethods__["initBufferSize"] = _sim_model.messageLogger_initBufferSize_get
    if _newclass:
        initBufferSize = _swig_property(_sim_model.messageLogger_initBufferSize_get, _sim_model.messageLogger_initBufferSize_set)
    __swig_setmethods__["logData"] = _sim_model.messageLogger_logData_set
    __swig_getmethods__["logData"] = _sim_model.messageLogger_logData_get
    if _newclass:
        logData = _swig_property(_sim_model.messageLogger_logData_get, _sim_model.messageLogger_logData_set)
messageLogger_swigregister = _sim_model.messageLogger_swigregister
messageLogger_swigregister(messageLogger)

MAX_MESSAGE_SIZE = _sim_model.MAX_MESSAGE_SIZE
class MessageHeaderData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageHeaderData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageHeaderData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MessageName"] = _sim_model.MessageHeaderData_MessageName_set
    __swig_getmethods__["MessageName"] = _sim_model.MessageHeaderData_MessageName_get
    if _newclass:
        MessageName = _swig_property(_sim_model.MessageHeaderData_MessageName_get, _sim_model.MessageHeaderData_MessageName_set)
    __swig_setmethods__["messageStruct"] = _sim_model.MessageHeaderData_messageStruct_set
    __swig_getmethods__["messageStruct"] = _sim_model.MessageHeaderData_messageStruct_get
    if _newclass:
        messageStruct = _swig_property(_sim_model.MessageHeaderData_messageStruct_get, _sim_model.MessageHeaderData_messageStruct_set)
    __swig_setmethods__["UpdateCounter"] = _sim_model.MessageHeaderData_UpdateCounter_set
    __swig_getmethods__["UpdateCounter"] = _sim_model.MessageHeaderData_UpdateCounter_get
    if _newclass:
        UpdateCounter = _swig_property(_sim_model.MessageHeaderData_UpdateCounter_get, _sim_model.MessageHeaderData_UpdateCounter_set)
    __swig_setmethods__["CurrentReadBuffer"] = _sim_model.MessageHeaderData_CurrentReadBuffer_set
    __swig_getmethods__["CurrentReadBuffer"] = _sim_model.MessageHeaderData_CurrentReadBuffer_get
    if _newclass:
        CurrentReadBuffer = _swig_property(_sim_model.MessageHeaderData_CurrentReadBuffer_get, _sim_model.MessageHeaderData_CurrentReadBuffer_set)
    __swig_setmethods__["MaxNumberBuffers"] = _sim_model.MessageHeaderData_MaxNumberBuffers_set
    __swig_getmethods__["MaxNumberBuffers"] = _sim_model.MessageHeaderData_MaxNumberBuffers_get
    if _newclass:
        MaxNumberBuffers = _swig_property(_sim_model.MessageHeaderData_MaxNumberBuffers_get, _sim_model.MessageHeaderData_MaxNumberBuffers_set)
    __swig_setmethods__["MaxMessageSize"] = _sim_model.MessageHeaderData_MaxMessageSize_set
    __swig_getmethods__["MaxMessageSize"] = _sim_model.MessageHeaderData_MaxMessageSize_get
    if _newclass:
        MaxMessageSize = _swig_property(_sim_model.MessageHeaderData_MaxMessageSize_get, _sim_model.MessageHeaderData_MaxMessageSize_set)
    __swig_setmethods__["CurrentReadSize"] = _sim_model.MessageHeaderData_CurrentReadSize_set
    __swig_getmethods__["CurrentReadSize"] = _sim_model.MessageHeaderData_CurrentReadSize_get
    if _newclass:
        CurrentReadSize = _swig_property(_sim_model.MessageHeaderData_CurrentReadSize_get, _sim_model.MessageHeaderData_CurrentReadSize_set)
    __swig_setmethods__["CurrentReadTime"] = _sim_model.MessageHeaderData_CurrentReadTime_set
    __swig_getmethods__["CurrentReadTime"] = _sim_model.MessageHeaderData_CurrentReadTime_get
    if _newclass:
        CurrentReadTime = _swig_property(_sim_model.MessageHeaderData_CurrentReadTime_get, _sim_model.MessageHeaderData_CurrentReadTime_set)
    __swig_setmethods__["StartingOffset"] = _sim_model.MessageHeaderData_StartingOffset_set
    __swig_getmethods__["StartingOffset"] = _sim_model.MessageHeaderData_StartingOffset_get
    if _newclass:
        StartingOffset = _swig_property(_sim_model.MessageHeaderData_StartingOffset_get, _sim_model.MessageHeaderData_StartingOffset_set)
    __swig_setmethods__["previousPublisher"] = _sim_model.MessageHeaderData_previousPublisher_set
    __swig_getmethods__["previousPublisher"] = _sim_model.MessageHeaderData_previousPublisher_get
    if _newclass:
        previousPublisher = _swig_property(_sim_model.MessageHeaderData_previousPublisher_get, _sim_model.MessageHeaderData_previousPublisher_set)

    def __init__(self):
        this = _sim_model.new_MessageHeaderData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_MessageHeaderData
    __del__ = lambda self: None
MessageHeaderData_swigregister = _sim_model.MessageHeaderData_swigregister
MessageHeaderData_swigregister(MessageHeaderData)

class SingleMessageHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleMessageHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleMessageHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["WriteClockNanos"] = _sim_model.SingleMessageHeader_WriteClockNanos_set
    __swig_getmethods__["WriteClockNanos"] = _sim_model.SingleMessageHeader_WriteClockNanos_get
    if _newclass:
        WriteClockNanos = _swig_property(_sim_model.SingleMessageHeader_WriteClockNanos_get, _sim_model.SingleMessageHeader_WriteClockNanos_set)
    __swig_setmethods__["WriteSize"] = _sim_model.SingleMessageHeader_WriteSize_set
    __swig_getmethods__["WriteSize"] = _sim_model.SingleMessageHeader_WriteSize_get
    if _newclass:
        WriteSize = _swig_property(_sim_model.SingleMessageHeader_WriteSize_get, _sim_model.SingleMessageHeader_WriteSize_set)

    def __init__(self):
        this = _sim_model.new_SingleMessageHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SingleMessageHeader
    __del__ = lambda self: None
SingleMessageHeader_swigregister = _sim_model.SingleMessageHeader_swigregister
SingleMessageHeader_swigregister(SingleMessageHeader)

class AllowAccessData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowAccessData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AllowAccessData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["accessList"] = _sim_model.AllowAccessData_accessList_set
    __swig_getmethods__["accessList"] = _sim_model.AllowAccessData_accessList_get
    if _newclass:
        accessList = _swig_property(_sim_model.AllowAccessData_accessList_get, _sim_model.AllowAccessData_accessList_set)
    __swig_setmethods__["publishedHere"] = _sim_model.AllowAccessData_publishedHere_set
    __swig_getmethods__["publishedHere"] = _sim_model.AllowAccessData_publishedHere_get
    if _newclass:
        publishedHere = _swig_property(_sim_model.AllowAccessData_publishedHere_get, _sim_model.AllowAccessData_publishedHere_set)

    def __init__(self):
        this = _sim_model.new_AllowAccessData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_AllowAccessData
    __del__ = lambda self: None
AllowAccessData_swigregister = _sim_model.AllowAccessData_swigregister
AllowAccessData_swigregister(AllowAccessData)

class MessageExchangeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageExchangeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageExchangeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["exchangeList"] = _sim_model.MessageExchangeData_exchangeList_set
    __swig_getmethods__["exchangeList"] = _sim_model.MessageExchangeData_exchangeList_get
    if _newclass:
        exchangeList = _swig_property(_sim_model.MessageExchangeData_exchangeList_get, _sim_model.MessageExchangeData_exchangeList_set)

    def __init__(self):
        this = _sim_model.new_MessageExchangeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_MessageExchangeData
    __del__ = lambda self: None
MessageExchangeData_swigregister = _sim_model.MessageExchangeData_swigregister
MessageExchangeData_swigregister(MessageExchangeData)

class MessageStorageContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStorageContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStorageContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bufferName"] = _sim_model.MessageStorageContainer_bufferName_set
    __swig_getmethods__["bufferName"] = _sim_model.MessageStorageContainer_bufferName_get
    if _newclass:
        bufferName = _swig_property(_sim_model.MessageStorageContainer_bufferName_get, _sim_model.MessageStorageContainer_bufferName_set)
    __swig_setmethods__["messageStorage"] = _sim_model.MessageStorageContainer_messageStorage_set
    __swig_getmethods__["messageStorage"] = _sim_model.MessageStorageContainer_messageStorage_get
    if _newclass:
        messageStorage = _swig_property(_sim_model.MessageStorageContainer_messageStorage_get, _sim_model.MessageStorageContainer_messageStorage_set)
    __swig_setmethods__["pubData"] = _sim_model.MessageStorageContainer_pubData_set
    __swig_getmethods__["pubData"] = _sim_model.MessageStorageContainer_pubData_get
    if _newclass:
        pubData = _swig_property(_sim_model.MessageStorageContainer_pubData_get, _sim_model.MessageStorageContainer_pubData_set)
    __swig_setmethods__["subData"] = _sim_model.MessageStorageContainer_subData_set
    __swig_getmethods__["subData"] = _sim_model.MessageStorageContainer_subData_get
    if _newclass:
        subData = _swig_property(_sim_model.MessageStorageContainer_subData_get, _sim_model.MessageStorageContainer_subData_set)
    __swig_setmethods__["exchangeData"] = _sim_model.MessageStorageContainer_exchangeData_set
    __swig_getmethods__["exchangeData"] = _sim_model.MessageStorageContainer_exchangeData_get
    if _newclass:
        exchangeData = _swig_property(_sim_model.MessageStorageContainer_exchangeData_get, _sim_model.MessageStorageContainer_exchangeData_set)

    def __init__(self):
        this = _sim_model.new_MessageStorageContainer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_MessageStorageContainer
    __del__ = lambda self: None
MessageStorageContainer_swigregister = _sim_model.MessageStorageContainer_swigregister
MessageStorageContainer_swigregister(MessageStorageContainer)

class MessageIdentData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageIdentData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageIdentData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bufferName"] = _sim_model.MessageIdentData_bufferName_set
    __swig_getmethods__["bufferName"] = _sim_model.MessageIdentData_bufferName_get
    if _newclass:
        bufferName = _swig_property(_sim_model.MessageIdentData_bufferName_get, _sim_model.MessageIdentData_bufferName_set)
    __swig_setmethods__["processBuffer"] = _sim_model.MessageIdentData_processBuffer_set
    __swig_getmethods__["processBuffer"] = _sim_model.MessageIdentData_processBuffer_get
    if _newclass:
        processBuffer = _swig_property(_sim_model.MessageIdentData_processBuffer_get, _sim_model.MessageIdentData_processBuffer_set)
    __swig_setmethods__["itemID"] = _sim_model.MessageIdentData_itemID_set
    __swig_getmethods__["itemID"] = _sim_model.MessageIdentData_itemID_get
    if _newclass:
        itemID = _swig_property(_sim_model.MessageIdentData_itemID_get, _sim_model.MessageIdentData_itemID_set)
    __swig_setmethods__["itemFound"] = _sim_model.MessageIdentData_itemFound_set
    __swig_getmethods__["itemFound"] = _sim_model.MessageIdentData_itemFound_get
    if _newclass:
        itemFound = _swig_property(_sim_model.MessageIdentData_itemFound_get, _sim_model.MessageIdentData_itemFound_set)

    def __init__(self):
        this = _sim_model.new_MessageIdentData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_MessageIdentData
    __del__ = lambda self: None
MessageIdentData_swigregister = _sim_model.MessageIdentData_swigregister
MessageIdentData_swigregister(MessageIdentData)

class SystemMessaging(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemMessaging, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SystemMessaging, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetInstance = staticmethod(_sim_model.SystemMessaging_GetInstance)
    else:
        GetInstance = _sim_model.SystemMessaging_GetInstance

    def AttachStorageBucket(self, *args):
        return _sim_model.SystemMessaging_AttachStorageBucket(self, *args)

    def SetNumMessages(self, MessageCount):
        return _sim_model.SystemMessaging_SetNumMessages(self, MessageCount)

    def GetMessageCount(self, bufferSelect=-1):
        return _sim_model.SystemMessaging_GetMessageCount(self, bufferSelect)

    def ClearMessageBuffer(self):
        return _sim_model.SystemMessaging_ClearMessageBuffer(self)

    def GetCurrentSize(self):
        return _sim_model.SystemMessaging_GetCurrentSize(self)

    def CreateNewMessage(self, *args):
        return _sim_model.SystemMessaging_CreateNewMessage(self, *args)

    def WriteMessage(self, MessageID, ClockTimeNanos, MsgSize, MsgPayload, moduleID=-1):
        return _sim_model.SystemMessaging_WriteMessage(self, MessageID, ClockTimeNanos, MsgSize, MsgPayload, moduleID)

    def ReadMessage(self, MessageID, DataHeader, MaxBytes, MsgPayload, moduleID=-1, CurrentOffset=0):
        return _sim_model.SystemMessaging_ReadMessage(self, MessageID, DataHeader, MaxBytes, MsgPayload, moduleID, CurrentOffset)
    if _newclass:
        AccessMessageData = staticmethod(_sim_model.SystemMessaging_AccessMessageData)
    else:
        AccessMessageData = _sim_model.SystemMessaging_AccessMessageData

    def FindMsgHeader(self, MessageID, bufferSelect=-1):
        return _sim_model.SystemMessaging_FindMsgHeader(self, MessageID, bufferSelect)

    def PrintAllMessageData(self):
        return _sim_model.SystemMessaging_PrintAllMessageData(self)

    def PrintMessageStats(self, MessageID):
        return _sim_model.SystemMessaging_PrintMessageStats(self, MessageID)

    def FindMessageName(self, MessageID, bufferSelect=-1):
        return _sim_model.SystemMessaging_FindMessageName(self, MessageID, bufferSelect)

    def FindMessageID(self, MessageName, bufferSelect=-1):
        return _sim_model.SystemMessaging_FindMessageID(self, MessageName, bufferSelect)

    def subscribeToMessage(self, messageName, messageSize, moduleID):
        return _sim_model.SystemMessaging_subscribeToMessage(self, messageName, messageSize, moduleID)

    def checkoutModuleID(self):
        return _sim_model.SystemMessaging_checkoutModuleID(self)

    def selectMessageBuffer(self, bufferUse):
        return _sim_model.SystemMessaging_selectMessageBuffer(self, bufferUse)

    def getProcessCount(self):
        return _sim_model.SystemMessaging_getProcessCount(self)

    def messagePublishSearch(self, messageName):
        return _sim_model.SystemMessaging_messagePublishSearch(self, messageName)

    def findMessageBuffer(self, bufferName):
        return _sim_model.SystemMessaging_findMessageBuffer(self, bufferName)

    def getUnpublishedMessages(self):
        return _sim_model.SystemMessaging_getUnpublishedMessages(self)

    def getUniqueMessageNames(self):
        return _sim_model.SystemMessaging_getUniqueMessageNames(self)

    def getMessageExchangeData(self, messageID):
        return _sim_model.SystemMessaging_getMessageExchangeData(self, messageID)

    def clearMessaging(self):
        return _sim_model.SystemMessaging_clearMessaging(self)

    def obtainWriteRights(self, messageID, moduleID):
        return _sim_model.SystemMessaging_obtainWriteRights(self, messageID, moduleID)

    def obtainReadRights(self, messageID, moduleID):
        return _sim_model.SystemMessaging_obtainReadRights(self, messageID, moduleID)

    def getFailureCount(self):
        return _sim_model.SystemMessaging_getFailureCount(self)
SystemMessaging_swigregister = _sim_model.SystemMessaging_swigregister
SystemMessaging_swigregister(SystemMessaging)

def SystemMessaging_GetInstance():
    return _sim_model.SystemMessaging_GetInstance()
SystemMessaging_GetInstance = _sim_model.SystemMessaging_GetInstance

def SystemMessaging_AccessMessageData(MsgBuffer, maxMsgBytes, CurrentOffset, DataHeader, maxReadBytes, OutputBuffer):
    return _sim_model.SystemMessaging_AccessMessageData(MsgBuffer, maxMsgBytes, CurrentOffset, DataHeader, maxReadBytes, OutputBuffer)
SystemMessaging_AccessMessageData = _sim_model.SystemMessaging_AccessMessageData


def vCopy(v, dim, result):
    return _sim_model.vCopy(v, dim, result)
vCopy = _sim_model.vCopy

def vSetZero(v, dim):
    return _sim_model.vSetZero(v, dim)
vSetZero = _sim_model.vSetZero

def vAdd(v1, dim, v2, result):
    return _sim_model.vAdd(v1, dim, v2, result)
vAdd = _sim_model.vAdd

def vSubtract(v1, dim, v2, result):
    return _sim_model.vSubtract(v1, dim, v2, result)
vSubtract = _sim_model.vSubtract

def vScale(scaleFactor, v, dim, result):
    return _sim_model.vScale(scaleFactor, v, dim, result)
vScale = _sim_model.vScale

def vDot(v1, dim, v2):
    return _sim_model.vDot(v1, dim, v2)
vDot = _sim_model.vDot

def vOuterProduct(v1, dim1, v2, dim2, result):
    return _sim_model.vOuterProduct(v1, dim1, v2, dim2, result)
vOuterProduct = _sim_model.vOuterProduct

def vtMultM(v, mx, dim1, dim2, result):
    return _sim_model.vtMultM(v, mx, dim1, dim2, result)
vtMultM = _sim_model.vtMultM

def vtMultMt(v, mx, dim1, dim2, result):
    return _sim_model.vtMultMt(v, mx, dim1, dim2, result)
vtMultMt = _sim_model.vtMultMt

def vNorm(v, dim):
    return _sim_model.vNorm(v, dim)
vNorm = _sim_model.vNorm

def vMax(v, dim):
    return _sim_model.vMax(v, dim)
vMax = _sim_model.vMax

def vMaxAbs(v, dim):
    return _sim_model.vMaxAbs(v, dim)
vMaxAbs = _sim_model.vMaxAbs

def vNormalize(v, dim, result):
    return _sim_model.vNormalize(v, dim, result)
vNormalize = _sim_model.vNormalize

def vIsEqual(v1, dim, v2, accuracy):
    return _sim_model.vIsEqual(v1, dim, v2, accuracy)
vIsEqual = _sim_model.vIsEqual

def vIsZero(v, dim, accuracy):
    return _sim_model.vIsZero(v, dim, accuracy)
vIsZero = _sim_model.vIsZero

def vPrint(pFile, name, v, dim):
    return _sim_model.vPrint(pFile, name, v, dim)
vPrint = _sim_model.vPrint

def vSort(Input, Output, dim):
    return _sim_model.vSort(Input, Output, dim)
vSort = _sim_model.vSort

def v2Set(v0, v1, result):
    return _sim_model.v2Set(v0, v1, result)
v2Set = _sim_model.v2Set

def v2Copy(v, result):
    return _sim_model.v2Copy(v, result)
v2Copy = _sim_model.v2Copy

def v2SetZero(v):
    return _sim_model.v2SetZero(v)
v2SetZero = _sim_model.v2SetZero

def v2Dot(v1, v2):
    return _sim_model.v2Dot(v1, v2)
v2Dot = _sim_model.v2Dot

def v2IsEqual(v1, v2, accuracy):
    return _sim_model.v2IsEqual(v1, v2, accuracy)
v2IsEqual = _sim_model.v2IsEqual

def v2IsZero(v, accuracy):
    return _sim_model.v2IsZero(v, accuracy)
v2IsZero = _sim_model.v2IsZero

def v2Add(v1, v2, result):
    return _sim_model.v2Add(v1, v2, result)
v2Add = _sim_model.v2Add

def v2Subtract(v1, v2, result):
    return _sim_model.v2Subtract(v1, v2, result)
v2Subtract = _sim_model.v2Subtract

def v3Set(v0, v1, v2, result):
    return _sim_model.v3Set(v0, v1, v2, result)
v3Set = _sim_model.v3Set

def v3Copy(v, result):
    return _sim_model.v3Copy(v, result)
v3Copy = _sim_model.v3Copy

def v3SetZero(v):
    return _sim_model.v3SetZero(v)
v3SetZero = _sim_model.v3SetZero

def v3Add(v1, v2, result):
    return _sim_model.v3Add(v1, v2, result)
v3Add = _sim_model.v3Add

def v3Subtract(v1, v2, result):
    return _sim_model.v3Subtract(v1, v2, result)
v3Subtract = _sim_model.v3Subtract

def v3Scale(scaleFactor, v, result):
    return _sim_model.v3Scale(scaleFactor, v, result)
v3Scale = _sim_model.v3Scale

def v3Dot(v1, v2):
    return _sim_model.v3Dot(v1, v2)
v3Dot = _sim_model.v3Dot

def v3OuterProduct(v1, v2, result):
    return _sim_model.v3OuterProduct(v1, v2, result)
v3OuterProduct = _sim_model.v3OuterProduct

def v3tMultM33(v, mx, result):
    return _sim_model.v3tMultM33(v, mx, result)
v3tMultM33 = _sim_model.v3tMultM33

def v3tMultM33t(v, mx, result):
    return _sim_model.v3tMultM33t(v, mx, result)
v3tMultM33t = _sim_model.v3tMultM33t

def v3Norm(v):
    return _sim_model.v3Norm(v)
v3Norm = _sim_model.v3Norm

def v3Normalize(v, result):
    return _sim_model.v3Normalize(v, result)
v3Normalize = _sim_model.v3Normalize

def v3IsEqual(v1, v2, accuracy):
    return _sim_model.v3IsEqual(v1, v2, accuracy)
v3IsEqual = _sim_model.v3IsEqual

def v3IsZero(v, accuracy):
    return _sim_model.v3IsZero(v, accuracy)
v3IsZero = _sim_model.v3IsZero

def v3Print(pFile, name, v):
    return _sim_model.v3Print(pFile, name, v)
v3Print = _sim_model.v3Print

def v3Cross(v1, v2, result):
    return _sim_model.v3Cross(v1, v2, result)
v3Cross = _sim_model.v3Cross

def v3Tilde(v, result):
    return _sim_model.v3Tilde(v, result)
v3Tilde = _sim_model.v3Tilde

def v3Sort(v, result):
    return _sim_model.v3Sort(v, result)
v3Sort = _sim_model.v3Sort

def v3PrintScreen(name, v):
    return _sim_model.v3PrintScreen(name, v)
v3PrintScreen = _sim_model.v3PrintScreen

def v4Set(v0, v1, v2, v3, result):
    return _sim_model.v4Set(v0, v1, v2, v3, result)
v4Set = _sim_model.v4Set

def v4Copy(v, result):
    return _sim_model.v4Copy(v, result)
v4Copy = _sim_model.v4Copy

def v4SetZero(v):
    return _sim_model.v4SetZero(v)
v4SetZero = _sim_model.v4SetZero

def v4Dot(v1, v2):
    return _sim_model.v4Dot(v1, v2)
v4Dot = _sim_model.v4Dot

def v4Norm(v):
    return _sim_model.v4Norm(v)
v4Norm = _sim_model.v4Norm

def v4IsEqual(v1, v2, accuracy):
    return _sim_model.v4IsEqual(v1, v2, accuracy)
v4IsEqual = _sim_model.v4IsEqual

def v4IsZero(v, accuracy):
    return _sim_model.v4IsZero(v, accuracy)
v4IsZero = _sim_model.v4IsZero

def v6Set(v0, v1, v2, v3, v4, v5, result):
    return _sim_model.v6Set(v0, v1, v2, v3, v4, v5, result)
v6Set = _sim_model.v6Set

def v6Copy(v, result):
    return _sim_model.v6Copy(v, result)
v6Copy = _sim_model.v6Copy

def v6Dot(v1, v2):
    return _sim_model.v6Dot(v1, v2)
v6Dot = _sim_model.v6Dot

def v6Scale(scaleFactor, v, result):
    return _sim_model.v6Scale(scaleFactor, v, result)
v6Scale = _sim_model.v6Scale

def v6OuterProduct(v1, v2, result):
    return _sim_model.v6OuterProduct(v1, v2, result)
v6OuterProduct = _sim_model.v6OuterProduct

def v6IsEqual(v1, v2, accuracy):
    return _sim_model.v6IsEqual(v1, v2, accuracy)
v6IsEqual = _sim_model.v6IsEqual

def mCopy(mx, dim1, dim2, result):
    return _sim_model.mCopy(mx, dim1, dim2, result)
mCopy = _sim_model.mCopy

def mSetZero(result, dim1, dim2):
    return _sim_model.mSetZero(result, dim1, dim2)
mSetZero = _sim_model.mSetZero

def mSetIdentity(result, dim1, dim2):
    return _sim_model.mSetIdentity(result, dim1, dim2)
mSetIdentity = _sim_model.mSetIdentity

def mDiag(v, dim, result):
    return _sim_model.mDiag(v, dim, result)
mDiag = _sim_model.mDiag

def mTranspose(mx, dim1, dim2, result):
    return _sim_model.mTranspose(mx, dim1, dim2, result)
mTranspose = _sim_model.mTranspose

def mAdd(mx1, dim1, dim2, mx2, result):
    return _sim_model.mAdd(mx1, dim1, dim2, mx2, result)
mAdd = _sim_model.mAdd

def mSubtract(mx1, dim1, dim2, mx2, result):
    return _sim_model.mSubtract(mx1, dim1, dim2, mx2, result)
mSubtract = _sim_model.mSubtract

def mScale(scaleFactor, mx, dim1, dim2, result):
    return _sim_model.mScale(scaleFactor, mx, dim1, dim2, result)
mScale = _sim_model.mScale

def mMultM(mx1, dim11, dim12, mx2, dim21, dim22, result):
    return _sim_model.mMultM(mx1, dim11, dim12, mx2, dim21, dim22, result)
mMultM = _sim_model.mMultM

def mtMultM(mx1, dim11, dim12, mx2, dim21, dim22, result):
    return _sim_model.mtMultM(mx1, dim11, dim12, mx2, dim21, dim22, result)
mtMultM = _sim_model.mtMultM

def mMultMt(mx1, dim11, dim12, mx2, dim21, dim22, result):
    return _sim_model.mMultMt(mx1, dim11, dim12, mx2, dim21, dim22, result)
mMultMt = _sim_model.mMultMt

def mtMultMt(mx1, dim11, dim12, mx2, dim21, dim22, result):
    return _sim_model.mtMultMt(mx1, dim11, dim12, mx2, dim21, dim22, result)
mtMultMt = _sim_model.mtMultMt

def mMultV(mx, dim1, dim2, v, result):
    return _sim_model.mMultV(mx, dim1, dim2, v, result)
mMultV = _sim_model.mMultV

def mtMultV(mx, dim1, dim2, v, result):
    return _sim_model.mtMultV(mx, dim1, dim2, v, result)
mtMultV = _sim_model.mtMultV

def mTrace(mx, dim):
    return _sim_model.mTrace(mx, dim)
mTrace = _sim_model.mTrace

def mDeterminant(mx, dim):
    return _sim_model.mDeterminant(mx, dim)
mDeterminant = _sim_model.mDeterminant

def mCofactor(mx, dim, result):
    return _sim_model.mCofactor(mx, dim, result)
mCofactor = _sim_model.mCofactor

def mInverse(mx, dim, result):
    return _sim_model.mInverse(mx, dim, result)
mInverse = _sim_model.mInverse

def mIsEqual(mx1, dim1, dim2, mx2, accuracy):
    return _sim_model.mIsEqual(mx1, dim1, dim2, mx2, accuracy)
mIsEqual = _sim_model.mIsEqual

def mIsZero(mx, dim1, dim2, accuracy):
    return _sim_model.mIsZero(mx, dim1, dim2, accuracy)
mIsZero = _sim_model.mIsZero

def mPrintScreen(name, mx, dim1, dim2):
    return _sim_model.mPrintScreen(name, mx, dim1, dim2)
mPrintScreen = _sim_model.mPrintScreen

def mPrint(pFile, name, mx, dim1, dim2):
    return _sim_model.mPrint(pFile, name, mx, dim1, dim2)
mPrint = _sim_model.mPrint

def mGetSubMatrix(mx, dim1, dim2, dim1Start, dim2Start, dim1Result, dim2Result, result):
    return _sim_model.mGetSubMatrix(mx, dim1, dim2, dim1Start, dim2Start, dim1Result, dim2Result, result)
mGetSubMatrix = _sim_model.mGetSubMatrix

def mSetSubMatrix(mx, dim1, dim2, result, dim1Result, dim2Result, dim1Start, dim2Start):
    return _sim_model.mSetSubMatrix(mx, dim1, dim2, result, dim1Result, dim2Result, dim1Start, dim2Start)
mSetSubMatrix = _sim_model.mSetSubMatrix

def m22Set(m00, m01, m10, m11, m):
    return _sim_model.m22Set(m00, m01, m10, m11, m)
m22Set = _sim_model.m22Set

def m22Copy(mx, result):
    return _sim_model.m22Copy(mx, result)
m22Copy = _sim_model.m22Copy

def m22SetZero(result):
    return _sim_model.m22SetZero(result)
m22SetZero = _sim_model.m22SetZero

def m22SetIdentity(result):
    return _sim_model.m22SetIdentity(result)
m22SetIdentity = _sim_model.m22SetIdentity

def m22Transpose(mx, result):
    return _sim_model.m22Transpose(mx, result)
m22Transpose = _sim_model.m22Transpose

def m22Add(mx1, mx2, result):
    return _sim_model.m22Add(mx1, mx2, result)
m22Add = _sim_model.m22Add

def m22Subtract(mx1, mx2, result):
    return _sim_model.m22Subtract(mx1, mx2, result)
m22Subtract = _sim_model.m22Subtract

def m22Scale(scaleFactor, mx, result):
    return _sim_model.m22Scale(scaleFactor, mx, result)
m22Scale = _sim_model.m22Scale

def m22MultM22(mx1, mx2, result):
    return _sim_model.m22MultM22(mx1, mx2, result)
m22MultM22 = _sim_model.m22MultM22

def m22tMultM22(mx1, mx2, result):
    return _sim_model.m22tMultM22(mx1, mx2, result)
m22tMultM22 = _sim_model.m22tMultM22

def m22MultM22t(mx1, mx2, result):
    return _sim_model.m22MultM22t(mx1, mx2, result)
m22MultM22t = _sim_model.m22MultM22t

def m22MultV2(mx, v, result):
    return _sim_model.m22MultV2(mx, v, result)
m22MultV2 = _sim_model.m22MultV2

def m22tMultV2(mx, v, result):
    return _sim_model.m22tMultV2(mx, v, result)
m22tMultV2 = _sim_model.m22tMultV2

def m22Trace(mx):
    return _sim_model.m22Trace(mx)
m22Trace = _sim_model.m22Trace

def m22Determinant(mx):
    return _sim_model.m22Determinant(mx)
m22Determinant = _sim_model.m22Determinant

def m22IsEqual(mx1, mx2, accuracy):
    return _sim_model.m22IsEqual(mx1, mx2, accuracy)
m22IsEqual = _sim_model.m22IsEqual

def m22IsZero(mx, accuracy):
    return _sim_model.m22IsZero(mx, accuracy)
m22IsZero = _sim_model.m22IsZero

def m22Print(pFile, name, mx):
    return _sim_model.m22Print(pFile, name, mx)
m22Print = _sim_model.m22Print

def m22Inverse(mx, result):
    return _sim_model.m22Inverse(mx, result)
m22Inverse = _sim_model.m22Inverse

def m22PrintScreen(name, mx):
    return _sim_model.m22PrintScreen(name, mx)
m22PrintScreen = _sim_model.m22PrintScreen

def m33Set(m00, m01, m02, m10, m11, m12, m20, m21, m22, m):
    return _sim_model.m33Set(m00, m01, m02, m10, m11, m12, m20, m21, m22, m)
m33Set = _sim_model.m33Set

def m33Copy(mx, result):
    return _sim_model.m33Copy(mx, result)
m33Copy = _sim_model.m33Copy

def m33SetZero(result):
    return _sim_model.m33SetZero(result)
m33SetZero = _sim_model.m33SetZero

def m33SetIdentity(result):
    return _sim_model.m33SetIdentity(result)
m33SetIdentity = _sim_model.m33SetIdentity

def m33Transpose(mx, result):
    return _sim_model.m33Transpose(mx, result)
m33Transpose = _sim_model.m33Transpose

def m33Add(mx1, mx2, result):
    return _sim_model.m33Add(mx1, mx2, result)
m33Add = _sim_model.m33Add

def m33Subtract(mx1, mx2, result):
    return _sim_model.m33Subtract(mx1, mx2, result)
m33Subtract = _sim_model.m33Subtract

def m33Scale(scaleFactor, mx, result):
    return _sim_model.m33Scale(scaleFactor, mx, result)
m33Scale = _sim_model.m33Scale

def m33MultM33(mx1, mx2, result):
    return _sim_model.m33MultM33(mx1, mx2, result)
m33MultM33 = _sim_model.m33MultM33

def m33tMultM33(mx1, mx2, result):
    return _sim_model.m33tMultM33(mx1, mx2, result)
m33tMultM33 = _sim_model.m33tMultM33

def m33MultM33t(mx1, mx2, result):
    return _sim_model.m33MultM33t(mx1, mx2, result)
m33MultM33t = _sim_model.m33MultM33t

def m33MultV3(mx, v, result):
    return _sim_model.m33MultV3(mx, v, result)
m33MultV3 = _sim_model.m33MultV3

def m33tMultV3(mx, v, result):
    return _sim_model.m33tMultV3(mx, v, result)
m33tMultV3 = _sim_model.m33tMultV3

def m33Trace(mx):
    return _sim_model.m33Trace(mx)
m33Trace = _sim_model.m33Trace

def m33Determinant(mx):
    return _sim_model.m33Determinant(mx)
m33Determinant = _sim_model.m33Determinant

def m33IsEqual(mx1, mx2, accuracy):
    return _sim_model.m33IsEqual(mx1, mx2, accuracy)
m33IsEqual = _sim_model.m33IsEqual

def m33IsZero(mx, accuracy):
    return _sim_model.m33IsZero(mx, accuracy)
m33IsZero = _sim_model.m33IsZero

def m33Print(pfile, name, mx):
    return _sim_model.m33Print(pfile, name, mx)
m33Print = _sim_model.m33Print

def m33Inverse(mx, result):
    return _sim_model.m33Inverse(mx, result)
m33Inverse = _sim_model.m33Inverse

def m33SingularValues(mx, result):
    return _sim_model.m33SingularValues(mx, result)
m33SingularValues = _sim_model.m33SingularValues

def m33EigenValues(mx, result):
    return _sim_model.m33EigenValues(mx, result)
m33EigenValues = _sim_model.m33EigenValues

def m33ConditionNumber(mx):
    return _sim_model.m33ConditionNumber(mx)
m33ConditionNumber = _sim_model.m33ConditionNumber

def m33PrintScreen(name, mx):
    return _sim_model.m33PrintScreen(name, mx)
m33PrintScreen = _sim_model.m33PrintScreen

def m44Set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, m):
    return _sim_model.m44Set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, m)
m44Set = _sim_model.m44Set

def m44Copy(mx, result):
    return _sim_model.m44Copy(mx, result)
m44Copy = _sim_model.m44Copy

def m44SetZero(result):
    return _sim_model.m44SetZero(result)
m44SetZero = _sim_model.m44SetZero

def m44MultV4(mx, v, result):
    return _sim_model.m44MultV4(mx, v, result)
m44MultV4 = _sim_model.m44MultV4

def m44Determinant(mx):
    return _sim_model.m44Determinant(mx)
m44Determinant = _sim_model.m44Determinant

def m44IsEqual(mx1, mx2, accuracy):
    return _sim_model.m44IsEqual(mx1, mx2, accuracy)
m44IsEqual = _sim_model.m44IsEqual

def m44Inverse(mx, result):
    return _sim_model.m44Inverse(mx, result)
m44Inverse = _sim_model.m44Inverse

def m66Set(m00, m01, m02, m03, m04, m05, m10, m11, m12, m13, m14, m15, m20, m21, m22, m23, m24, m25, m30, m31, m32, m33, m34, m35, m40, m41, m42, m43, m44, m45, m50, m51, m52, m53, m54, m55, m):
    return _sim_model.m66Set(m00, m01, m02, m03, m04, m05, m10, m11, m12, m13, m14, m15, m20, m21, m22, m23, m24, m25, m30, m31, m32, m33, m34, m35, m40, m41, m42, m43, m44, m45, m50, m51, m52, m53, m54, m55, m)
m66Set = _sim_model.m66Set

def m66Copy(mx, result):
    return _sim_model.m66Copy(mx, result)
m66Copy = _sim_model.m66Copy

def m66SetZero(result):
    return _sim_model.m66SetZero(result)
m66SetZero = _sim_model.m66SetZero

def m66SetIdentity(result):
    return _sim_model.m66SetIdentity(result)
m66SetIdentity = _sim_model.m66SetIdentity

def m66Transpose(mx, result):
    return _sim_model.m66Transpose(mx, result)
m66Transpose = _sim_model.m66Transpose

def m66Get33Matrix(row, col, m, mij):
    return _sim_model.m66Get33Matrix(row, col, m, mij)
m66Get33Matrix = _sim_model.m66Get33Matrix

def m66Set33Matrix(row, col, mij, m):
    return _sim_model.m66Set33Matrix(row, col, mij, m)
m66Set33Matrix = _sim_model.m66Set33Matrix

def m66Scale(scaleFactor, mx, result):
    return _sim_model.m66Scale(scaleFactor, mx, result)
m66Scale = _sim_model.m66Scale

def m66Add(mx1, mx2, result):
    return _sim_model.m66Add(mx1, mx2, result)
m66Add = _sim_model.m66Add

def m66Subtract(mx1, mx2, result):
    return _sim_model.m66Subtract(mx1, mx2, result)
m66Subtract = _sim_model.m66Subtract

def m66MultM66(mx1, mx2, result):
    return _sim_model.m66MultM66(mx1, mx2, result)
m66MultM66 = _sim_model.m66MultM66

def m66tMultM66(mx1, mx2, result):
    return _sim_model.m66tMultM66(mx1, mx2, result)
m66tMultM66 = _sim_model.m66tMultM66

def m66MultM66t(mx1, mx2, result):
    return _sim_model.m66MultM66t(mx1, mx2, result)
m66MultM66t = _sim_model.m66MultM66t

def m66MultV6(mx, v, result):
    return _sim_model.m66MultV6(mx, v, result)
m66MultV6 = _sim_model.m66MultV6

def m66tMultV6(mx, v, result):
    return _sim_model.m66tMultV6(mx, v, result)
m66tMultV6 = _sim_model.m66tMultV6

def m66IsEqual(mx1, mx2, accuracy):
    return _sim_model.m66IsEqual(mx1, mx2, accuracy)
m66IsEqual = _sim_model.m66IsEqual

def m66IsZero(mx, accuracy):
    return _sim_model.m66IsZero(mx, accuracy)
m66IsZero = _sim_model.m66IsZero

def m99SetZero(result):
    return _sim_model.m99SetZero(result)
m99SetZero = _sim_model.m99SetZero

def cubicRoots(a, result):
    return _sim_model.cubicRoots(a, result)
cubicRoots = _sim_model.cubicRoots

def addEP(b1, b2, result):
    return _sim_model.addEP(b1, b2, result)
addEP = _sim_model.addEP

def addEuler121(e1, e2, result):
    return _sim_model.addEuler121(e1, e2, result)
addEuler121 = _sim_model.addEuler121

def addEuler123(e1, e2, result):
    return _sim_model.addEuler123(e1, e2, result)
addEuler123 = _sim_model.addEuler123

def addEuler131(e1, e2, result):
    return _sim_model.addEuler131(e1, e2, result)
addEuler131 = _sim_model.addEuler131

def addEuler132(e1, e2, result):
    return _sim_model.addEuler132(e1, e2, result)
addEuler132 = _sim_model.addEuler132

def addEuler212(e1, e2, result):
    return _sim_model.addEuler212(e1, e2, result)
addEuler212 = _sim_model.addEuler212

def addEuler213(e1, e2, result):
    return _sim_model.addEuler213(e1, e2, result)
addEuler213 = _sim_model.addEuler213

def addEuler231(e1, e2, result):
    return _sim_model.addEuler231(e1, e2, result)
addEuler231 = _sim_model.addEuler231

def addEuler232(e1, e2, result):
    return _sim_model.addEuler232(e1, e2, result)
addEuler232 = _sim_model.addEuler232

def addEuler312(e1, e2, result):
    return _sim_model.addEuler312(e1, e2, result)
addEuler312 = _sim_model.addEuler312

def addEuler313(e1, e2, result):
    return _sim_model.addEuler313(e1, e2, result)
addEuler313 = _sim_model.addEuler313

def addEuler321(e1, e2, result):
    return _sim_model.addEuler321(e1, e2, result)
addEuler321 = _sim_model.addEuler321

def addEuler323(e1, e2, result):
    return _sim_model.addEuler323(e1, e2, result)
addEuler323 = _sim_model.addEuler323

def addGibbs(q1, q2, result):
    return _sim_model.addGibbs(q1, q2, result)
addGibbs = _sim_model.addGibbs

def addMRP(q1, q2, result):
    return _sim_model.addMRP(q1, q2, result)
addMRP = _sim_model.addMRP

def addPRV(q1, q2, result):
    return _sim_model.addPRV(q1, q2, result)
addPRV = _sim_model.addPRV

def BinvEP(q, B):
    return _sim_model.BinvEP(q, B)
BinvEP = _sim_model.BinvEP

def BinvEuler121(q, B):
    return _sim_model.BinvEuler121(q, B)
BinvEuler121 = _sim_model.BinvEuler121

def BinvEuler123(q, B):
    return _sim_model.BinvEuler123(q, B)
BinvEuler123 = _sim_model.BinvEuler123

def BinvEuler131(q, B):
    return _sim_model.BinvEuler131(q, B)
BinvEuler131 = _sim_model.BinvEuler131

def BinvEuler132(q, B):
    return _sim_model.BinvEuler132(q, B)
BinvEuler132 = _sim_model.BinvEuler132

def BinvEuler212(q, B):
    return _sim_model.BinvEuler212(q, B)
BinvEuler212 = _sim_model.BinvEuler212

def BinvEuler213(q, B):
    return _sim_model.BinvEuler213(q, B)
BinvEuler213 = _sim_model.BinvEuler213

def BinvEuler231(q, B):
    return _sim_model.BinvEuler231(q, B)
BinvEuler231 = _sim_model.BinvEuler231

def BinvEuler232(q, B):
    return _sim_model.BinvEuler232(q, B)
BinvEuler232 = _sim_model.BinvEuler232

def BinvEuler312(q, B):
    return _sim_model.BinvEuler312(q, B)
BinvEuler312 = _sim_model.BinvEuler312

def BinvEuler313(q, B):
    return _sim_model.BinvEuler313(q, B)
BinvEuler313 = _sim_model.BinvEuler313

def BinvEuler321(q, B):
    return _sim_model.BinvEuler321(q, B)
BinvEuler321 = _sim_model.BinvEuler321

def BinvEuler323(q, B):
    return _sim_model.BinvEuler323(q, B)
BinvEuler323 = _sim_model.BinvEuler323

def BinvGibbs(q, B):
    return _sim_model.BinvGibbs(q, B)
BinvGibbs = _sim_model.BinvGibbs

def BinvMRP(q, B):
    return _sim_model.BinvMRP(q, B)
BinvMRP = _sim_model.BinvMRP

def BinvPRV(q, B):
    return _sim_model.BinvPRV(q, B)
BinvPRV = _sim_model.BinvPRV

def BmatEP(q, B):
    return _sim_model.BmatEP(q, B)
BmatEP = _sim_model.BmatEP

def BmatEuler121(q, B):
    return _sim_model.BmatEuler121(q, B)
BmatEuler121 = _sim_model.BmatEuler121

def BmatEuler131(q, B):
    return _sim_model.BmatEuler131(q, B)
BmatEuler131 = _sim_model.BmatEuler131

def BmatEuler123(q, B):
    return _sim_model.BmatEuler123(q, B)
BmatEuler123 = _sim_model.BmatEuler123

def BmatEuler132(q, B):
    return _sim_model.BmatEuler132(q, B)
BmatEuler132 = _sim_model.BmatEuler132

def BmatEuler212(q, B):
    return _sim_model.BmatEuler212(q, B)
BmatEuler212 = _sim_model.BmatEuler212

def BmatEuler213(q, B):
    return _sim_model.BmatEuler213(q, B)
BmatEuler213 = _sim_model.BmatEuler213

def BmatEuler231(q, B):
    return _sim_model.BmatEuler231(q, B)
BmatEuler231 = _sim_model.BmatEuler231

def BmatEuler232(q, B):
    return _sim_model.BmatEuler232(q, B)
BmatEuler232 = _sim_model.BmatEuler232

def BmatEuler312(q, B):
    return _sim_model.BmatEuler312(q, B)
BmatEuler312 = _sim_model.BmatEuler312

def BmatEuler313(q, B):
    return _sim_model.BmatEuler313(q, B)
BmatEuler313 = _sim_model.BmatEuler313

def BmatEuler321(q, B):
    return _sim_model.BmatEuler321(q, B)
BmatEuler321 = _sim_model.BmatEuler321

def BmatEuler323(q, B):
    return _sim_model.BmatEuler323(q, B)
BmatEuler323 = _sim_model.BmatEuler323

def BmatGibbs(q, B):
    return _sim_model.BmatGibbs(q, B)
BmatGibbs = _sim_model.BmatGibbs

def BmatMRP(q, B):
    return _sim_model.BmatMRP(q, B)
BmatMRP = _sim_model.BmatMRP

def BmatPRV(q, B):
    return _sim_model.BmatPRV(q, B)
BmatPRV = _sim_model.BmatPRV

def C2EP(C, b):
    return _sim_model.C2EP(C, b)
C2EP = _sim_model.C2EP

def C2Euler121(C, q):
    return _sim_model.C2Euler121(C, q)
C2Euler121 = _sim_model.C2Euler121

def C2Euler123(C, q):
    return _sim_model.C2Euler123(C, q)
C2Euler123 = _sim_model.C2Euler123

def C2Euler131(C, q):
    return _sim_model.C2Euler131(C, q)
C2Euler131 = _sim_model.C2Euler131

def C2Euler132(C, q):
    return _sim_model.C2Euler132(C, q)
C2Euler132 = _sim_model.C2Euler132

def C2Euler212(C, q):
    return _sim_model.C2Euler212(C, q)
C2Euler212 = _sim_model.C2Euler212

def C2Euler213(C, q):
    return _sim_model.C2Euler213(C, q)
C2Euler213 = _sim_model.C2Euler213

def C2Euler231(C, q):
    return _sim_model.C2Euler231(C, q)
C2Euler231 = _sim_model.C2Euler231

def C2Euler232(C, q):
    return _sim_model.C2Euler232(C, q)
C2Euler232 = _sim_model.C2Euler232

def C2Euler312(C, q):
    return _sim_model.C2Euler312(C, q)
C2Euler312 = _sim_model.C2Euler312

def C2Euler313(C, q):
    return _sim_model.C2Euler313(C, q)
C2Euler313 = _sim_model.C2Euler313

def C2Euler321(C, q):
    return _sim_model.C2Euler321(C, q)
C2Euler321 = _sim_model.C2Euler321

def C2Euler323(C, q):
    return _sim_model.C2Euler323(C, q)
C2Euler323 = _sim_model.C2Euler323

def C2Gibbs(C, q):
    return _sim_model.C2Gibbs(C, q)
C2Gibbs = _sim_model.C2Gibbs

def C2MRP(C, q):
    return _sim_model.C2MRP(C, q)
C2MRP = _sim_model.C2MRP

def C2PRV(C, q):
    return _sim_model.C2PRV(C, q)
C2PRV = _sim_model.C2PRV

def dEP(q, w, dq):
    return _sim_model.dEP(q, w, dq)
dEP = _sim_model.dEP

def dEuler121(q, w, dq):
    return _sim_model.dEuler121(q, w, dq)
dEuler121 = _sim_model.dEuler121

def dEuler123(q, w, dq):
    return _sim_model.dEuler123(q, w, dq)
dEuler123 = _sim_model.dEuler123

def dEuler131(q, w, dq):
    return _sim_model.dEuler131(q, w, dq)
dEuler131 = _sim_model.dEuler131

def dEuler132(q, w, dq):
    return _sim_model.dEuler132(q, w, dq)
dEuler132 = _sim_model.dEuler132

def dEuler212(q, w, dq):
    return _sim_model.dEuler212(q, w, dq)
dEuler212 = _sim_model.dEuler212

def dEuler213(q, w, dq):
    return _sim_model.dEuler213(q, w, dq)
dEuler213 = _sim_model.dEuler213

def dEuler231(q, w, dq):
    return _sim_model.dEuler231(q, w, dq)
dEuler231 = _sim_model.dEuler231

def dEuler232(q, w, dq):
    return _sim_model.dEuler232(q, w, dq)
dEuler232 = _sim_model.dEuler232

def dEuler312(q, w, dq):
    return _sim_model.dEuler312(q, w, dq)
dEuler312 = _sim_model.dEuler312

def dEuler313(q, w, dq):
    return _sim_model.dEuler313(q, w, dq)
dEuler313 = _sim_model.dEuler313

def dEuler321(q, w, dq):
    return _sim_model.dEuler321(q, w, dq)
dEuler321 = _sim_model.dEuler321

def dEuler323(q, w, dq):
    return _sim_model.dEuler323(q, w, dq)
dEuler323 = _sim_model.dEuler323

def dGibbs(q, w, dq):
    return _sim_model.dGibbs(q, w, dq)
dGibbs = _sim_model.dGibbs

def dMRP(q, w, dq):
    return _sim_model.dMRP(q, w, dq)
dMRP = _sim_model.dMRP

def dPRV(q, w, dq):
    return _sim_model.dPRV(q, w, dq)
dPRV = _sim_model.dPRV

def elem2PRV(r, q):
    return _sim_model.elem2PRV(r, q)
elem2PRV = _sim_model.elem2PRV

def EP2C(q, C):
    return _sim_model.EP2C(q, C)
EP2C = _sim_model.EP2C

def EP2Euler121(q, e):
    return _sim_model.EP2Euler121(q, e)
EP2Euler121 = _sim_model.EP2Euler121

def EP2Euler123(q, e):
    return _sim_model.EP2Euler123(q, e)
EP2Euler123 = _sim_model.EP2Euler123

def EP2Euler131(q, e):
    return _sim_model.EP2Euler131(q, e)
EP2Euler131 = _sim_model.EP2Euler131

def EP2Euler132(q, e):
    return _sim_model.EP2Euler132(q, e)
EP2Euler132 = _sim_model.EP2Euler132

def EP2Euler212(q, e):
    return _sim_model.EP2Euler212(q, e)
EP2Euler212 = _sim_model.EP2Euler212

def EP2Euler213(q, e):
    return _sim_model.EP2Euler213(q, e)
EP2Euler213 = _sim_model.EP2Euler213

def EP2Euler231(q, e):
    return _sim_model.EP2Euler231(q, e)
EP2Euler231 = _sim_model.EP2Euler231

def EP2Euler232(q, e):
    return _sim_model.EP2Euler232(q, e)
EP2Euler232 = _sim_model.EP2Euler232

def EP2Euler312(q, e):
    return _sim_model.EP2Euler312(q, e)
EP2Euler312 = _sim_model.EP2Euler312

def EP2Euler313(q, e):
    return _sim_model.EP2Euler313(q, e)
EP2Euler313 = _sim_model.EP2Euler313

def EP2Euler321(q, e):
    return _sim_model.EP2Euler321(q, e)
EP2Euler321 = _sim_model.EP2Euler321

def EP2Euler323(q, e):
    return _sim_model.EP2Euler323(q, e)
EP2Euler323 = _sim_model.EP2Euler323

def EP2Gibbs(q1, q):
    return _sim_model.EP2Gibbs(q1, q)
EP2Gibbs = _sim_model.EP2Gibbs

def EP2MRP(q1, q):
    return _sim_model.EP2MRP(q1, q)
EP2MRP = _sim_model.EP2MRP

def EP2PRV(q1, q):
    return _sim_model.EP2PRV(q1, q)
EP2PRV = _sim_model.EP2PRV

def Euler1(x, m):
    return _sim_model.Euler1(x, m)
Euler1 = _sim_model.Euler1

def Euler2(x, m):
    return _sim_model.Euler2(x, m)
Euler2 = _sim_model.Euler2

def Euler3(x, m):
    return _sim_model.Euler3(x, m)
Euler3 = _sim_model.Euler3

def Euler1212C(q, C):
    return _sim_model.Euler1212C(q, C)
Euler1212C = _sim_model.Euler1212C

def Euler1212EP(e, q):
    return _sim_model.Euler1212EP(e, q)
Euler1212EP = _sim_model.Euler1212EP

def Euler1212Gibbs(e, q):
    return _sim_model.Euler1212Gibbs(e, q)
Euler1212Gibbs = _sim_model.Euler1212Gibbs

def Euler1212MRP(e, q):
    return _sim_model.Euler1212MRP(e, q)
Euler1212MRP = _sim_model.Euler1212MRP

def Euler1212PRV(e, q):
    return _sim_model.Euler1212PRV(e, q)
Euler1212PRV = _sim_model.Euler1212PRV

def Euler1232C(q, C):
    return _sim_model.Euler1232C(q, C)
Euler1232C = _sim_model.Euler1232C

def Euler1232EP(e, q):
    return _sim_model.Euler1232EP(e, q)
Euler1232EP = _sim_model.Euler1232EP

def Euler1232Gibbs(e, q):
    return _sim_model.Euler1232Gibbs(e, q)
Euler1232Gibbs = _sim_model.Euler1232Gibbs

def Euler1232MRP(e, q):
    return _sim_model.Euler1232MRP(e, q)
Euler1232MRP = _sim_model.Euler1232MRP

def Euler1232PRV(e, q):
    return _sim_model.Euler1232PRV(e, q)
Euler1232PRV = _sim_model.Euler1232PRV

def Euler1312C(q, C):
    return _sim_model.Euler1312C(q, C)
Euler1312C = _sim_model.Euler1312C

def Euler1312EP(e, q):
    return _sim_model.Euler1312EP(e, q)
Euler1312EP = _sim_model.Euler1312EP

def Euler1312Gibbs(e, q):
    return _sim_model.Euler1312Gibbs(e, q)
Euler1312Gibbs = _sim_model.Euler1312Gibbs

def Euler1312MRP(e, q):
    return _sim_model.Euler1312MRP(e, q)
Euler1312MRP = _sim_model.Euler1312MRP

def Euler1312PRV(e, q):
    return _sim_model.Euler1312PRV(e, q)
Euler1312PRV = _sim_model.Euler1312PRV

def Euler1322C(q, C):
    return _sim_model.Euler1322C(q, C)
Euler1322C = _sim_model.Euler1322C

def Euler1322EP(e, q):
    return _sim_model.Euler1322EP(e, q)
Euler1322EP = _sim_model.Euler1322EP

def Euler1322Gibbs(e, q):
    return _sim_model.Euler1322Gibbs(e, q)
Euler1322Gibbs = _sim_model.Euler1322Gibbs

def Euler1322MRP(e, q):
    return _sim_model.Euler1322MRP(e, q)
Euler1322MRP = _sim_model.Euler1322MRP

def Euler1322PRV(e, q):
    return _sim_model.Euler1322PRV(e, q)
Euler1322PRV = _sim_model.Euler1322PRV

def Euler2122C(q, C):
    return _sim_model.Euler2122C(q, C)
Euler2122C = _sim_model.Euler2122C

def Euler2122EP(e, q):
    return _sim_model.Euler2122EP(e, q)
Euler2122EP = _sim_model.Euler2122EP

def Euler2122Gibbs(e, q):
    return _sim_model.Euler2122Gibbs(e, q)
Euler2122Gibbs = _sim_model.Euler2122Gibbs

def Euler2122MRP(e, q):
    return _sim_model.Euler2122MRP(e, q)
Euler2122MRP = _sim_model.Euler2122MRP

def Euler2122PRV(e, q):
    return _sim_model.Euler2122PRV(e, q)
Euler2122PRV = _sim_model.Euler2122PRV

def Euler2132C(q, C):
    return _sim_model.Euler2132C(q, C)
Euler2132C = _sim_model.Euler2132C

def Euler2132EP(e, q):
    return _sim_model.Euler2132EP(e, q)
Euler2132EP = _sim_model.Euler2132EP

def Euler2132Gibbs(e, q):
    return _sim_model.Euler2132Gibbs(e, q)
Euler2132Gibbs = _sim_model.Euler2132Gibbs

def Euler2132MRP(e, q):
    return _sim_model.Euler2132MRP(e, q)
Euler2132MRP = _sim_model.Euler2132MRP

def Euler2132PRV(e, q):
    return _sim_model.Euler2132PRV(e, q)
Euler2132PRV = _sim_model.Euler2132PRV

def Euler2312C(q, C):
    return _sim_model.Euler2312C(q, C)
Euler2312C = _sim_model.Euler2312C

def Euler2312EP(e, q):
    return _sim_model.Euler2312EP(e, q)
Euler2312EP = _sim_model.Euler2312EP

def Euler2312Gibbs(e, q):
    return _sim_model.Euler2312Gibbs(e, q)
Euler2312Gibbs = _sim_model.Euler2312Gibbs

def Euler2312MRP(e, q):
    return _sim_model.Euler2312MRP(e, q)
Euler2312MRP = _sim_model.Euler2312MRP

def Euler2312PRV(e, q):
    return _sim_model.Euler2312PRV(e, q)
Euler2312PRV = _sim_model.Euler2312PRV

def Euler2322C(q, C):
    return _sim_model.Euler2322C(q, C)
Euler2322C = _sim_model.Euler2322C

def Euler2322EP(e, q):
    return _sim_model.Euler2322EP(e, q)
Euler2322EP = _sim_model.Euler2322EP

def Euler2322Gibbs(e, q):
    return _sim_model.Euler2322Gibbs(e, q)
Euler2322Gibbs = _sim_model.Euler2322Gibbs

def Euler2322MRP(e, q):
    return _sim_model.Euler2322MRP(e, q)
Euler2322MRP = _sim_model.Euler2322MRP

def Euler2322PRV(e, q):
    return _sim_model.Euler2322PRV(e, q)
Euler2322PRV = _sim_model.Euler2322PRV

def Euler3122C(q, C):
    return _sim_model.Euler3122C(q, C)
Euler3122C = _sim_model.Euler3122C

def Euler3122EP(e, q):
    return _sim_model.Euler3122EP(e, q)
Euler3122EP = _sim_model.Euler3122EP

def Euler3122Gibbs(e, q):
    return _sim_model.Euler3122Gibbs(e, q)
Euler3122Gibbs = _sim_model.Euler3122Gibbs

def Euler3122MRP(e, q):
    return _sim_model.Euler3122MRP(e, q)
Euler3122MRP = _sim_model.Euler3122MRP

def Euler3122PRV(e, q):
    return _sim_model.Euler3122PRV(e, q)
Euler3122PRV = _sim_model.Euler3122PRV

def Euler3132C(q, C):
    return _sim_model.Euler3132C(q, C)
Euler3132C = _sim_model.Euler3132C

def Euler3132EP(e, q):
    return _sim_model.Euler3132EP(e, q)
Euler3132EP = _sim_model.Euler3132EP

def Euler3132Gibbs(e, q):
    return _sim_model.Euler3132Gibbs(e, q)
Euler3132Gibbs = _sim_model.Euler3132Gibbs

def Euler3132MRP(e, q):
    return _sim_model.Euler3132MRP(e, q)
Euler3132MRP = _sim_model.Euler3132MRP

def Euler3132PRV(e, q):
    return _sim_model.Euler3132PRV(e, q)
Euler3132PRV = _sim_model.Euler3132PRV

def Euler3212C(q, C):
    return _sim_model.Euler3212C(q, C)
Euler3212C = _sim_model.Euler3212C

def Euler3212EP(e, q):
    return _sim_model.Euler3212EP(e, q)
Euler3212EP = _sim_model.Euler3212EP

def Euler3212Gibbs(e, q):
    return _sim_model.Euler3212Gibbs(e, q)
Euler3212Gibbs = _sim_model.Euler3212Gibbs

def Euler3212MRP(e, q):
    return _sim_model.Euler3212MRP(e, q)
Euler3212MRP = _sim_model.Euler3212MRP

def Euler3212PRV(e, q):
    return _sim_model.Euler3212PRV(e, q)
Euler3212PRV = _sim_model.Euler3212PRV

def Euler3232C(q, C):
    return _sim_model.Euler3232C(q, C)
Euler3232C = _sim_model.Euler3232C

def Euler3232EP(e, q):
    return _sim_model.Euler3232EP(e, q)
Euler3232EP = _sim_model.Euler3232EP

def Euler3232Gibbs(e, q):
    return _sim_model.Euler3232Gibbs(e, q)
Euler3232Gibbs = _sim_model.Euler3232Gibbs

def Euler3232MRP(e, q):
    return _sim_model.Euler3232MRP(e, q)
Euler3232MRP = _sim_model.Euler3232MRP

def Euler3232PRV(e, q):
    return _sim_model.Euler3232PRV(e, q)
Euler3232PRV = _sim_model.Euler3232PRV

def Gibbs2C(q, C):
    return _sim_model.Gibbs2C(q, C)
Gibbs2C = _sim_model.Gibbs2C

def Gibbs2EP(q1, q):
    return _sim_model.Gibbs2EP(q1, q)
Gibbs2EP = _sim_model.Gibbs2EP

def Gibbs2Euler121(q, e):
    return _sim_model.Gibbs2Euler121(q, e)
Gibbs2Euler121 = _sim_model.Gibbs2Euler121

def Gibbs2Euler123(q, e):
    return _sim_model.Gibbs2Euler123(q, e)
Gibbs2Euler123 = _sim_model.Gibbs2Euler123

def Gibbs2Euler131(q, e):
    return _sim_model.Gibbs2Euler131(q, e)
Gibbs2Euler131 = _sim_model.Gibbs2Euler131

def Gibbs2Euler132(q, e):
    return _sim_model.Gibbs2Euler132(q, e)
Gibbs2Euler132 = _sim_model.Gibbs2Euler132

def Gibbs2Euler212(q, e):
    return _sim_model.Gibbs2Euler212(q, e)
Gibbs2Euler212 = _sim_model.Gibbs2Euler212

def Gibbs2Euler213(q, e):
    return _sim_model.Gibbs2Euler213(q, e)
Gibbs2Euler213 = _sim_model.Gibbs2Euler213

def Gibbs2Euler231(q, e):
    return _sim_model.Gibbs2Euler231(q, e)
Gibbs2Euler231 = _sim_model.Gibbs2Euler231

def Gibbs2Euler232(q, e):
    return _sim_model.Gibbs2Euler232(q, e)
Gibbs2Euler232 = _sim_model.Gibbs2Euler232

def Gibbs2Euler312(q, e):
    return _sim_model.Gibbs2Euler312(q, e)
Gibbs2Euler312 = _sim_model.Gibbs2Euler312

def Gibbs2Euler313(q, e):
    return _sim_model.Gibbs2Euler313(q, e)
Gibbs2Euler313 = _sim_model.Gibbs2Euler313

def Gibbs2Euler321(q, e):
    return _sim_model.Gibbs2Euler321(q, e)
Gibbs2Euler321 = _sim_model.Gibbs2Euler321

def Gibbs2Euler323(q, e):
    return _sim_model.Gibbs2Euler323(q, e)
Gibbs2Euler323 = _sim_model.Gibbs2Euler323

def Gibbs2MRP(q1, q):
    return _sim_model.Gibbs2MRP(q1, q)
Gibbs2MRP = _sim_model.Gibbs2MRP

def Gibbs2PRV(q1, q):
    return _sim_model.Gibbs2PRV(q1, q)
Gibbs2PRV = _sim_model.Gibbs2PRV

def MRP2C(q, C):
    return _sim_model.MRP2C(q, C)
MRP2C = _sim_model.MRP2C

def MRP2EP(q1, q):
    return _sim_model.MRP2EP(q1, q)
MRP2EP = _sim_model.MRP2EP

def MRP2Euler121(q, e):
    return _sim_model.MRP2Euler121(q, e)
MRP2Euler121 = _sim_model.MRP2Euler121

def MRP2Euler123(q, e):
    return _sim_model.MRP2Euler123(q, e)
MRP2Euler123 = _sim_model.MRP2Euler123

def MRP2Euler131(q, e):
    return _sim_model.MRP2Euler131(q, e)
MRP2Euler131 = _sim_model.MRP2Euler131

def MRP2Euler132(q, e):
    return _sim_model.MRP2Euler132(q, e)
MRP2Euler132 = _sim_model.MRP2Euler132

def MRP2Euler212(q, e):
    return _sim_model.MRP2Euler212(q, e)
MRP2Euler212 = _sim_model.MRP2Euler212

def MRP2Euler213(q, e):
    return _sim_model.MRP2Euler213(q, e)
MRP2Euler213 = _sim_model.MRP2Euler213

def MRP2Euler231(q, e):
    return _sim_model.MRP2Euler231(q, e)
MRP2Euler231 = _sim_model.MRP2Euler231

def MRP2Euler232(q, e):
    return _sim_model.MRP2Euler232(q, e)
MRP2Euler232 = _sim_model.MRP2Euler232

def MRP2Euler312(q, e):
    return _sim_model.MRP2Euler312(q, e)
MRP2Euler312 = _sim_model.MRP2Euler312

def MRP2Euler313(q, e):
    return _sim_model.MRP2Euler313(q, e)
MRP2Euler313 = _sim_model.MRP2Euler313

def MRP2Euler321(q, e):
    return _sim_model.MRP2Euler321(q, e)
MRP2Euler321 = _sim_model.MRP2Euler321

def MRP2Euler323(q, e):
    return _sim_model.MRP2Euler323(q, e)
MRP2Euler323 = _sim_model.MRP2Euler323

def MRP2Gibbs(q1, q):
    return _sim_model.MRP2Gibbs(q1, q)
MRP2Gibbs = _sim_model.MRP2Gibbs

def MRP2PRV(q1, q):
    return _sim_model.MRP2PRV(q1, q)
MRP2PRV = _sim_model.MRP2PRV

def MRP2PRV_max(q1):
    return _sim_model.MRP2PRV_max(q1)
MRP2PRV_max = _sim_model.MRP2PRV_max

def MRPswitch(q, s2, s):
    return _sim_model.MRPswitch(q, s2, s)
MRPswitch = _sim_model.MRPswitch

def MRPshadow(qIn, qOut):
    return _sim_model.MRPshadow(qIn, qOut)
MRPshadow = _sim_model.MRPshadow

def wrapToPi(x):
    return _sim_model.wrapToPi(x)
wrapToPi = _sim_model.wrapToPi

def PRV2C(q, C):
    return _sim_model.PRV2C(q, C)
PRV2C = _sim_model.PRV2C

def PRV2elem(r, q):
    return _sim_model.PRV2elem(r, q)
PRV2elem = _sim_model.PRV2elem

def PRV2EP(q0, q):
    return _sim_model.PRV2EP(q0, q)
PRV2EP = _sim_model.PRV2EP

def PRV2Euler121(q, e):
    return _sim_model.PRV2Euler121(q, e)
PRV2Euler121 = _sim_model.PRV2Euler121

def PRV2Euler123(q, e):
    return _sim_model.PRV2Euler123(q, e)
PRV2Euler123 = _sim_model.PRV2Euler123

def PRV2Euler131(q, e):
    return _sim_model.PRV2Euler131(q, e)
PRV2Euler131 = _sim_model.PRV2Euler131

def PRV2Euler132(q, e):
    return _sim_model.PRV2Euler132(q, e)
PRV2Euler132 = _sim_model.PRV2Euler132

def PRV2Euler212(q, e):
    return _sim_model.PRV2Euler212(q, e)
PRV2Euler212 = _sim_model.PRV2Euler212

def PRV2Euler213(q, e):
    return _sim_model.PRV2Euler213(q, e)
PRV2Euler213 = _sim_model.PRV2Euler213

def PRV2Euler231(q, e):
    return _sim_model.PRV2Euler231(q, e)
PRV2Euler231 = _sim_model.PRV2Euler231

def PRV2Euler232(q, e):
    return _sim_model.PRV2Euler232(q, e)
PRV2Euler232 = _sim_model.PRV2Euler232

def PRV2Euler312(q, e):
    return _sim_model.PRV2Euler312(q, e)
PRV2Euler312 = _sim_model.PRV2Euler312

def PRV2Euler313(q, e):
    return _sim_model.PRV2Euler313(q, e)
PRV2Euler313 = _sim_model.PRV2Euler313

def PRV2Euler321(q, e):
    return _sim_model.PRV2Euler321(q, e)
PRV2Euler321 = _sim_model.PRV2Euler321

def PRV2Euler323(q, e):
    return _sim_model.PRV2Euler323(q, e)
PRV2Euler323 = _sim_model.PRV2Euler323

def PRV2Gibbs(q0, q):
    return _sim_model.PRV2Gibbs(q0, q)
PRV2Gibbs = _sim_model.PRV2Gibbs

def PRV2MRP(q0, q):
    return _sim_model.PRV2MRP(q0, q)
PRV2MRP = _sim_model.PRV2MRP

def subEP(b1, b2, q):
    return _sim_model.subEP(b1, b2, q)
subEP = _sim_model.subEP

def subEuler121(e, e1, e2):
    return _sim_model.subEuler121(e, e1, e2)
subEuler121 = _sim_model.subEuler121

def subEuler123(e, e1, e2):
    return _sim_model.subEuler123(e, e1, e2)
subEuler123 = _sim_model.subEuler123

def subEuler131(e, e1, e2):
    return _sim_model.subEuler131(e, e1, e2)
subEuler131 = _sim_model.subEuler131

def subEuler132(e, e1, e2):
    return _sim_model.subEuler132(e, e1, e2)
subEuler132 = _sim_model.subEuler132

def subEuler212(e, e1, e2):
    return _sim_model.subEuler212(e, e1, e2)
subEuler212 = _sim_model.subEuler212

def subEuler213(e, e1, e2):
    return _sim_model.subEuler213(e, e1, e2)
subEuler213 = _sim_model.subEuler213

def subEuler231(e, e1, e2):
    return _sim_model.subEuler231(e, e1, e2)
subEuler231 = _sim_model.subEuler231

def subEuler232(e, e1, e2):
    return _sim_model.subEuler232(e, e1, e2)
subEuler232 = _sim_model.subEuler232

def subEuler312(e, e1, e2):
    return _sim_model.subEuler312(e, e1, e2)
subEuler312 = _sim_model.subEuler312

def subEuler313(e, e1, e2):
    return _sim_model.subEuler313(e, e1, e2)
subEuler313 = _sim_model.subEuler313

def subEuler321(e, e1, e2):
    return _sim_model.subEuler321(e, e1, e2)
subEuler321 = _sim_model.subEuler321

def subEuler323(e, e1, e2):
    return _sim_model.subEuler323(e, e1, e2)
subEuler323 = _sim_model.subEuler323

def subGibbs(q1, q2, q):
    return _sim_model.subGibbs(q1, q2, q)
subGibbs = _sim_model.subGibbs

def subMRP(q1, q2, q):
    return _sim_model.subMRP(q1, q2, q)
subMRP = _sim_model.subMRP

def subPRV(q10, q20, q):
    return _sim_model.subPRV(q10, q20, q)
subPRV = _sim_model.subPRV

def Mi(angle, axis, C):
    return _sim_model.Mi(angle, axis, C)
Mi = _sim_model.Mi
N_DEBYE_PARAMETERS = _sim_model.N_DEBYE_PARAMETERS
CELESTIAL_MERCURY = _sim_model.CELESTIAL_MERCURY
CELESTIAL_VENUS = _sim_model.CELESTIAL_VENUS
CELESTIAL_EARTH = _sim_model.CELESTIAL_EARTH
CELESTIAL_MOON = _sim_model.CELESTIAL_MOON
CELESTIAL_MARS = _sim_model.CELESTIAL_MARS
CELESTIAL_PHOBOS = _sim_model.CELESTIAL_PHOBOS
CELESTIAL_DEIMOS = _sim_model.CELESTIAL_DEIMOS
CELESTIAL_JUPITER = _sim_model.CELESTIAL_JUPITER
CELESTIAL_SATURN = _sim_model.CELESTIAL_SATURN
CELESTIAL_URANUS = _sim_model.CELESTIAL_URANUS
CELESTIAL_NEPTUNE = _sim_model.CELESTIAL_NEPTUNE
CELESTIAL_PLUTO = _sim_model.CELESTIAL_PLUTO
CELESTIAL_SUN = _sim_model.CELESTIAL_SUN
MAX_CELESTIAL = _sim_model.MAX_CELESTIAL
class classicElements(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, classicElements, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classicElements, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _sim_model.classicElements_a_set
    __swig_getmethods__["a"] = _sim_model.classicElements_a_get
    if _newclass:
        a = _swig_property(_sim_model.classicElements_a_get, _sim_model.classicElements_a_set)
    __swig_setmethods__["e"] = _sim_model.classicElements_e_set
    __swig_getmethods__["e"] = _sim_model.classicElements_e_get
    if _newclass:
        e = _swig_property(_sim_model.classicElements_e_get, _sim_model.classicElements_e_set)
    __swig_setmethods__["i"] = _sim_model.classicElements_i_set
    __swig_getmethods__["i"] = _sim_model.classicElements_i_get
    if _newclass:
        i = _swig_property(_sim_model.classicElements_i_get, _sim_model.classicElements_i_set)
    __swig_setmethods__["Omega"] = _sim_model.classicElements_Omega_set
    __swig_getmethods__["Omega"] = _sim_model.classicElements_Omega_get
    if _newclass:
        Omega = _swig_property(_sim_model.classicElements_Omega_get, _sim_model.classicElements_Omega_set)
    __swig_setmethods__["omega"] = _sim_model.classicElements_omega_set
    __swig_getmethods__["omega"] = _sim_model.classicElements_omega_get
    if _newclass:
        omega = _swig_property(_sim_model.classicElements_omega_get, _sim_model.classicElements_omega_set)
    __swig_setmethods__["f"] = _sim_model.classicElements_f_set
    __swig_getmethods__["f"] = _sim_model.classicElements_f_get
    if _newclass:
        f = _swig_property(_sim_model.classicElements_f_get, _sim_model.classicElements_f_set)
    __swig_setmethods__["rmag"] = _sim_model.classicElements_rmag_set
    __swig_getmethods__["rmag"] = _sim_model.classicElements_rmag_get
    if _newclass:
        rmag = _swig_property(_sim_model.classicElements_rmag_get, _sim_model.classicElements_rmag_set)
    __swig_setmethods__["alpha"] = _sim_model.classicElements_alpha_set
    __swig_getmethods__["alpha"] = _sim_model.classicElements_alpha_get
    if _newclass:
        alpha = _swig_property(_sim_model.classicElements_alpha_get, _sim_model.classicElements_alpha_set)
    __swig_setmethods__["rPeriap"] = _sim_model.classicElements_rPeriap_set
    __swig_getmethods__["rPeriap"] = _sim_model.classicElements_rPeriap_get
    if _newclass:
        rPeriap = _swig_property(_sim_model.classicElements_rPeriap_get, _sim_model.classicElements_rPeriap_set)
    __swig_setmethods__["rApoap"] = _sim_model.classicElements_rApoap_set
    __swig_getmethods__["rApoap"] = _sim_model.classicElements_rApoap_get
    if _newclass:
        rApoap = _swig_property(_sim_model.classicElements_rApoap_get, _sim_model.classicElements_rApoap_set)

    def __init__(self):
        this = _sim_model.new_classicElements()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_classicElements
    __del__ = lambda self: None
classicElements_swigregister = _sim_model.classicElements_swigregister
classicElements_swigregister(classicElements)


def E2f(E, e):
    return _sim_model.E2f(E, e)
E2f = _sim_model.E2f

def E2M(E, e):
    return _sim_model.E2M(E, e)
E2M = _sim_model.E2M

def f2E(f, e):
    return _sim_model.f2E(f, e)
f2E = _sim_model.f2E

def f2H(f, e):
    return _sim_model.f2H(f, e)
f2H = _sim_model.f2H

def H2f(H, e):
    return _sim_model.H2f(H, e)
H2f = _sim_model.H2f

def H2N(H, e):
    return _sim_model.H2N(H, e)
H2N = _sim_model.H2N

def M2E(M, e):
    return _sim_model.M2E(M, e)
M2E = _sim_model.M2E

def N2H(N, e):
    return _sim_model.N2H(N, e)
N2H = _sim_model.N2H

def elem2rv(mu, elements, rVec, vVec):
    return _sim_model.elem2rv(mu, elements, rVec, vVec)
elem2rv = _sim_model.elem2rv

def rv2elem(mu, rVec, vVec, elements):
    return _sim_model.rv2elem(mu, rVec, vVec, elements)
rv2elem = _sim_model.rv2elem

def atmosphericDensity(alt):
    return _sim_model.atmosphericDensity(alt)
atmosphericDensity = _sim_model.atmosphericDensity

def debyeLength(alt):
    return _sim_model.debyeLength(alt)
debyeLength = _sim_model.debyeLength

def atmosphericDrag(Cd, A, m, rvec, vvec, advec):
    return _sim_model.atmosphericDrag(Cd, A, m, rvec, vvec, advec)
atmosphericDrag = _sim_model.atmosphericDrag

def jPerturb(rvec, num, ajtot):
    return _sim_model.jPerturb(rvec, num, ajtot)
jPerturb = _sim_model.jPerturb

def solarRad(A, m, sunvec, arvec):
    return _sim_model.solarRad(A, m, sunvec, arvec)
solarRad = _sim_model.solarRad
messageBuffer = _sim_model.messageBuffer
logBuffer = _sim_model.logBuffer
class SimModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimModel, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _sim_model.new_SimModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sim_model.delete_SimModel
    __del__ = lambda self: None

    def selfInitSimulation(self):
        return _sim_model.SimModel_selfInitSimulation(self)

    def crossInitSimulation(self):
        return _sim_model.SimModel_crossInitSimulation(self)

    def resetInitSimulation(self):
        return _sim_model.SimModel_resetInitSimulation(self)

    def StepUntilStop(self, SimStopTime, stopPri):
        return _sim_model.SimModel_StepUntilStop(self, SimStopTime, stopPri)

    def SingleStepProcesses(self, stopPri=-1):
        return _sim_model.SimModel_SingleStepProcesses(self, stopPri)

    def PrintSimulatedMessageData(self):
        return _sim_model.SimModel_PrintSimulatedMessageData(self)

    def addNewProcess(self, newProc):
        return _sim_model.SimModel_addNewProcess(self, newProc)

    def GetWriteData(self, MessageName, MaxSize, MessageData, logType=messageBuffer, LatestOffset=0):
        return _sim_model.SimModel_GetWriteData(self, MessageName, MaxSize, MessageData, logType, LatestOffset)

    def ResetSimulation(self):
        return _sim_model.SimModel_ResetSimulation(self)

    def WriteMessageData(self, MessageName, MessageSize, ClockTime, MessageData):
        return _sim_model.SimModel_WriteMessageData(self, MessageName, MessageSize, ClockTime, MessageData)

    def CreateNewMessage(self, *args):
        return _sim_model.SimModel_CreateNewMessage(self, *args)

    def logThisMessage(self, messageName, messagePeriod=0):
        return _sim_model.SimModel_logThisMessage(self, messageName, messagePeriod)

    def getNumMessages(self):
        return _sim_model.SimModel_getNumMessages(self)

    def getMessageName(self, messageID):
        return _sim_model.SimModel_getMessageName(self, messageID)

    def getMessageID(self, messageName):
        return _sim_model.SimModel_getMessageID(self, messageName)

    def populateMessageHeader(self, messageName, headerOut):
        return _sim_model.SimModel_populateMessageHeader(self, messageName, headerOut)

    def getUniqueMessageNames(self):
        return _sim_model.SimModel_getUniqueMessageNames(self)

    def getMessageExchangeData(self, *args):
        return _sim_model.SimModel_getMessageExchangeData(self, *args)

    def terminateSimulation(self):
        return _sim_model.SimModel_terminateSimulation(self)
    __swig_setmethods__["processList"] = _sim_model.SimModel_processList_set
    __swig_getmethods__["processList"] = _sim_model.SimModel_processList_get
    if _newclass:
        processList = _swig_property(_sim_model.SimModel_processList_get, _sim_model.SimModel_processList_set)
    __swig_setmethods__["SimulationName"] = _sim_model.SimModel_SimulationName_set
    __swig_getmethods__["SimulationName"] = _sim_model.SimModel_SimulationName_get
    if _newclass:
        SimulationName = _swig_property(_sim_model.SimModel_SimulationName_get, _sim_model.SimModel_SimulationName_set)
    __swig_setmethods__["CurrentNanos"] = _sim_model.SimModel_CurrentNanos_set
    __swig_getmethods__["CurrentNanos"] = _sim_model.SimModel_CurrentNanos_get
    if _newclass:
        CurrentNanos = _swig_property(_sim_model.SimModel_CurrentNanos_get, _sim_model.SimModel_CurrentNanos_set)
    __swig_setmethods__["NextTaskTime"] = _sim_model.SimModel_NextTaskTime_set
    __swig_getmethods__["NextTaskTime"] = _sim_model.SimModel_NextTaskTime_get
    if _newclass:
        NextTaskTime = _swig_property(_sim_model.SimModel_NextTaskTime_get, _sim_model.SimModel_NextTaskTime_set)
    __swig_setmethods__["nextProcPriority"] = _sim_model.SimModel_nextProcPriority_set
    __swig_getmethods__["nextProcPriority"] = _sim_model.SimModel_nextProcPriority_get
    if _newclass:
        nextProcPriority = _swig_property(_sim_model.SimModel_nextProcPriority_get, _sim_model.SimModel_nextProcPriority_set)
    __swig_setmethods__["messageLogs"] = _sim_model.SimModel_messageLogs_set
    __swig_getmethods__["messageLogs"] = _sim_model.SimModel_messageLogs_get
    if _newclass:
        messageLogs = _swig_property(_sim_model.SimModel_messageLogs_get, _sim_model.SimModel_messageLogs_set)
SimModel_swigregister = _sim_model.SimModel_swigregister
SimModel_swigregister(SimModel)

# This file is compatible with both classic and new-style classes.


