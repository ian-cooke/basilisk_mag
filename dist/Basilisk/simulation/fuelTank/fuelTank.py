# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fuelTank')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fuelTank')
    _fuelTank = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fuelTank', [dirname(__file__)])
        except ImportError:
            import _fuelTank
            return _fuelTank
        try:
            _mod = imp.load_module('_fuelTank', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fuelTank = swig_import_helper()
    del swig_import_helper
else:
    import _fuelTank
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fuelTank.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fuelTank.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fuelTank.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fuelTank.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fuelTank.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fuelTank.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fuelTank.SwigPyIterator_copy(self)

    def next(self):
        return _fuelTank.SwigPyIterator_next(self)

    def __next__(self):
        return _fuelTank.SwigPyIterator___next__(self)

    def previous(self):
        return _fuelTank.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fuelTank.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fuelTank.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fuelTank.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fuelTank.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fuelTank.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fuelTank.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fuelTank.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fuelTank.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _fuelTank.new_doubleArray(nelements)
new_doubleArray = _fuelTank.new_doubleArray

def delete_doubleArray(ary):
    return _fuelTank.delete_doubleArray(ary)
delete_doubleArray = _fuelTank.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _fuelTank.doubleArray_getitem(ary, index)
doubleArray_getitem = _fuelTank.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _fuelTank.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _fuelTank.doubleArray_setitem

def new_longArray(nelements):
    return _fuelTank.new_longArray(nelements)
new_longArray = _fuelTank.new_longArray

def delete_longArray(ary):
    return _fuelTank.delete_longArray(ary)
delete_longArray = _fuelTank.delete_longArray

def longArray_getitem(ary, index):
    return _fuelTank.longArray_getitem(ary, index)
longArray_getitem = _fuelTank.longArray_getitem

def longArray_setitem(ary, index, value):
    return _fuelTank.longArray_setitem(ary, index, value)
longArray_setitem = _fuelTank.longArray_setitem

def new_intArray(nelements):
    return _fuelTank.new_intArray(nelements)
new_intArray = _fuelTank.new_intArray

def delete_intArray(ary):
    return _fuelTank.delete_intArray(ary)
delete_intArray = _fuelTank.delete_intArray

def intArray_getitem(ary, index):
    return _fuelTank.intArray_getitem(ary, index)
intArray_getitem = _fuelTank.intArray_getitem

def intArray_setitem(ary, index, value):
    return _fuelTank.intArray_setitem(ary, index, value)
intArray_setitem = _fuelTank.intArray_setitem

def new_shortArray(nelements):
    return _fuelTank.new_shortArray(nelements)
new_shortArray = _fuelTank.new_shortArray

def delete_shortArray(ary):
    return _fuelTank.delete_shortArray(ary)
delete_shortArray = _fuelTank.delete_shortArray

def shortArray_getitem(ary, index):
    return _fuelTank.shortArray_getitem(ary, index)
shortArray_getitem = _fuelTank.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _fuelTank.shortArray_setitem(ary, index, value)
shortArray_setitem = _fuelTank.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _fuelTank.new_boolArray(nelements)
new_boolArray = _fuelTank.new_boolArray

def delete_boolArray(ary):
    return _fuelTank.delete_boolArray(ary)
delete_boolArray = _fuelTank.delete_boolArray

def boolArray_getitem(ary, index):
    return _fuelTank.boolArray_getitem(ary, index)
boolArray_getitem = _fuelTank.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _fuelTank.boolArray_setitem(ary, index, value)
boolArray_setitem = _fuelTank.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.IntVector___nonzero__(self)

    def __bool__(self):
        return _fuelTank.IntVector___bool__(self)

    def __len__(self):
        return _fuelTank.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _fuelTank.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fuelTank.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fuelTank.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fuelTank.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fuelTank.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fuelTank.IntVector___setitem__(self, *args)

    def pop(self):
        return _fuelTank.IntVector_pop(self)

    def append(self, x):
        return _fuelTank.IntVector_append(self, x)

    def empty(self):
        return _fuelTank.IntVector_empty(self)

    def size(self):
        return _fuelTank.IntVector_size(self)

    def swap(self, v):
        return _fuelTank.IntVector_swap(self, v)

    def begin(self):
        return _fuelTank.IntVector_begin(self)

    def end(self):
        return _fuelTank.IntVector_end(self)

    def rbegin(self):
        return _fuelTank.IntVector_rbegin(self)

    def rend(self):
        return _fuelTank.IntVector_rend(self)

    def clear(self):
        return _fuelTank.IntVector_clear(self)

    def get_allocator(self):
        return _fuelTank.IntVector_get_allocator(self)

    def pop_back(self):
        return _fuelTank.IntVector_pop_back(self)

    def erase(self, *args):
        return _fuelTank.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _fuelTank.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fuelTank.IntVector_push_back(self, x)

    def front(self):
        return _fuelTank.IntVector_front(self)

    def back(self):
        return _fuelTank.IntVector_back(self)

    def assign(self, n, x):
        return _fuelTank.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _fuelTank.IntVector_resize(self, *args)

    def insert(self, *args):
        return _fuelTank.IntVector_insert(self, *args)

    def reserve(self, n):
        return _fuelTank.IntVector_reserve(self, n)

    def capacity(self):
        return _fuelTank.IntVector_capacity(self)
    __swig_destroy__ = _fuelTank.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _fuelTank.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _fuelTank.DoubleVector___bool__(self)

    def __len__(self):
        return _fuelTank.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _fuelTank.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fuelTank.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fuelTank.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fuelTank.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fuelTank.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fuelTank.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _fuelTank.DoubleVector_pop(self)

    def append(self, x):
        return _fuelTank.DoubleVector_append(self, x)

    def empty(self):
        return _fuelTank.DoubleVector_empty(self)

    def size(self):
        return _fuelTank.DoubleVector_size(self)

    def swap(self, v):
        return _fuelTank.DoubleVector_swap(self, v)

    def begin(self):
        return _fuelTank.DoubleVector_begin(self)

    def end(self):
        return _fuelTank.DoubleVector_end(self)

    def rbegin(self):
        return _fuelTank.DoubleVector_rbegin(self)

    def rend(self):
        return _fuelTank.DoubleVector_rend(self)

    def clear(self):
        return _fuelTank.DoubleVector_clear(self)

    def get_allocator(self):
        return _fuelTank.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _fuelTank.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _fuelTank.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _fuelTank.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fuelTank.DoubleVector_push_back(self, x)

    def front(self):
        return _fuelTank.DoubleVector_front(self)

    def back(self):
        return _fuelTank.DoubleVector_back(self)

    def assign(self, n, x):
        return _fuelTank.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _fuelTank.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _fuelTank.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _fuelTank.DoubleVector_reserve(self, n)

    def capacity(self):
        return _fuelTank.DoubleVector_capacity(self)
    __swig_destroy__ = _fuelTank.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _fuelTank.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.StringVector___nonzero__(self)

    def __bool__(self):
        return _fuelTank.StringVector___bool__(self)

    def __len__(self):
        return _fuelTank.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _fuelTank.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fuelTank.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fuelTank.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fuelTank.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fuelTank.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fuelTank.StringVector___setitem__(self, *args)

    def pop(self):
        return _fuelTank.StringVector_pop(self)

    def append(self, x):
        return _fuelTank.StringVector_append(self, x)

    def empty(self):
        return _fuelTank.StringVector_empty(self)

    def size(self):
        return _fuelTank.StringVector_size(self)

    def swap(self, v):
        return _fuelTank.StringVector_swap(self, v)

    def begin(self):
        return _fuelTank.StringVector_begin(self)

    def end(self):
        return _fuelTank.StringVector_end(self)

    def rbegin(self):
        return _fuelTank.StringVector_rbegin(self)

    def rend(self):
        return _fuelTank.StringVector_rend(self)

    def clear(self):
        return _fuelTank.StringVector_clear(self)

    def get_allocator(self):
        return _fuelTank.StringVector_get_allocator(self)

    def pop_back(self):
        return _fuelTank.StringVector_pop_back(self)

    def erase(self, *args):
        return _fuelTank.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _fuelTank.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fuelTank.StringVector_push_back(self, x)

    def front(self):
        return _fuelTank.StringVector_front(self)

    def back(self):
        return _fuelTank.StringVector_back(self)

    def assign(self, n, x):
        return _fuelTank.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _fuelTank.StringVector_resize(self, *args)

    def insert(self, *args):
        return _fuelTank.StringVector_insert(self, *args)

    def reserve(self, n):
        return _fuelTank.StringVector_reserve(self, n)

    def capacity(self):
        return _fuelTank.StringVector_capacity(self)
    __swig_destroy__ = _fuelTank.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _fuelTank.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.StringSet___nonzero__(self)

    def __bool__(self):
        return _fuelTank.StringSet___bool__(self)

    def __len__(self):
        return _fuelTank.StringSet___len__(self)

    def append(self, x):
        return _fuelTank.StringSet_append(self, x)

    def __contains__(self, x):
        return _fuelTank.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _fuelTank.StringSet___getitem__(self, i)

    def add(self, x):
        return _fuelTank.StringSet_add(self, x)

    def discard(self, x):
        return _fuelTank.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _fuelTank.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _fuelTank.StringSet_empty(self)

    def size(self):
        return _fuelTank.StringSet_size(self)

    def clear(self):
        return _fuelTank.StringSet_clear(self)

    def swap(self, v):
        return _fuelTank.StringSet_swap(self, v)

    def count(self, x):
        return _fuelTank.StringSet_count(self, x)

    def begin(self):
        return _fuelTank.StringSet_begin(self)

    def end(self):
        return _fuelTank.StringSet_end(self)

    def rbegin(self):
        return _fuelTank.StringSet_rbegin(self)

    def rend(self):
        return _fuelTank.StringSet_rend(self)

    def erase(self, *args):
        return _fuelTank.StringSet_erase(self, *args)

    def find(self, x):
        return _fuelTank.StringSet_find(self, x)

    def lower_bound(self, x):
        return _fuelTank.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _fuelTank.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _fuelTank.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _fuelTank.StringSet_insert(self, __x)
    __swig_destroy__ = _fuelTank.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _fuelTank.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.intSet___nonzero__(self)

    def __bool__(self):
        return _fuelTank.intSet___bool__(self)

    def __len__(self):
        return _fuelTank.intSet___len__(self)

    def append(self, x):
        return _fuelTank.intSet_append(self, x)

    def __contains__(self, x):
        return _fuelTank.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _fuelTank.intSet___getitem__(self, i)

    def add(self, x):
        return _fuelTank.intSet_add(self, x)

    def discard(self, x):
        return _fuelTank.intSet_discard(self, x)

    def __init__(self, *args):
        this = _fuelTank.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _fuelTank.intSet_empty(self)

    def size(self):
        return _fuelTank.intSet_size(self)

    def clear(self):
        return _fuelTank.intSet_clear(self)

    def swap(self, v):
        return _fuelTank.intSet_swap(self, v)

    def count(self, x):
        return _fuelTank.intSet_count(self, x)

    def begin(self):
        return _fuelTank.intSet_begin(self)

    def end(self):
        return _fuelTank.intSet_end(self)

    def rbegin(self):
        return _fuelTank.intSet_rbegin(self)

    def rend(self):
        return _fuelTank.intSet_rend(self)

    def erase(self, *args):
        return _fuelTank.intSet_erase(self, *args)

    def find(self, x):
        return _fuelTank.intSet_find(self, x)

    def lower_bound(self, x):
        return _fuelTank.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _fuelTank.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _fuelTank.intSet_equal_range(self, x)

    def insert(self, __x):
        return _fuelTank.intSet_insert(self, __x)
    __swig_destroy__ = _fuelTank.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _fuelTank.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _fuelTank.ConstCharVector___bool__(self)

    def __len__(self):
        return _fuelTank.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _fuelTank.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fuelTank.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fuelTank.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fuelTank.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fuelTank.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fuelTank.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _fuelTank.ConstCharVector_pop(self)

    def append(self, x):
        return _fuelTank.ConstCharVector_append(self, x)

    def empty(self):
        return _fuelTank.ConstCharVector_empty(self)

    def size(self):
        return _fuelTank.ConstCharVector_size(self)

    def swap(self, v):
        return _fuelTank.ConstCharVector_swap(self, v)

    def begin(self):
        return _fuelTank.ConstCharVector_begin(self)

    def end(self):
        return _fuelTank.ConstCharVector_end(self)

    def rbegin(self):
        return _fuelTank.ConstCharVector_rbegin(self)

    def rend(self):
        return _fuelTank.ConstCharVector_rend(self)

    def clear(self):
        return _fuelTank.ConstCharVector_clear(self)

    def get_allocator(self):
        return _fuelTank.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _fuelTank.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _fuelTank.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _fuelTank.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fuelTank.ConstCharVector_push_back(self, x)

    def front(self):
        return _fuelTank.ConstCharVector_front(self)

    def back(self):
        return _fuelTank.ConstCharVector_back(self)

    def assign(self, n, x):
        return _fuelTank.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _fuelTank.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _fuelTank.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _fuelTank.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _fuelTank.ConstCharVector_capacity(self)
    __swig_destroy__ = _fuelTank.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _fuelTank.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fuelTank.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fuelTank.MultiArray___nonzero__(self)

    def __bool__(self):
        return _fuelTank.MultiArray___bool__(self)

    def __len__(self):
        return _fuelTank.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _fuelTank.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fuelTank.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fuelTank.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fuelTank.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fuelTank.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fuelTank.MultiArray___setitem__(self, *args)

    def pop(self):
        return _fuelTank.MultiArray_pop(self)

    def append(self, x):
        return _fuelTank.MultiArray_append(self, x)

    def empty(self):
        return _fuelTank.MultiArray_empty(self)

    def size(self):
        return _fuelTank.MultiArray_size(self)

    def swap(self, v):
        return _fuelTank.MultiArray_swap(self, v)

    def begin(self):
        return _fuelTank.MultiArray_begin(self)

    def end(self):
        return _fuelTank.MultiArray_end(self)

    def rbegin(self):
        return _fuelTank.MultiArray_rbegin(self)

    def rend(self):
        return _fuelTank.MultiArray_rend(self)

    def clear(self):
        return _fuelTank.MultiArray_clear(self)

    def get_allocator(self):
        return _fuelTank.MultiArray_get_allocator(self)

    def pop_back(self):
        return _fuelTank.MultiArray_pop_back(self)

    def erase(self, *args):
        return _fuelTank.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _fuelTank.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fuelTank.MultiArray_push_back(self, x)

    def front(self):
        return _fuelTank.MultiArray_front(self)

    def back(self):
        return _fuelTank.MultiArray_back(self)

    def assign(self, n, x):
        return _fuelTank.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _fuelTank.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _fuelTank.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _fuelTank.MultiArray_reserve(self, n)

    def capacity(self):
        return _fuelTank.MultiArray_capacity(self)
    __swig_destroy__ = _fuelTank.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _fuelTank.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fuelTank.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _fuelTank.SysModel_SelfInit(self)

    def CrossInit(self):
        return _fuelTank.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _fuelTank.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _fuelTank.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _fuelTank.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _fuelTank.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _fuelTank.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_fuelTank.SysModel_ModelTag_get, _fuelTank.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _fuelTank.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _fuelTank.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_fuelTank.SysModel_CallCounts_get, _fuelTank.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _fuelTank.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _fuelTank.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_fuelTank.SysModel_RNGSeed_get, _fuelTank.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _fuelTank.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _fuelTank.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_fuelTank.SysModel_moduleID_get, _fuelTank.SysModel_moduleID_set)
SysModel_swigregister = _fuelTank.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _fuelTank.StateData_state_set
    __swig_getmethods__["state"] = _fuelTank.StateData_state_get
    if _newclass:
        state = _swig_property(_fuelTank.StateData_state_get, _fuelTank.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _fuelTank.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _fuelTank.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_fuelTank.StateData_stateDeriv_get, _fuelTank.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _fuelTank.StateData_stateName_set
    __swig_getmethods__["stateName"] = _fuelTank.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_fuelTank.StateData_stateName_get, _fuelTank.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _fuelTank.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _fuelTank.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_fuelTank.StateData_stateEnabled_get, _fuelTank.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _fuelTank.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _fuelTank.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _fuelTank.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _fuelTank.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _fuelTank.StateData_getState(self)

    def getStateDeriv(self):
        return _fuelTank.StateData_getStateDeriv(self)

    def getName(self):
        return _fuelTank.StateData_getName(self)

    def getRowSize(self):
        return _fuelTank.StateData_getRowSize(self)

    def getColumnSize(self):
        return _fuelTank.StateData_getColumnSize(self)

    def isStateActive(self):
        return _fuelTank.StateData_isStateActive(self)

    def disable(self):
        return _fuelTank.StateData_disable(self)

    def enable(self):
        return _fuelTank.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _fuelTank.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _fuelTank.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _fuelTank.StateData___mul__(self, scaleFactor)
StateData_swigregister = _fuelTank.StateData_swigregister
StateData_swigregister(StateData)

class BackSubMatrices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackSubMatrices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackSubMatrices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrixA"] = _fuelTank.BackSubMatrices_matrixA_set
    __swig_getmethods__["matrixA"] = _fuelTank.BackSubMatrices_matrixA_get
    if _newclass:
        matrixA = _swig_property(_fuelTank.BackSubMatrices_matrixA_get, _fuelTank.BackSubMatrices_matrixA_set)
    __swig_setmethods__["matrixB"] = _fuelTank.BackSubMatrices_matrixB_set
    __swig_getmethods__["matrixB"] = _fuelTank.BackSubMatrices_matrixB_get
    if _newclass:
        matrixB = _swig_property(_fuelTank.BackSubMatrices_matrixB_get, _fuelTank.BackSubMatrices_matrixB_set)
    __swig_setmethods__["matrixC"] = _fuelTank.BackSubMatrices_matrixC_set
    __swig_getmethods__["matrixC"] = _fuelTank.BackSubMatrices_matrixC_get
    if _newclass:
        matrixC = _swig_property(_fuelTank.BackSubMatrices_matrixC_get, _fuelTank.BackSubMatrices_matrixC_set)
    __swig_setmethods__["matrixD"] = _fuelTank.BackSubMatrices_matrixD_set
    __swig_getmethods__["matrixD"] = _fuelTank.BackSubMatrices_matrixD_get
    if _newclass:
        matrixD = _swig_property(_fuelTank.BackSubMatrices_matrixD_get, _fuelTank.BackSubMatrices_matrixD_set)
    __swig_setmethods__["vecTrans"] = _fuelTank.BackSubMatrices_vecTrans_set
    __swig_getmethods__["vecTrans"] = _fuelTank.BackSubMatrices_vecTrans_get
    if _newclass:
        vecTrans = _swig_property(_fuelTank.BackSubMatrices_vecTrans_get, _fuelTank.BackSubMatrices_vecTrans_set)
    __swig_setmethods__["vecRot"] = _fuelTank.BackSubMatrices_vecRot_set
    __swig_getmethods__["vecRot"] = _fuelTank.BackSubMatrices_vecRot_get
    if _newclass:
        vecRot = _swig_property(_fuelTank.BackSubMatrices_vecRot_get, _fuelTank.BackSubMatrices_vecRot_set)

    def __init__(self, *args):
        this = _fuelTank.new_BackSubMatrices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_BackSubMatrices
    __del__ = lambda self: None
BackSubMatrices_swigregister = _fuelTank.BackSubMatrices_swigregister
BackSubMatrices_swigregister(BackSubMatrices)

class EffectorMassProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorMassProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorMassProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mEff"] = _fuelTank.EffectorMassProps_mEff_set
    __swig_getmethods__["mEff"] = _fuelTank.EffectorMassProps_mEff_get
    if _newclass:
        mEff = _swig_property(_fuelTank.EffectorMassProps_mEff_get, _fuelTank.EffectorMassProps_mEff_set)
    __swig_setmethods__["mEffDot"] = _fuelTank.EffectorMassProps_mEffDot_set
    __swig_getmethods__["mEffDot"] = _fuelTank.EffectorMassProps_mEffDot_get
    if _newclass:
        mEffDot = _swig_property(_fuelTank.EffectorMassProps_mEffDot_get, _fuelTank.EffectorMassProps_mEffDot_set)
    __swig_setmethods__["IEffPntB_B"] = _fuelTank.EffectorMassProps_IEffPntB_B_set
    __swig_getmethods__["IEffPntB_B"] = _fuelTank.EffectorMassProps_IEffPntB_B_get
    if _newclass:
        IEffPntB_B = _swig_property(_fuelTank.EffectorMassProps_IEffPntB_B_get, _fuelTank.EffectorMassProps_IEffPntB_B_set)
    __swig_setmethods__["rEff_CB_B"] = _fuelTank.EffectorMassProps_rEff_CB_B_set
    __swig_getmethods__["rEff_CB_B"] = _fuelTank.EffectorMassProps_rEff_CB_B_get
    if _newclass:
        rEff_CB_B = _swig_property(_fuelTank.EffectorMassProps_rEff_CB_B_get, _fuelTank.EffectorMassProps_rEff_CB_B_set)
    __swig_setmethods__["rEffPrime_CB_B"] = _fuelTank.EffectorMassProps_rEffPrime_CB_B_set
    __swig_getmethods__["rEffPrime_CB_B"] = _fuelTank.EffectorMassProps_rEffPrime_CB_B_get
    if _newclass:
        rEffPrime_CB_B = _swig_property(_fuelTank.EffectorMassProps_rEffPrime_CB_B_get, _fuelTank.EffectorMassProps_rEffPrime_CB_B_set)
    __swig_setmethods__["IEffPrimePntB_B"] = _fuelTank.EffectorMassProps_IEffPrimePntB_B_set
    __swig_getmethods__["IEffPrimePntB_B"] = _fuelTank.EffectorMassProps_IEffPrimePntB_B_get
    if _newclass:
        IEffPrimePntB_B = _swig_property(_fuelTank.EffectorMassProps_IEffPrimePntB_B_get, _fuelTank.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self, *args):
        this = _fuelTank.new_EffectorMassProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_EffectorMassProps
    __del__ = lambda self: None
EffectorMassProps_swigregister = _fuelTank.EffectorMassProps_swigregister
EffectorMassProps_swigregister(EffectorMassProps)

class StateEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _fuelTank.StateEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _fuelTank.StateEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_fuelTank.StateEffector_nameOfSpacecraftAttachedTo_get, _fuelTank.StateEffector_nameOfSpacecraftAttachedTo_set)
    __swig_setmethods__["effProps"] = _fuelTank.StateEffector_effProps_set
    __swig_getmethods__["effProps"] = _fuelTank.StateEffector_effProps_get
    if _newclass:
        effProps = _swig_property(_fuelTank.StateEffector_effProps_get, _fuelTank.StateEffector_effProps_set)
    __swig_setmethods__["forceOnBody_B"] = _fuelTank.StateEffector_forceOnBody_B_set
    __swig_getmethods__["forceOnBody_B"] = _fuelTank.StateEffector_forceOnBody_B_get
    if _newclass:
        forceOnBody_B = _swig_property(_fuelTank.StateEffector_forceOnBody_B_get, _fuelTank.StateEffector_forceOnBody_B_set)
    __swig_setmethods__["torqueOnBodyPntB_B"] = _fuelTank.StateEffector_torqueOnBodyPntB_B_set
    __swig_getmethods__["torqueOnBodyPntB_B"] = _fuelTank.StateEffector_torqueOnBodyPntB_B_get
    if _newclass:
        torqueOnBodyPntB_B = _swig_property(_fuelTank.StateEffector_torqueOnBodyPntB_B_get, _fuelTank.StateEffector_torqueOnBodyPntB_B_set)
    __swig_setmethods__["torqueOnBodyPntC_B"] = _fuelTank.StateEffector_torqueOnBodyPntC_B_set
    __swig_getmethods__["torqueOnBodyPntC_B"] = _fuelTank.StateEffector_torqueOnBodyPntC_B_get
    if _newclass:
        torqueOnBodyPntC_B = _swig_property(_fuelTank.StateEffector_torqueOnBodyPntC_B_get, _fuelTank.StateEffector_torqueOnBodyPntC_B_set)
    __swig_setmethods__["r_BP_P"] = _fuelTank.StateEffector_r_BP_P_set
    __swig_getmethods__["r_BP_P"] = _fuelTank.StateEffector_r_BP_P_get
    if _newclass:
        r_BP_P = _swig_property(_fuelTank.StateEffector_r_BP_P_get, _fuelTank.StateEffector_r_BP_P_set)
    __swig_setmethods__["dcm_BP"] = _fuelTank.StateEffector_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _fuelTank.StateEffector_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_fuelTank.StateEffector_dcm_BP_get, _fuelTank.StateEffector_dcm_BP_set)
    __swig_destroy__ = _fuelTank.delete_StateEffector
    __del__ = lambda self: None

    def updateEffectorMassProps(self, integTime):
        return _fuelTank.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _fuelTank.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _fuelTank.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _fuelTank.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _fuelTank.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _fuelTank.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _fuelTank.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _fuelTank.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _fuelTank.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _fuelTank.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _fuelTank.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)
StateEffector_swigregister = _fuelTank.StateEffector_swigregister
StateEffector_swigregister(StateEffector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _fuelTank.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _fuelTank.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_fuelTank.StateVector_stateMap_get, _fuelTank.StateVector_stateMap_set)

    def __add__(self, operand):
        return _fuelTank.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _fuelTank.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _fuelTank.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _fuelTank.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _fuelTank.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _fuelTank.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_fuelTank.DynParamManager_dynProperties_get, _fuelTank.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _fuelTank.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _fuelTank.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_fuelTank.DynParamManager_stateContainer_get, _fuelTank.DynParamManager_stateContainer_set)
    __swig_destroy__ = _fuelTank.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _fuelTank.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _fuelTank.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _fuelTank.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _fuelTank.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _fuelTank.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _fuelTank.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _fuelTank.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _fuelTank.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _fuelTank.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _fuelTank.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class FuelTankModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["propMassInit"] = _fuelTank.FuelTankModel_propMassInit_set
    __swig_getmethods__["propMassInit"] = _fuelTank.FuelTankModel_propMassInit_get
    if _newclass:
        propMassInit = _swig_property(_fuelTank.FuelTankModel_propMassInit_get, _fuelTank.FuelTankModel_propMassInit_set)
    __swig_setmethods__["r_TcT_TInit"] = _fuelTank.FuelTankModel_r_TcT_TInit_set
    __swig_getmethods__["r_TcT_TInit"] = _fuelTank.FuelTankModel_r_TcT_TInit_get
    if _newclass:
        r_TcT_TInit = _swig_property(_fuelTank.FuelTankModel_r_TcT_TInit_get, _fuelTank.FuelTankModel_r_TcT_TInit_set)
    __swig_setmethods__["ITankPntT_T"] = _fuelTank.FuelTankModel_ITankPntT_T_set
    __swig_getmethods__["ITankPntT_T"] = _fuelTank.FuelTankModel_ITankPntT_T_get
    if _newclass:
        ITankPntT_T = _swig_property(_fuelTank.FuelTankModel_ITankPntT_T_get, _fuelTank.FuelTankModel_ITankPntT_T_set)
    __swig_setmethods__["IPrimeTankPntT_T"] = _fuelTank.FuelTankModel_IPrimeTankPntT_T_set
    __swig_getmethods__["IPrimeTankPntT_T"] = _fuelTank.FuelTankModel_IPrimeTankPntT_T_get
    if _newclass:
        IPrimeTankPntT_T = _swig_property(_fuelTank.FuelTankModel_IPrimeTankPntT_T_get, _fuelTank.FuelTankModel_IPrimeTankPntT_T_set)
    __swig_setmethods__["r_TcT_T"] = _fuelTank.FuelTankModel_r_TcT_T_set
    __swig_getmethods__["r_TcT_T"] = _fuelTank.FuelTankModel_r_TcT_T_get
    if _newclass:
        r_TcT_T = _swig_property(_fuelTank.FuelTankModel_r_TcT_T_get, _fuelTank.FuelTankModel_r_TcT_T_set)
    __swig_setmethods__["rPrime_TcT_T"] = _fuelTank.FuelTankModel_rPrime_TcT_T_set
    __swig_getmethods__["rPrime_TcT_T"] = _fuelTank.FuelTankModel_rPrime_TcT_T_get
    if _newclass:
        rPrime_TcT_T = _swig_property(_fuelTank.FuelTankModel_rPrime_TcT_T_get, _fuelTank.FuelTankModel_rPrime_TcT_T_set)
    __swig_setmethods__["rPPrime_TcT_T"] = _fuelTank.FuelTankModel_rPPrime_TcT_T_set
    __swig_getmethods__["rPPrime_TcT_T"] = _fuelTank.FuelTankModel_rPPrime_TcT_T_get
    if _newclass:
        rPPrime_TcT_T = _swig_property(_fuelTank.FuelTankModel_rPPrime_TcT_T_get, _fuelTank.FuelTankModel_rPPrime_TcT_T_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModel_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModel_computeTankPropDerivs(self, mFuel, mDotFuel)
    __swig_destroy__ = _fuelTank.delete_FuelTankModel
    __del__ = lambda self: None
FuelTankModel_swigregister = _fuelTank.FuelTankModel_swigregister
FuelTankModel_swigregister(FuelTankModel)

class FuelTankModelConstantVolume_t(FuelTankModel):
    __swig_setmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModelConstantVolume_t, name, value)
    __swig_getmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModelConstantVolume_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusTankInit"] = _fuelTank.FuelTankModelConstantVolume_t_radiusTankInit_set
    __swig_getmethods__["radiusTankInit"] = _fuelTank.FuelTankModelConstantVolume_t_radiusTankInit_get
    if _newclass:
        radiusTankInit = _swig_property(_fuelTank.FuelTankModelConstantVolume_t_radiusTankInit_get, _fuelTank.FuelTankModelConstantVolume_t_radiusTankInit_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModelConstantVolume_t_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModelConstantVolume_t_computeTankPropDerivs(self, mFuel, mDotFuel)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankModelConstantVolume_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankModelConstantVolume_t
    __del__ = lambda self: None
FuelTankModelConstantVolume_t_swigregister = _fuelTank.FuelTankModelConstantVolume_t_swigregister
FuelTankModelConstantVolume_t_swigregister(FuelTankModelConstantVolume_t)

class FuelTankModelConstantDensity_t(FuelTankModel):
    __swig_setmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModelConstantDensity_t, name, value)
    __swig_getmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModelConstantDensity_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusTankInit"] = _fuelTank.FuelTankModelConstantDensity_t_radiusTankInit_set
    __swig_getmethods__["radiusTankInit"] = _fuelTank.FuelTankModelConstantDensity_t_radiusTankInit_get
    if _newclass:
        radiusTankInit = _swig_property(_fuelTank.FuelTankModelConstantDensity_t_radiusTankInit_get, _fuelTank.FuelTankModelConstantDensity_t_radiusTankInit_set)
    __swig_setmethods__["radiusTank"] = _fuelTank.FuelTankModelConstantDensity_t_radiusTank_set
    __swig_getmethods__["radiusTank"] = _fuelTank.FuelTankModelConstantDensity_t_radiusTank_get
    if _newclass:
        radiusTank = _swig_property(_fuelTank.FuelTankModelConstantDensity_t_radiusTank_get, _fuelTank.FuelTankModelConstantDensity_t_radiusTank_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModelConstantDensity_t_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModelConstantDensity_t_computeTankPropDerivs(self, mFuel, mDotFuel)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankModelConstantDensity_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankModelConstantDensity_t
    __del__ = lambda self: None
FuelTankModelConstantDensity_t_swigregister = _fuelTank.FuelTankModelConstantDensity_t_swigregister
FuelTankModelConstantDensity_t_swigregister(FuelTankModelConstantDensity_t)

class FuelTankModelEmptying_t(FuelTankModel):
    __swig_setmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModelEmptying_t, name, value)
    __swig_getmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModelEmptying_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusTankInit"] = _fuelTank.FuelTankModelEmptying_t_radiusTankInit_set
    __swig_getmethods__["radiusTankInit"] = _fuelTank.FuelTankModelEmptying_t_radiusTankInit_get
    if _newclass:
        radiusTankInit = _swig_property(_fuelTank.FuelTankModelEmptying_t_radiusTankInit_get, _fuelTank.FuelTankModelEmptying_t_radiusTankInit_set)
    __swig_setmethods__["rhoFuel"] = _fuelTank.FuelTankModelEmptying_t_rhoFuel_set
    __swig_getmethods__["rhoFuel"] = _fuelTank.FuelTankModelEmptying_t_rhoFuel_get
    if _newclass:
        rhoFuel = _swig_property(_fuelTank.FuelTankModelEmptying_t_rhoFuel_get, _fuelTank.FuelTankModelEmptying_t_rhoFuel_set)
    __swig_setmethods__["thetaStar"] = _fuelTank.FuelTankModelEmptying_t_thetaStar_set
    __swig_getmethods__["thetaStar"] = _fuelTank.FuelTankModelEmptying_t_thetaStar_get
    if _newclass:
        thetaStar = _swig_property(_fuelTank.FuelTankModelEmptying_t_thetaStar_get, _fuelTank.FuelTankModelEmptying_t_thetaStar_set)
    __swig_setmethods__["thetaDotStar"] = _fuelTank.FuelTankModelEmptying_t_thetaDotStar_set
    __swig_getmethods__["thetaDotStar"] = _fuelTank.FuelTankModelEmptying_t_thetaDotStar_get
    if _newclass:
        thetaDotStar = _swig_property(_fuelTank.FuelTankModelEmptying_t_thetaDotStar_get, _fuelTank.FuelTankModelEmptying_t_thetaDotStar_set)
    __swig_setmethods__["thetaDDotStar"] = _fuelTank.FuelTankModelEmptying_t_thetaDDotStar_set
    __swig_getmethods__["thetaDDotStar"] = _fuelTank.FuelTankModelEmptying_t_thetaDDotStar_get
    if _newclass:
        thetaDDotStar = _swig_property(_fuelTank.FuelTankModelEmptying_t_thetaDDotStar_get, _fuelTank.FuelTankModelEmptying_t_thetaDDotStar_set)
    __swig_setmethods__["k3"] = _fuelTank.FuelTankModelEmptying_t_k3_set
    __swig_getmethods__["k3"] = _fuelTank.FuelTankModelEmptying_t_k3_get
    if _newclass:
        k3 = _swig_property(_fuelTank.FuelTankModelEmptying_t_k3_get, _fuelTank.FuelTankModelEmptying_t_k3_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModelEmptying_t_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModelEmptying_t_computeTankPropDerivs(self, mFuel, mDotFuel)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankModelEmptying_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankModelEmptying_t
    __del__ = lambda self: None
FuelTankModelEmptying_t_swigregister = _fuelTank.FuelTankModelEmptying_t_swigregister
FuelTankModelEmptying_t_swigregister(FuelTankModelEmptying_t)

class FuelTankModelUniformBurn_t(FuelTankModel):
    __swig_setmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModelUniformBurn_t, name, value)
    __swig_getmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModelUniformBurn_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusTankInit"] = _fuelTank.FuelTankModelUniformBurn_t_radiusTankInit_set
    __swig_getmethods__["radiusTankInit"] = _fuelTank.FuelTankModelUniformBurn_t_radiusTankInit_get
    if _newclass:
        radiusTankInit = _swig_property(_fuelTank.FuelTankModelUniformBurn_t_radiusTankInit_get, _fuelTank.FuelTankModelUniformBurn_t_radiusTankInit_set)
    __swig_setmethods__["lengthTank"] = _fuelTank.FuelTankModelUniformBurn_t_lengthTank_set
    __swig_getmethods__["lengthTank"] = _fuelTank.FuelTankModelUniformBurn_t_lengthTank_get
    if _newclass:
        lengthTank = _swig_property(_fuelTank.FuelTankModelUniformBurn_t_lengthTank_get, _fuelTank.FuelTankModelUniformBurn_t_lengthTank_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModelUniformBurn_t_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModelUniformBurn_t_computeTankPropDerivs(self, mFuel, mDotFuel)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankModelUniformBurn_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankModelUniformBurn_t
    __del__ = lambda self: None
FuelTankModelUniformBurn_t_swigregister = _fuelTank.FuelTankModelUniformBurn_t_swigregister
FuelTankModelUniformBurn_t_swigregister(FuelTankModelUniformBurn_t)

class FuelTankModelCentrifugalBurn_t(FuelTankModel):
    __swig_setmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankModelCentrifugalBurn_t, name, value)
    __swig_getmethods__ = {}
    for _s in [FuelTankModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankModelCentrifugalBurn_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusTankInit"] = _fuelTank.FuelTankModelCentrifugalBurn_t_radiusTankInit_set
    __swig_getmethods__["radiusTankInit"] = _fuelTank.FuelTankModelCentrifugalBurn_t_radiusTankInit_get
    if _newclass:
        radiusTankInit = _swig_property(_fuelTank.FuelTankModelCentrifugalBurn_t_radiusTankInit_get, _fuelTank.FuelTankModelCentrifugalBurn_t_radiusTankInit_set)
    __swig_setmethods__["lengthTank"] = _fuelTank.FuelTankModelCentrifugalBurn_t_lengthTank_set
    __swig_getmethods__["lengthTank"] = _fuelTank.FuelTankModelCentrifugalBurn_t_lengthTank_get
    if _newclass:
        lengthTank = _swig_property(_fuelTank.FuelTankModelCentrifugalBurn_t_lengthTank_get, _fuelTank.FuelTankModelCentrifugalBurn_t_lengthTank_set)
    __swig_setmethods__["radiusInner"] = _fuelTank.FuelTankModelCentrifugalBurn_t_radiusInner_set
    __swig_getmethods__["radiusInner"] = _fuelTank.FuelTankModelCentrifugalBurn_t_radiusInner_get
    if _newclass:
        radiusInner = _swig_property(_fuelTank.FuelTankModelCentrifugalBurn_t_radiusInner_get, _fuelTank.FuelTankModelCentrifugalBurn_t_radiusInner_set)

    def computeTankProps(self, mFuel):
        return _fuelTank.FuelTankModelCentrifugalBurn_t_computeTankProps(self, mFuel)

    def computeTankPropDerivs(self, mFuel, mDotFuel):
        return _fuelTank.FuelTankModelCentrifugalBurn_t_computeTankPropDerivs(self, mFuel, mDotFuel)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankModelCentrifugalBurn_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankModelCentrifugalBurn_t
    __del__ = lambda self: None
FuelTankModelCentrifugalBurn_t_swigregister = _fuelTank.FuelTankModelCentrifugalBurn_t_swigregister
FuelTankModelCentrifugalBurn_t_swigregister(FuelTankModelCentrifugalBurn_t)

TANK_MODEL_FIRST_MODEL = _fuelTank.TANK_MODEL_FIRST_MODEL
TANK_MODEL_CONSTANT_VOLUME = _fuelTank.TANK_MODEL_CONSTANT_VOLUME
TANK_MODEL_CONSTANT_DENSITY = _fuelTank.TANK_MODEL_CONSTANT_DENSITY
TANK_MODEL_EMPTYING = _fuelTank.TANK_MODEL_EMPTYING
TANK_MODEL_UNIFORM_BURN = _fuelTank.TANK_MODEL_UNIFORM_BURN
TANK_MODEL_CENTRIFUGAL_BURN = _fuelTank.TANK_MODEL_CENTRIFUGAL_BURN
TANK_MODEL_LAST_MODEL = _fuelTank.TANK_MODEL_LAST_MODEL
class FuelTank(StateEffector, SysModel):
    __swig_setmethods__ = {}
    for _s in [StateEffector, SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTank, name, value)
    __swig_getmethods__ = {}
    for _s in [StateEffector, SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTank, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfMassState"] = _fuelTank.FuelTank_nameOfMassState_set
    __swig_getmethods__["nameOfMassState"] = _fuelTank.FuelTank_nameOfMassState_get
    if _newclass:
        nameOfMassState = _swig_property(_fuelTank.FuelTank_nameOfMassState_get, _fuelTank.FuelTank_nameOfMassState_set)
    __swig_setmethods__["fuelSloshParticles"] = _fuelTank.FuelTank_fuelSloshParticles_set
    __swig_getmethods__["fuelSloshParticles"] = _fuelTank.FuelTank_fuelSloshParticles_get
    if _newclass:
        fuelSloshParticles = _swig_property(_fuelTank.FuelTank_fuelSloshParticles_get, _fuelTank.FuelTank_fuelSloshParticles_set)
    __swig_setmethods__["dynEffectors"] = _fuelTank.FuelTank_dynEffectors_set
    __swig_getmethods__["dynEffectors"] = _fuelTank.FuelTank_dynEffectors_get
    if _newclass:
        dynEffectors = _swig_property(_fuelTank.FuelTank_dynEffectors_get, _fuelTank.FuelTank_dynEffectors_set)
    __swig_setmethods__["dcm_TB"] = _fuelTank.FuelTank_dcm_TB_set
    __swig_getmethods__["dcm_TB"] = _fuelTank.FuelTank_dcm_TB_get
    if _newclass:
        dcm_TB = _swig_property(_fuelTank.FuelTank_dcm_TB_get, _fuelTank.FuelTank_dcm_TB_set)
    __swig_setmethods__["r_TB_B"] = _fuelTank.FuelTank_r_TB_B_set
    __swig_getmethods__["r_TB_B"] = _fuelTank.FuelTank_r_TB_B_get
    if _newclass:
        r_TB_B = _swig_property(_fuelTank.FuelTank_r_TB_B_get, _fuelTank.FuelTank_r_TB_B_set)
    __swig_setmethods__["updateOnly"] = _fuelTank.FuelTank_updateOnly_set
    __swig_getmethods__["updateOnly"] = _fuelTank.FuelTank_updateOnly_get
    if _newclass:
        updateOnly = _swig_property(_fuelTank.FuelTank_updateOnly_get, _fuelTank.FuelTank_updateOnly_set)
    __swig_setmethods__["FuelTankOutMsgName"] = _fuelTank.FuelTank_FuelTankOutMsgName_set
    __swig_getmethods__["FuelTankOutMsgName"] = _fuelTank.FuelTank_FuelTankOutMsgName_get
    if _newclass:
        FuelTankOutMsgName = _swig_property(_fuelTank.FuelTank_FuelTankOutMsgName_get, _fuelTank.FuelTank_FuelTankOutMsgName_set)
    __swig_setmethods__["FuelTankMassPropMsg"] = _fuelTank.FuelTank_FuelTankMassPropMsg_set
    __swig_getmethods__["FuelTankMassPropMsg"] = _fuelTank.FuelTank_FuelTankMassPropMsg_get
    if _newclass:
        FuelTankMassPropMsg = _swig_property(_fuelTank.FuelTank_FuelTankMassPropMsg_get, _fuelTank.FuelTank_FuelTankMassPropMsg_set)
    __swig_destroy__ = _fuelTank.delete_FuelTank
    __del__ = lambda self: None

    def SelfInit(self):
        return _fuelTank.FuelTank_SelfInit(self)

    def CrossInit(self):
        return _fuelTank.FuelTank_CrossInit(self)

    def WriteOutputMessages(self, CurrentClock):
        return _fuelTank.FuelTank_WriteOutputMessages(self, CurrentClock)

    def UpdateState(self, CurrentSimNanos):
        return _fuelTank.FuelTank_UpdateState(self, CurrentSimNanos)

    def setTankModel(self, model):
        return _fuelTank.FuelTank_setTankModel(self, model)

    def pushFuelSloshParticle(self, particle):
        return _fuelTank.FuelTank_pushFuelSloshParticle(self, particle)

    def registerStates(self, states):
        return _fuelTank.FuelTank_registerStates(self, states)

    def linkInStates(self, states):
        return _fuelTank.FuelTank_linkInStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _fuelTank.FuelTank_updateEffectorMassProps(self, integTime)

    def addThrusterSet(self, NewdynEff):
        return _fuelTank.FuelTank_addThrusterSet(self, NewdynEff)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _fuelTank.FuelTank_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _fuelTank.FuelTank_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _fuelTank.FuelTank_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTank(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FuelTank_swigregister = _fuelTank.FuelTank_swigregister
FuelTank_swigregister(FuelTank)
cvar = _fuelTank.cvar

class FuelTankSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuelTankSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuelTankSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fuelMass"] = _fuelTank.FuelTankSimMsg_fuelMass_set
    __swig_getmethods__["fuelMass"] = _fuelTank.FuelTankSimMsg_fuelMass_get
    if _newclass:
        fuelMass = _swig_property(_fuelTank.FuelTankSimMsg_fuelMass_get, _fuelTank.FuelTankSimMsg_fuelMass_set)
    __swig_setmethods__["fuelMassDot"] = _fuelTank.FuelTankSimMsg_fuelMassDot_set
    __swig_getmethods__["fuelMassDot"] = _fuelTank.FuelTankSimMsg_fuelMassDot_get
    if _newclass:
        fuelMassDot = _swig_property(_fuelTank.FuelTankSimMsg_fuelMassDot_get, _fuelTank.FuelTankSimMsg_fuelMassDot_set)

    def __init__(self, *args):
        this = _fuelTank.new_FuelTankSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fuelTank.delete_FuelTankSimMsg
    __del__ = lambda self: None
FuelTankSimMsg_swigregister = _fuelTank.FuelTankSimMsg_swigregister
FuelTankSimMsg_swigregister(FuelTankSimMsg)

sizeof_FuelTankSimMsg = _fuelTank.sizeof_FuelTankSimMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


