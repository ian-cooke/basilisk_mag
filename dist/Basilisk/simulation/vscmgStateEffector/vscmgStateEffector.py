# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_vscmgStateEffector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_vscmgStateEffector')
    _vscmgStateEffector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vscmgStateEffector', [dirname(__file__)])
        except ImportError:
            import _vscmgStateEffector
            return _vscmgStateEffector
        try:
            _mod = imp.load_module('_vscmgStateEffector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _vscmgStateEffector = swig_import_helper()
    del swig_import_helper
else:
    import _vscmgStateEffector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vscmgStateEffector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _vscmgStateEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vscmgStateEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vscmgStateEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vscmgStateEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vscmgStateEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vscmgStateEffector.SwigPyIterator_copy(self)

    def next(self):
        return _vscmgStateEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _vscmgStateEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _vscmgStateEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vscmgStateEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vscmgStateEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vscmgStateEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vscmgStateEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vscmgStateEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vscmgStateEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vscmgStateEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _vscmgStateEffector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _vscmgStateEffector.new_doubleArray(nelements)
new_doubleArray = _vscmgStateEffector.new_doubleArray

def delete_doubleArray(ary):
    return _vscmgStateEffector.delete_doubleArray(ary)
delete_doubleArray = _vscmgStateEffector.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _vscmgStateEffector.doubleArray_getitem(ary, index)
doubleArray_getitem = _vscmgStateEffector.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _vscmgStateEffector.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _vscmgStateEffector.doubleArray_setitem

def new_longArray(nelements):
    return _vscmgStateEffector.new_longArray(nelements)
new_longArray = _vscmgStateEffector.new_longArray

def delete_longArray(ary):
    return _vscmgStateEffector.delete_longArray(ary)
delete_longArray = _vscmgStateEffector.delete_longArray

def longArray_getitem(ary, index):
    return _vscmgStateEffector.longArray_getitem(ary, index)
longArray_getitem = _vscmgStateEffector.longArray_getitem

def longArray_setitem(ary, index, value):
    return _vscmgStateEffector.longArray_setitem(ary, index, value)
longArray_setitem = _vscmgStateEffector.longArray_setitem

def new_intArray(nelements):
    return _vscmgStateEffector.new_intArray(nelements)
new_intArray = _vscmgStateEffector.new_intArray

def delete_intArray(ary):
    return _vscmgStateEffector.delete_intArray(ary)
delete_intArray = _vscmgStateEffector.delete_intArray

def intArray_getitem(ary, index):
    return _vscmgStateEffector.intArray_getitem(ary, index)
intArray_getitem = _vscmgStateEffector.intArray_getitem

def intArray_setitem(ary, index, value):
    return _vscmgStateEffector.intArray_setitem(ary, index, value)
intArray_setitem = _vscmgStateEffector.intArray_setitem

def new_shortArray(nelements):
    return _vscmgStateEffector.new_shortArray(nelements)
new_shortArray = _vscmgStateEffector.new_shortArray

def delete_shortArray(ary):
    return _vscmgStateEffector.delete_shortArray(ary)
delete_shortArray = _vscmgStateEffector.delete_shortArray

def shortArray_getitem(ary, index):
    return _vscmgStateEffector.shortArray_getitem(ary, index)
shortArray_getitem = _vscmgStateEffector.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _vscmgStateEffector.shortArray_setitem(ary, index, value)
shortArray_setitem = _vscmgStateEffector.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _vscmgStateEffector.new_boolArray(nelements)
new_boolArray = _vscmgStateEffector.new_boolArray

def delete_boolArray(ary):
    return _vscmgStateEffector.delete_boolArray(ary)
delete_boolArray = _vscmgStateEffector.delete_boolArray

def boolArray_getitem(ary, index):
    return _vscmgStateEffector.boolArray_getitem(ary, index)
boolArray_getitem = _vscmgStateEffector.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _vscmgStateEffector.boolArray_setitem(ary, index, value)
boolArray_setitem = _vscmgStateEffector.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.IntVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.IntVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.IntVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.IntVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.IntVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.IntVector_empty(self)

    def size(self):
        return _vscmgStateEffector.IntVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.IntVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.IntVector_begin(self)

    def end(self):
        return _vscmgStateEffector.IntVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.IntVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.IntVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.IntVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.IntVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.IntVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.IntVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.IntVector_front(self)

    def back(self):
        return _vscmgStateEffector.IntVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.IntVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.IntVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _vscmgStateEffector.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.DoubleVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.DoubleVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.DoubleVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.DoubleVector_empty(self)

    def size(self):
        return _vscmgStateEffector.DoubleVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.DoubleVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.DoubleVector_begin(self)

    def end(self):
        return _vscmgStateEffector.DoubleVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.DoubleVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.DoubleVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.DoubleVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.DoubleVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.DoubleVector_front(self)

    def back(self):
        return _vscmgStateEffector.DoubleVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.DoubleVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.DoubleVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _vscmgStateEffector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.StringVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.StringVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.StringVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.StringVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.StringVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.StringVector_empty(self)

    def size(self):
        return _vscmgStateEffector.StringVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.StringVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.StringVector_begin(self)

    def end(self):
        return _vscmgStateEffector.StringVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.StringVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.StringVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.StringVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.StringVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.StringVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.StringVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.StringVector_front(self)

    def back(self):
        return _vscmgStateEffector.StringVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.StringVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.StringVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _vscmgStateEffector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.StringSet___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.StringSet___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.StringSet___len__(self)

    def append(self, x):
        return _vscmgStateEffector.StringSet_append(self, x)

    def __contains__(self, x):
        return _vscmgStateEffector.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _vscmgStateEffector.StringSet___getitem__(self, i)

    def add(self, x):
        return _vscmgStateEffector.StringSet_add(self, x)

    def discard(self, x):
        return _vscmgStateEffector.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _vscmgStateEffector.StringSet_empty(self)

    def size(self):
        return _vscmgStateEffector.StringSet_size(self)

    def clear(self):
        return _vscmgStateEffector.StringSet_clear(self)

    def swap(self, v):
        return _vscmgStateEffector.StringSet_swap(self, v)

    def count(self, x):
        return _vscmgStateEffector.StringSet_count(self, x)

    def begin(self):
        return _vscmgStateEffector.StringSet_begin(self)

    def end(self):
        return _vscmgStateEffector.StringSet_end(self)

    def rbegin(self):
        return _vscmgStateEffector.StringSet_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.StringSet_rend(self)

    def erase(self, *args):
        return _vscmgStateEffector.StringSet_erase(self, *args)

    def find(self, x):
        return _vscmgStateEffector.StringSet_find(self, x)

    def lower_bound(self, x):
        return _vscmgStateEffector.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _vscmgStateEffector.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _vscmgStateEffector.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _vscmgStateEffector.StringSet_insert(self, __x)
    __swig_destroy__ = _vscmgStateEffector.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _vscmgStateEffector.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.intSet___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.intSet___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.intSet___len__(self)

    def append(self, x):
        return _vscmgStateEffector.intSet_append(self, x)

    def __contains__(self, x):
        return _vscmgStateEffector.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _vscmgStateEffector.intSet___getitem__(self, i)

    def add(self, x):
        return _vscmgStateEffector.intSet_add(self, x)

    def discard(self, x):
        return _vscmgStateEffector.intSet_discard(self, x)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _vscmgStateEffector.intSet_empty(self)

    def size(self):
        return _vscmgStateEffector.intSet_size(self)

    def clear(self):
        return _vscmgStateEffector.intSet_clear(self)

    def swap(self, v):
        return _vscmgStateEffector.intSet_swap(self, v)

    def count(self, x):
        return _vscmgStateEffector.intSet_count(self, x)

    def begin(self):
        return _vscmgStateEffector.intSet_begin(self)

    def end(self):
        return _vscmgStateEffector.intSet_end(self)

    def rbegin(self):
        return _vscmgStateEffector.intSet_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.intSet_rend(self)

    def erase(self, *args):
        return _vscmgStateEffector.intSet_erase(self, *args)

    def find(self, x):
        return _vscmgStateEffector.intSet_find(self, x)

    def lower_bound(self, x):
        return _vscmgStateEffector.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _vscmgStateEffector.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _vscmgStateEffector.intSet_equal_range(self, x)

    def insert(self, __x):
        return _vscmgStateEffector.intSet_insert(self, __x)
    __swig_destroy__ = _vscmgStateEffector.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _vscmgStateEffector.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.ConstCharVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.ConstCharVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.ConstCharVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.ConstCharVector_empty(self)

    def size(self):
        return _vscmgStateEffector.ConstCharVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.ConstCharVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.ConstCharVector_begin(self)

    def end(self):
        return _vscmgStateEffector.ConstCharVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.ConstCharVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.ConstCharVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.ConstCharVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.ConstCharVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.ConstCharVector_front(self)

    def back(self):
        return _vscmgStateEffector.ConstCharVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.ConstCharVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _vscmgStateEffector.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.MultiArray___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.MultiArray___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.MultiArray___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.MultiArray_pop(self)

    def append(self, x):
        return _vscmgStateEffector.MultiArray_append(self, x)

    def empty(self):
        return _vscmgStateEffector.MultiArray_empty(self)

    def size(self):
        return _vscmgStateEffector.MultiArray_size(self)

    def swap(self, v):
        return _vscmgStateEffector.MultiArray_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.MultiArray_begin(self)

    def end(self):
        return _vscmgStateEffector.MultiArray_end(self)

    def rbegin(self):
        return _vscmgStateEffector.MultiArray_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.MultiArray_rend(self)

    def clear(self):
        return _vscmgStateEffector.MultiArray_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.MultiArray_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.MultiArray_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.MultiArray_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.MultiArray_front(self)

    def back(self):
        return _vscmgStateEffector.MultiArray_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.MultiArray_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.MultiArray_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _vscmgStateEffector.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _vscmgStateEffector.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _vscmgStateEffector.SysModel_SelfInit(self)

    def CrossInit(self):
        return _vscmgStateEffector.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _vscmgStateEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _vscmgStateEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _vscmgStateEffector.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _vscmgStateEffector.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _vscmgStateEffector.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_vscmgStateEffector.SysModel_ModelTag_get, _vscmgStateEffector.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _vscmgStateEffector.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _vscmgStateEffector.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_vscmgStateEffector.SysModel_CallCounts_get, _vscmgStateEffector.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _vscmgStateEffector.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _vscmgStateEffector.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_vscmgStateEffector.SysModel_RNGSeed_get, _vscmgStateEffector.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _vscmgStateEffector.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _vscmgStateEffector.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_vscmgStateEffector.SysModel_moduleID_get, _vscmgStateEffector.SysModel_moduleID_set)
SysModel_swigregister = _vscmgStateEffector.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _vscmgStateEffector.StateData_state_set
    __swig_getmethods__["state"] = _vscmgStateEffector.StateData_state_get
    if _newclass:
        state = _swig_property(_vscmgStateEffector.StateData_state_get, _vscmgStateEffector.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _vscmgStateEffector.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _vscmgStateEffector.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_vscmgStateEffector.StateData_stateDeriv_get, _vscmgStateEffector.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _vscmgStateEffector.StateData_stateName_set
    __swig_getmethods__["stateName"] = _vscmgStateEffector.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_vscmgStateEffector.StateData_stateName_get, _vscmgStateEffector.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _vscmgStateEffector.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _vscmgStateEffector.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_vscmgStateEffector.StateData_stateEnabled_get, _vscmgStateEffector.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _vscmgStateEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _vscmgStateEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _vscmgStateEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _vscmgStateEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _vscmgStateEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _vscmgStateEffector.StateData_getName(self)

    def getRowSize(self):
        return _vscmgStateEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _vscmgStateEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _vscmgStateEffector.StateData_isStateActive(self)

    def disable(self):
        return _vscmgStateEffector.StateData_disable(self)

    def enable(self):
        return _vscmgStateEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _vscmgStateEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _vscmgStateEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _vscmgStateEffector.StateData___mul__(self, scaleFactor)
StateData_swigregister = _vscmgStateEffector.StateData_swigregister
StateData_swigregister(StateData)

class BackSubMatrices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackSubMatrices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackSubMatrices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrixA"] = _vscmgStateEffector.BackSubMatrices_matrixA_set
    __swig_getmethods__["matrixA"] = _vscmgStateEffector.BackSubMatrices_matrixA_get
    if _newclass:
        matrixA = _swig_property(_vscmgStateEffector.BackSubMatrices_matrixA_get, _vscmgStateEffector.BackSubMatrices_matrixA_set)
    __swig_setmethods__["matrixB"] = _vscmgStateEffector.BackSubMatrices_matrixB_set
    __swig_getmethods__["matrixB"] = _vscmgStateEffector.BackSubMatrices_matrixB_get
    if _newclass:
        matrixB = _swig_property(_vscmgStateEffector.BackSubMatrices_matrixB_get, _vscmgStateEffector.BackSubMatrices_matrixB_set)
    __swig_setmethods__["matrixC"] = _vscmgStateEffector.BackSubMatrices_matrixC_set
    __swig_getmethods__["matrixC"] = _vscmgStateEffector.BackSubMatrices_matrixC_get
    if _newclass:
        matrixC = _swig_property(_vscmgStateEffector.BackSubMatrices_matrixC_get, _vscmgStateEffector.BackSubMatrices_matrixC_set)
    __swig_setmethods__["matrixD"] = _vscmgStateEffector.BackSubMatrices_matrixD_set
    __swig_getmethods__["matrixD"] = _vscmgStateEffector.BackSubMatrices_matrixD_get
    if _newclass:
        matrixD = _swig_property(_vscmgStateEffector.BackSubMatrices_matrixD_get, _vscmgStateEffector.BackSubMatrices_matrixD_set)
    __swig_setmethods__["vecTrans"] = _vscmgStateEffector.BackSubMatrices_vecTrans_set
    __swig_getmethods__["vecTrans"] = _vscmgStateEffector.BackSubMatrices_vecTrans_get
    if _newclass:
        vecTrans = _swig_property(_vscmgStateEffector.BackSubMatrices_vecTrans_get, _vscmgStateEffector.BackSubMatrices_vecTrans_set)
    __swig_setmethods__["vecRot"] = _vscmgStateEffector.BackSubMatrices_vecRot_set
    __swig_getmethods__["vecRot"] = _vscmgStateEffector.BackSubMatrices_vecRot_get
    if _newclass:
        vecRot = _swig_property(_vscmgStateEffector.BackSubMatrices_vecRot_get, _vscmgStateEffector.BackSubMatrices_vecRot_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_BackSubMatrices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_BackSubMatrices
    __del__ = lambda self: None
BackSubMatrices_swigregister = _vscmgStateEffector.BackSubMatrices_swigregister
BackSubMatrices_swigregister(BackSubMatrices)

class EffectorMassProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorMassProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorMassProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mEff"] = _vscmgStateEffector.EffectorMassProps_mEff_set
    __swig_getmethods__["mEff"] = _vscmgStateEffector.EffectorMassProps_mEff_get
    if _newclass:
        mEff = _swig_property(_vscmgStateEffector.EffectorMassProps_mEff_get, _vscmgStateEffector.EffectorMassProps_mEff_set)
    __swig_setmethods__["mEffDot"] = _vscmgStateEffector.EffectorMassProps_mEffDot_set
    __swig_getmethods__["mEffDot"] = _vscmgStateEffector.EffectorMassProps_mEffDot_get
    if _newclass:
        mEffDot = _swig_property(_vscmgStateEffector.EffectorMassProps_mEffDot_get, _vscmgStateEffector.EffectorMassProps_mEffDot_set)
    __swig_setmethods__["IEffPntB_B"] = _vscmgStateEffector.EffectorMassProps_IEffPntB_B_set
    __swig_getmethods__["IEffPntB_B"] = _vscmgStateEffector.EffectorMassProps_IEffPntB_B_get
    if _newclass:
        IEffPntB_B = _swig_property(_vscmgStateEffector.EffectorMassProps_IEffPntB_B_get, _vscmgStateEffector.EffectorMassProps_IEffPntB_B_set)
    __swig_setmethods__["rEff_CB_B"] = _vscmgStateEffector.EffectorMassProps_rEff_CB_B_set
    __swig_getmethods__["rEff_CB_B"] = _vscmgStateEffector.EffectorMassProps_rEff_CB_B_get
    if _newclass:
        rEff_CB_B = _swig_property(_vscmgStateEffector.EffectorMassProps_rEff_CB_B_get, _vscmgStateEffector.EffectorMassProps_rEff_CB_B_set)
    __swig_setmethods__["rEffPrime_CB_B"] = _vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_set
    __swig_getmethods__["rEffPrime_CB_B"] = _vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_get
    if _newclass:
        rEffPrime_CB_B = _swig_property(_vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_get, _vscmgStateEffector.EffectorMassProps_rEffPrime_CB_B_set)
    __swig_setmethods__["IEffPrimePntB_B"] = _vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_set
    __swig_getmethods__["IEffPrimePntB_B"] = _vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_get
    if _newclass:
        IEffPrimePntB_B = _swig_property(_vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_get, _vscmgStateEffector.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_EffectorMassProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_EffectorMassProps
    __del__ = lambda self: None
EffectorMassProps_swigregister = _vscmgStateEffector.EffectorMassProps_swigregister
EffectorMassProps_swigregister(EffectorMassProps)

class StateEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get, _vscmgStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set)
    __swig_setmethods__["effProps"] = _vscmgStateEffector.StateEffector_effProps_set
    __swig_getmethods__["effProps"] = _vscmgStateEffector.StateEffector_effProps_get
    if _newclass:
        effProps = _swig_property(_vscmgStateEffector.StateEffector_effProps_get, _vscmgStateEffector.StateEffector_effProps_set)
    __swig_setmethods__["forceOnBody_B"] = _vscmgStateEffector.StateEffector_forceOnBody_B_set
    __swig_getmethods__["forceOnBody_B"] = _vscmgStateEffector.StateEffector_forceOnBody_B_get
    if _newclass:
        forceOnBody_B = _swig_property(_vscmgStateEffector.StateEffector_forceOnBody_B_get, _vscmgStateEffector.StateEffector_forceOnBody_B_set)
    __swig_setmethods__["torqueOnBodyPntB_B"] = _vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_set
    __swig_getmethods__["torqueOnBodyPntB_B"] = _vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_get
    if _newclass:
        torqueOnBodyPntB_B = _swig_property(_vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_get, _vscmgStateEffector.StateEffector_torqueOnBodyPntB_B_set)
    __swig_setmethods__["torqueOnBodyPntC_B"] = _vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_set
    __swig_getmethods__["torqueOnBodyPntC_B"] = _vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_get
    if _newclass:
        torqueOnBodyPntC_B = _swig_property(_vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_get, _vscmgStateEffector.StateEffector_torqueOnBodyPntC_B_set)
    __swig_setmethods__["r_BP_P"] = _vscmgStateEffector.StateEffector_r_BP_P_set
    __swig_getmethods__["r_BP_P"] = _vscmgStateEffector.StateEffector_r_BP_P_get
    if _newclass:
        r_BP_P = _swig_property(_vscmgStateEffector.StateEffector_r_BP_P_get, _vscmgStateEffector.StateEffector_r_BP_P_set)
    __swig_setmethods__["dcm_BP"] = _vscmgStateEffector.StateEffector_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _vscmgStateEffector.StateEffector_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_vscmgStateEffector.StateEffector_dcm_BP_get, _vscmgStateEffector.StateEffector_dcm_BP_set)
    __swig_destroy__ = _vscmgStateEffector.delete_StateEffector
    __del__ = lambda self: None

    def updateEffectorMassProps(self, integTime):
        return _vscmgStateEffector.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _vscmgStateEffector.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _vscmgStateEffector.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _vscmgStateEffector.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _vscmgStateEffector.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _vscmgStateEffector.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _vscmgStateEffector.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _vscmgStateEffector.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _vscmgStateEffector.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _vscmgStateEffector.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _vscmgStateEffector.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)
StateEffector_swigregister = _vscmgStateEffector.StateEffector_swigregister
StateEffector_swigregister(StateEffector)

class DynamicEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vscmgStateEffector.delete_DynamicEffector
    __del__ = lambda self: None

    def computeStateContribution(self, integTime):
        return _vscmgStateEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _vscmgStateEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _vscmgStateEffector.DynamicEffector_computeForceTorque(self, integTime)
    __swig_setmethods__["stateDerivContribution"] = _vscmgStateEffector.DynamicEffector_stateDerivContribution_set
    __swig_getmethods__["stateDerivContribution"] = _vscmgStateEffector.DynamicEffector_stateDerivContribution_get
    if _newclass:
        stateDerivContribution = _swig_property(_vscmgStateEffector.DynamicEffector_stateDerivContribution_get, _vscmgStateEffector.DynamicEffector_stateDerivContribution_set)
    __swig_setmethods__["forceExternal_N"] = _vscmgStateEffector.DynamicEffector_forceExternal_N_set
    __swig_getmethods__["forceExternal_N"] = _vscmgStateEffector.DynamicEffector_forceExternal_N_get
    if _newclass:
        forceExternal_N = _swig_property(_vscmgStateEffector.DynamicEffector_forceExternal_N_get, _vscmgStateEffector.DynamicEffector_forceExternal_N_set)
    __swig_setmethods__["forceExternal_B"] = _vscmgStateEffector.DynamicEffector_forceExternal_B_set
    __swig_getmethods__["forceExternal_B"] = _vscmgStateEffector.DynamicEffector_forceExternal_B_get
    if _newclass:
        forceExternal_B = _swig_property(_vscmgStateEffector.DynamicEffector_forceExternal_B_get, _vscmgStateEffector.DynamicEffector_forceExternal_B_set)
    __swig_setmethods__["torqueExternalPntB_B"] = _vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_set
    __swig_getmethods__["torqueExternalPntB_B"] = _vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_get
    if _newclass:
        torqueExternalPntB_B = _swig_property(_vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_get, _vscmgStateEffector.DynamicEffector_torqueExternalPntB_B_set)
DynamicEffector_swigregister = _vscmgStateEffector.DynamicEffector_swigregister
DynamicEffector_swigregister(DynamicEffector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _vscmgStateEffector.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _vscmgStateEffector.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_vscmgStateEffector.StateVector_stateMap_get, _vscmgStateEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _vscmgStateEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _vscmgStateEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _vscmgStateEffector.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _vscmgStateEffector.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _vscmgStateEffector.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_vscmgStateEffector.DynParamManager_dynProperties_get, _vscmgStateEffector.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _vscmgStateEffector.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _vscmgStateEffector.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_vscmgStateEffector.DynParamManager_stateContainer_get, _vscmgStateEffector.DynParamManager_stateContainer_set)
    __swig_destroy__ = _vscmgStateEffector.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _vscmgStateEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _vscmgStateEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _vscmgStateEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _vscmgStateEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _vscmgStateEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _vscmgStateEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _vscmgStateEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _vscmgStateEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _vscmgStateEffector.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class DynamicObject(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["dynManager"] = _vscmgStateEffector.DynamicObject_dynManager_set
    __swig_getmethods__["dynManager"] = _vscmgStateEffector.DynamicObject_dynManager_get
    if _newclass:
        dynManager = _swig_property(_vscmgStateEffector.DynamicObject_dynManager_get, _vscmgStateEffector.DynamicObject_dynManager_set)
    __swig_setmethods__["integrator"] = _vscmgStateEffector.DynamicObject_integrator_set
    __swig_getmethods__["integrator"] = _vscmgStateEffector.DynamicObject_integrator_get
    if _newclass:
        integrator = _swig_property(_vscmgStateEffector.DynamicObject_integrator_get, _vscmgStateEffector.DynamicObject_integrator_set)
    __swig_destroy__ = _vscmgStateEffector.delete_DynamicObject
    __del__ = lambda self: None

    def initializeDynamics(self):
        return _vscmgStateEffector.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _vscmgStateEffector.DynamicObject_computeEnergyMomentum(self, t)

    def UpdateState(self, callTime):
        return _vscmgStateEffector.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t):
        return _vscmgStateEffector.DynamicObject_equationsOfMotion(self, t)

    def integrateState(self, t):
        return _vscmgStateEffector.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _vscmgStateEffector.DynamicObject_setIntegrator(self, newIntegrator)
DynamicObject_swigregister = _vscmgStateEffector.DynamicObject_swigregister
DynamicObject_swigregister(DynamicObject)

class VSCMGStateEffector(SysModel, StateEffector):
    __swig_setmethods__ = {}
    for _s in [SysModel, StateEffector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGStateEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel, StateEffector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGStateEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGStateEffector
    __del__ = lambda self: None

    def registerStates(self, states):
        return _vscmgStateEffector.VSCMGStateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _vscmgStateEffector.VSCMGStateEffector_linkInStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _vscmgStateEffector.VSCMGStateEffector_updateEffectorMassProps(self, integTime)

    def SelfInit(self):
        return _vscmgStateEffector.VSCMGStateEffector_SelfInit(self)

    def CrossInit(self):
        return _vscmgStateEffector.VSCMGStateEffector_CrossInit(self)

    def AddVSCMG(self, NewVSCMG):
        return _vscmgStateEffector.VSCMGStateEffector_AddVSCMG(self, NewVSCMG)

    def UpdateState(self, CurrentSimNanos):
        return _vscmgStateEffector.VSCMGStateEffector_UpdateState(self, CurrentSimNanos)

    def WriteOutputMessages(self, CurrentClock):
        return _vscmgStateEffector.VSCMGStateEffector_WriteOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _vscmgStateEffector.VSCMGStateEffector_ReadInputs(self)

    def ConfigureVSCMGRequests(self, CurrentTime):
        return _vscmgStateEffector.VSCMGStateEffector_ConfigureVSCMGRequests(self, CurrentTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _vscmgStateEffector.VSCMGStateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _vscmgStateEffector.VSCMGStateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _vscmgStateEffector.VSCMGStateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)
    __swig_setmethods__["VSCMGData"] = _vscmgStateEffector.VSCMGStateEffector_VSCMGData_set
    __swig_getmethods__["VSCMGData"] = _vscmgStateEffector.VSCMGStateEffector_VSCMGData_get
    if _newclass:
        VSCMGData = _swig_property(_vscmgStateEffector.VSCMGStateEffector_VSCMGData_get, _vscmgStateEffector.VSCMGStateEffector_VSCMGData_set)
    __swig_setmethods__["g_N"] = _vscmgStateEffector.VSCMGStateEffector_g_N_set
    __swig_getmethods__["g_N"] = _vscmgStateEffector.VSCMGStateEffector_g_N_get
    if _newclass:
        g_N = _swig_property(_vscmgStateEffector.VSCMGStateEffector_g_N_get, _vscmgStateEffector.VSCMGStateEffector_g_N_set)
    __swig_setmethods__["InputCmds"] = _vscmgStateEffector.VSCMGStateEffector_InputCmds_set
    __swig_getmethods__["InputCmds"] = _vscmgStateEffector.VSCMGStateEffector_InputCmds_get
    if _newclass:
        InputCmds = _swig_property(_vscmgStateEffector.VSCMGStateEffector_InputCmds_get, _vscmgStateEffector.VSCMGStateEffector_InputCmds_set)
    __swig_setmethods__["OutputDataString"] = _vscmgStateEffector.VSCMGStateEffector_OutputDataString_set
    __swig_getmethods__["OutputDataString"] = _vscmgStateEffector.VSCMGStateEffector_OutputDataString_get
    if _newclass:
        OutputDataString = _swig_property(_vscmgStateEffector.VSCMGStateEffector_OutputDataString_get, _vscmgStateEffector.VSCMGStateEffector_OutputDataString_set)
    __swig_setmethods__["OutputBufferCount"] = _vscmgStateEffector.VSCMGStateEffector_OutputBufferCount_set
    __swig_getmethods__["OutputBufferCount"] = _vscmgStateEffector.VSCMGStateEffector_OutputBufferCount_get
    if _newclass:
        OutputBufferCount = _swig_property(_vscmgStateEffector.VSCMGStateEffector_OutputBufferCount_get, _vscmgStateEffector.VSCMGStateEffector_OutputBufferCount_set)
    __swig_setmethods__["NewVSCMGCmds"] = _vscmgStateEffector.VSCMGStateEffector_NewVSCMGCmds_set
    __swig_getmethods__["NewVSCMGCmds"] = _vscmgStateEffector.VSCMGStateEffector_NewVSCMGCmds_get
    if _newclass:
        NewVSCMGCmds = _swig_property(_vscmgStateEffector.VSCMGStateEffector_NewVSCMGCmds_get, _vscmgStateEffector.VSCMGStateEffector_NewVSCMGCmds_set)
    __swig_setmethods__["outputStates"] = _vscmgStateEffector.VSCMGStateEffector_outputStates_set
    __swig_getmethods__["outputStates"] = _vscmgStateEffector.VSCMGStateEffector_outputStates_get
    if _newclass:
        outputStates = _swig_property(_vscmgStateEffector.VSCMGStateEffector_outputStates_get, _vscmgStateEffector.VSCMGStateEffector_outputStates_set)
    __swig_setmethods__["nameOfVSCMGOmegasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_set
    __swig_getmethods__["nameOfVSCMGOmegasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_get
    if _newclass:
        nameOfVSCMGOmegasState = _swig_property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGOmegasState_set)
    __swig_setmethods__["nameOfVSCMGThetasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_set
    __swig_getmethods__["nameOfVSCMGThetasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_get
    if _newclass:
        nameOfVSCMGThetasState = _swig_property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGThetasState_set)
    __swig_setmethods__["nameOfVSCMGGammasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_set
    __swig_getmethods__["nameOfVSCMGGammasState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_get
    if _newclass:
        nameOfVSCMGGammasState = _swig_property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammasState_set)
    __swig_setmethods__["nameOfVSCMGGammaDotsState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_set
    __swig_getmethods__["nameOfVSCMGGammaDotsState"] = _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_get
    if _newclass:
        nameOfVSCMGGammaDotsState = _swig_property(_vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_get, _vscmgStateEffector.VSCMGStateEffector_nameOfVSCMGGammaDotsState_set)
    __swig_setmethods__["numVSCMG"] = _vscmgStateEffector.VSCMGStateEffector_numVSCMG_set
    __swig_getmethods__["numVSCMG"] = _vscmgStateEffector.VSCMGStateEffector_numVSCMG_get
    if _newclass:
        numVSCMG = _swig_property(_vscmgStateEffector.VSCMGStateEffector_numVSCMG_get, _vscmgStateEffector.VSCMGStateEffector_numVSCMG_set)
    __swig_setmethods__["numVSCMGJitter"] = _vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_set
    __swig_getmethods__["numVSCMGJitter"] = _vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_get
    if _newclass:
        numVSCMGJitter = _swig_property(_vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_get, _vscmgStateEffector.VSCMGStateEffector_numVSCMGJitter_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGStateEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
VSCMGStateEffector_swigregister = _vscmgStateEffector.VSCMGStateEffector_swigregister
VSCMGStateEffector_swigregister(VSCMGStateEffector)

class VSCMGCmdSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGCmdSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGCmdSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u_s_cmd"] = _vscmgStateEffector.VSCMGCmdSimMsg_u_s_cmd_set
    __swig_getmethods__["u_s_cmd"] = _vscmgStateEffector.VSCMGCmdSimMsg_u_s_cmd_get
    if _newclass:
        u_s_cmd = _swig_property(_vscmgStateEffector.VSCMGCmdSimMsg_u_s_cmd_get, _vscmgStateEffector.VSCMGCmdSimMsg_u_s_cmd_set)
    __swig_setmethods__["u_g_cmd"] = _vscmgStateEffector.VSCMGCmdSimMsg_u_g_cmd_set
    __swig_getmethods__["u_g_cmd"] = _vscmgStateEffector.VSCMGCmdSimMsg_u_g_cmd_get
    if _newclass:
        u_g_cmd = _swig_property(_vscmgStateEffector.VSCMGCmdSimMsg_u_g_cmd_get, _vscmgStateEffector.VSCMGCmdSimMsg_u_g_cmd_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGCmdSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGCmdSimMsg
    __del__ = lambda self: None
VSCMGCmdSimMsg_swigregister = _vscmgStateEffector.VSCMGCmdSimMsg_swigregister
VSCMGCmdSimMsg_swigregister(VSCMGCmdSimMsg)

vscmgBalancedWheels = _vscmgStateEffector.vscmgBalancedWheels
vscmgJitterSimple = _vscmgStateEffector.vscmgJitterSimple
vscmgJitterFullyCoupled = _vscmgStateEffector.vscmgJitterFullyCoupled
class VSCMGConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VSCMGModel"] = _vscmgStateEffector.VSCMGConfigSimMsg_VSCMGModel_set
    __swig_getmethods__["VSCMGModel"] = _vscmgStateEffector.VSCMGConfigSimMsg_VSCMGModel_get
    if _newclass:
        VSCMGModel = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_VSCMGModel_get, _vscmgStateEffector.VSCMGConfigSimMsg_VSCMGModel_set)
    __swig_setmethods__["rGB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGB_B_set
    __swig_getmethods__["rGB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGB_B_get
    if _newclass:
        rGB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rGB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rGB_B_set)
    __swig_setmethods__["gsHat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gsHat0_B_set
    __swig_getmethods__["gsHat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gsHat0_B_get
    if _newclass:
        gsHat0_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gsHat0_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_gsHat0_B_set)
    __swig_setmethods__["gsHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gsHat_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_gsHat_B_set)
    __swig_setmethods__["gtHat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gtHat0_B_set
    __swig_getmethods__["gtHat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gtHat0_B_get
    if _newclass:
        gtHat0_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gtHat0_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_gtHat0_B_set)
    __swig_setmethods__["gtHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gtHat_B_set
    __swig_getmethods__["gtHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_gtHat_B_get
    if _newclass:
        gtHat_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gtHat_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_gtHat_B_set)
    __swig_setmethods__["ggHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_ggHat_B_set
    __swig_getmethods__["ggHat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_ggHat_B_get
    if _newclass:
        ggHat_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_ggHat_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_ggHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_w2Hat0_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w2Hat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat_B_set
    __swig_getmethods__["w2Hat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat_B_get
    if _newclass:
        w2Hat_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_w2Hat_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_w2Hat_B_set)
    __swig_setmethods__["w3Hat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_w3Hat0_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat0_B_set)
    __swig_setmethods__["w3Hat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat_B_set
    __swig_getmethods__["w3Hat_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat_B_get
    if _newclass:
        w3Hat_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_w3Hat_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_w3Hat_B_set)
    __swig_setmethods__["massV"] = _vscmgStateEffector.VSCMGConfigSimMsg_massV_set
    __swig_getmethods__["massV"] = _vscmgStateEffector.VSCMGConfigSimMsg_massV_get
    if _newclass:
        massV = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_massV_get, _vscmgStateEffector.VSCMGConfigSimMsg_massV_set)
    __swig_setmethods__["massG"] = _vscmgStateEffector.VSCMGConfigSimMsg_massG_set
    __swig_getmethods__["massG"] = _vscmgStateEffector.VSCMGConfigSimMsg_massG_get
    if _newclass:
        massG = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_massG_get, _vscmgStateEffector.VSCMGConfigSimMsg_massG_set)
    __swig_setmethods__["massW"] = _vscmgStateEffector.VSCMGConfigSimMsg_massW_set
    __swig_getmethods__["massW"] = _vscmgStateEffector.VSCMGConfigSimMsg_massW_get
    if _newclass:
        massW = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_massW_get, _vscmgStateEffector.VSCMGConfigSimMsg_massW_set)
    __swig_setmethods__["theta"] = _vscmgStateEffector.VSCMGConfigSimMsg_theta_set
    __swig_getmethods__["theta"] = _vscmgStateEffector.VSCMGConfigSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_theta_get, _vscmgStateEffector.VSCMGConfigSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _vscmgStateEffector.VSCMGConfigSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _vscmgStateEffector.VSCMGConfigSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_Omega_get, _vscmgStateEffector.VSCMGConfigSimMsg_Omega_set)
    __swig_setmethods__["gamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_gamma_set
    __swig_getmethods__["gamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_gamma_get
    if _newclass:
        gamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_gamma_set)
    __swig_setmethods__["gammaDot"] = _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_set
    __swig_getmethods__["gammaDot"] = _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_get
    if _newclass:
        gammaDot = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_get, _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_set)
    __swig_setmethods__["IW1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW1_set
    __swig_getmethods__["IW1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW1_get
    if _newclass:
        IW1 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IW1_get, _vscmgStateEffector.VSCMGConfigSimMsg_IW1_set)
    __swig_setmethods__["IW2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW2_set
    __swig_getmethods__["IW2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW2_get
    if _newclass:
        IW2 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IW2_get, _vscmgStateEffector.VSCMGConfigSimMsg_IW2_set)
    __swig_setmethods__["IW3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW3_set
    __swig_getmethods__["IW3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW3_get
    if _newclass:
        IW3 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IW3_get, _vscmgStateEffector.VSCMGConfigSimMsg_IW3_set)
    __swig_setmethods__["IW13"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW13_set
    __swig_getmethods__["IW13"] = _vscmgStateEffector.VSCMGConfigSimMsg_IW13_get
    if _newclass:
        IW13 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IW13_get, _vscmgStateEffector.VSCMGConfigSimMsg_IW13_set)
    __swig_setmethods__["IG1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG1_set
    __swig_getmethods__["IG1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG1_get
    if _newclass:
        IG1 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG1_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG1_set)
    __swig_setmethods__["IG2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG2_set
    __swig_getmethods__["IG2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG2_get
    if _newclass:
        IG2 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG2_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG2_set)
    __swig_setmethods__["IG3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG3_set
    __swig_getmethods__["IG3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG3_get
    if _newclass:
        IG3 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG3_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG3_set)
    __swig_setmethods__["IG12"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG12_set
    __swig_getmethods__["IG12"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG12_get
    if _newclass:
        IG12 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG12_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG12_set)
    __swig_setmethods__["IG13"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG13_set
    __swig_getmethods__["IG13"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG13_get
    if _newclass:
        IG13 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG13_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG13_set)
    __swig_setmethods__["IG23"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG23_set
    __swig_getmethods__["IG23"] = _vscmgStateEffector.VSCMGConfigSimMsg_IG23_get
    if _newclass:
        IG23 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IG23_get, _vscmgStateEffector.VSCMGConfigSimMsg_IG23_set)
    __swig_setmethods__["IV1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV1_set
    __swig_getmethods__["IV1"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV1_get
    if _newclass:
        IV1 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IV1_get, _vscmgStateEffector.VSCMGConfigSimMsg_IV1_set)
    __swig_setmethods__["IV2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV2_set
    __swig_getmethods__["IV2"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV2_get
    if _newclass:
        IV2 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IV2_get, _vscmgStateEffector.VSCMGConfigSimMsg_IV2_set)
    __swig_setmethods__["IV3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV3_set
    __swig_getmethods__["IV3"] = _vscmgStateEffector.VSCMGConfigSimMsg_IV3_get
    if _newclass:
        IV3 = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IV3_get, _vscmgStateEffector.VSCMGConfigSimMsg_IV3_set)
    __swig_setmethods__["rhoG"] = _vscmgStateEffector.VSCMGConfigSimMsg_rhoG_set
    __swig_getmethods__["rhoG"] = _vscmgStateEffector.VSCMGConfigSimMsg_rhoG_get
    if _newclass:
        rhoG = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rhoG_get, _vscmgStateEffector.VSCMGConfigSimMsg_rhoG_set)
    __swig_setmethods__["rhoW"] = _vscmgStateEffector.VSCMGConfigSimMsg_rhoW_set
    __swig_getmethods__["rhoW"] = _vscmgStateEffector.VSCMGConfigSimMsg_rhoW_get
    if _newclass:
        rhoW = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rhoW_get, _vscmgStateEffector.VSCMGConfigSimMsg_rhoW_set)
    __swig_setmethods__["U_s"] = _vscmgStateEffector.VSCMGConfigSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _vscmgStateEffector.VSCMGConfigSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_U_s_get, _vscmgStateEffector.VSCMGConfigSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _vscmgStateEffector.VSCMGConfigSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _vscmgStateEffector.VSCMGConfigSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_U_d_get, _vscmgStateEffector.VSCMGConfigSimMsg_U_d_set)
    __swig_setmethods__["rGcG_G"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_G_set
    __swig_getmethods__["rGcG_G"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_G_get
    if _newclass:
        rGcG_G = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rGcG_G_get, _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_G_set)
    __swig_setmethods__["d"] = _vscmgStateEffector.VSCMGConfigSimMsg_d_set
    __swig_getmethods__["d"] = _vscmgStateEffector.VSCMGConfigSimMsg_d_get
    if _newclass:
        d = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_d_get, _vscmgStateEffector.VSCMGConfigSimMsg_d_set)
    __swig_setmethods__["l"] = _vscmgStateEffector.VSCMGConfigSimMsg_l_set
    __swig_getmethods__["l"] = _vscmgStateEffector.VSCMGConfigSimMsg_l_get
    if _newclass:
        l = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_l_get, _vscmgStateEffector.VSCMGConfigSimMsg_l_set)
    __swig_setmethods__["L"] = _vscmgStateEffector.VSCMGConfigSimMsg_L_set
    __swig_getmethods__["L"] = _vscmgStateEffector.VSCMGConfigSimMsg_L_get
    if _newclass:
        L = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_L_get, _vscmgStateEffector.VSCMGConfigSimMsg_L_set)
    __swig_setmethods__["u_s_current"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_current_set
    __swig_getmethods__["u_s_current"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_current_get
    if _newclass:
        u_s_current = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_s_current_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_s_current_set)
    __swig_setmethods__["u_s_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_max_set
    __swig_getmethods__["u_s_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_max_get
    if _newclass:
        u_s_max = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_s_max_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_s_max_set)
    __swig_setmethods__["u_s_min"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_min_set
    __swig_getmethods__["u_s_min"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_min_get
    if _newclass:
        u_s_min = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_s_min_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_s_min_set)
    __swig_setmethods__["u_s_f"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_f_set
    __swig_getmethods__["u_s_f"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_s_f_get
    if _newclass:
        u_s_f = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_s_f_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_s_f_set)
    __swig_setmethods__["Omega_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_Omega_max_get, _vscmgStateEffector.VSCMGConfigSimMsg_Omega_max_set)
    __swig_setmethods__["wheelLinearFrictionRatio"] = _vscmgStateEffector.VSCMGConfigSimMsg_wheelLinearFrictionRatio_set
    __swig_getmethods__["wheelLinearFrictionRatio"] = _vscmgStateEffector.VSCMGConfigSimMsg_wheelLinearFrictionRatio_get
    if _newclass:
        wheelLinearFrictionRatio = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_wheelLinearFrictionRatio_get, _vscmgStateEffector.VSCMGConfigSimMsg_wheelLinearFrictionRatio_set)
    __swig_setmethods__["u_g_current"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_current_set
    __swig_getmethods__["u_g_current"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_current_get
    if _newclass:
        u_g_current = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_g_current_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_g_current_set)
    __swig_setmethods__["u_g_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_max_set
    __swig_getmethods__["u_g_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_max_get
    if _newclass:
        u_g_max = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_g_max_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_g_max_set)
    __swig_setmethods__["u_g_min"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_min_set
    __swig_getmethods__["u_g_min"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_min_get
    if _newclass:
        u_g_min = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_g_min_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_g_min_set)
    __swig_setmethods__["u_g_f"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_f_set
    __swig_getmethods__["u_g_f"] = _vscmgStateEffector.VSCMGConfigSimMsg_u_g_f_get
    if _newclass:
        u_g_f = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_u_g_f_get, _vscmgStateEffector.VSCMGConfigSimMsg_u_g_f_set)
    __swig_setmethods__["gammaDot_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_max_set
    __swig_getmethods__["gammaDot_max"] = _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_max_get
    if _newclass:
        gammaDot_max = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_max_get, _vscmgStateEffector.VSCMGConfigSimMsg_gammaDot_max_set)
    __swig_setmethods__["gimbalLinearFrictionRatio"] = _vscmgStateEffector.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_set
    __swig_getmethods__["gimbalLinearFrictionRatio"] = _vscmgStateEffector.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_get
    if _newclass:
        gimbalLinearFrictionRatio = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_get, _vscmgStateEffector.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_set)
    __swig_setmethods__["IGPntGc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IGPntGc_B_set
    __swig_getmethods__["IGPntGc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IGPntGc_B_get
    if _newclass:
        IGPntGc_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IGPntGc_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_IGPntGc_B_set)
    __swig_setmethods__["IWPntWc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IWPntWc_B_set
    __swig_getmethods__["IWPntWc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IWPntWc_B_get
    if _newclass:
        IWPntWc_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IWPntWc_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_IWPntWc_B_set)
    __swig_setmethods__["IPrimeGPntGc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeGPntGc_B_set
    __swig_getmethods__["IPrimeGPntGc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeGPntGc_B_get
    if _newclass:
        IPrimeGPntGc_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IPrimeGPntGc_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeGPntGc_B_set)
    __swig_setmethods__["IPrimeWPntWc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeWPntWc_B_set
    __swig_getmethods__["IPrimeWPntWc_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeWPntWc_B_get
    if _newclass:
        IPrimeWPntWc_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_IPrimeWPntWc_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_IPrimeWPntWc_B_set)
    __swig_setmethods__["rGcG_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_B_set
    __swig_getmethods__["rGcG_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_B_get
    if _newclass:
        rGcG_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rGcG_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rGcG_B_set)
    __swig_setmethods__["rGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcB_B_set
    __swig_getmethods__["rGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rGcB_B_get
    if _newclass:
        rGcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rGcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rGcB_B_set)
    __swig_setmethods__["rWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rWcB_B_set
    __swig_getmethods__["rWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rWcB_B_get
    if _newclass:
        rWcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rWcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rWcB_B_set)
    __swig_setmethods__["rWcG_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rWcG_B_set
    __swig_getmethods__["rWcG_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rWcG_B_get
    if _newclass:
        rWcG_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rWcG_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rWcG_B_set)
    __swig_setmethods__["rTildeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rTildeGcB_B_set
    __swig_getmethods__["rTildeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rTildeGcB_B_get
    if _newclass:
        rTildeGcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rTildeGcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rTildeGcB_B_set)
    __swig_setmethods__["rTildeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rTildeWcB_B_set
    __swig_getmethods__["rTildeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rTildeWcB_B_get
    if _newclass:
        rTildeWcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rTildeWcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rTildeWcB_B_set)
    __swig_setmethods__["rPrimeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeGcB_B_set
    __swig_getmethods__["rPrimeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeGcB_B_get
    if _newclass:
        rPrimeGcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rPrimeGcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeGcB_B_set)
    __swig_setmethods__["rPrimeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeWcB_B_set
    __swig_getmethods__["rPrimeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeWcB_B_get
    if _newclass:
        rPrimeWcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rPrimeWcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeWcB_B_set)
    __swig_setmethods__["rPrimeTildeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeGcB_B_set
    __swig_getmethods__["rPrimeTildeGcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeGcB_B_get
    if _newclass:
        rPrimeTildeGcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeGcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeGcB_B_set)
    __swig_setmethods__["rPrimeTildeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeWcB_B_set
    __swig_getmethods__["rPrimeTildeWcB_B"] = _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeWcB_B_get
    if _newclass:
        rPrimeTildeWcB_B = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeWcB_B_get, _vscmgStateEffector.VSCMGConfigSimMsg_rPrimeTildeWcB_B_set)
    __swig_setmethods__["aOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_aOmega_set
    __swig_getmethods__["aOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_aOmega_get
    if _newclass:
        aOmega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_aOmega_get, _vscmgStateEffector.VSCMGConfigSimMsg_aOmega_set)
    __swig_setmethods__["bOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_bOmega_set
    __swig_getmethods__["bOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_bOmega_get
    if _newclass:
        bOmega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_bOmega_get, _vscmgStateEffector.VSCMGConfigSimMsg_bOmega_set)
    __swig_setmethods__["cOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_cOmega_set
    __swig_getmethods__["cOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_cOmega_get
    if _newclass:
        cOmega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_cOmega_get, _vscmgStateEffector.VSCMGConfigSimMsg_cOmega_set)
    __swig_setmethods__["dOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_dOmega_set
    __swig_getmethods__["dOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_dOmega_get
    if _newclass:
        dOmega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_dOmega_get, _vscmgStateEffector.VSCMGConfigSimMsg_dOmega_set)
    __swig_setmethods__["eOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_eOmega_set
    __swig_getmethods__["eOmega"] = _vscmgStateEffector.VSCMGConfigSimMsg_eOmega_get
    if _newclass:
        eOmega = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_eOmega_get, _vscmgStateEffector.VSCMGConfigSimMsg_eOmega_set)
    __swig_setmethods__["agamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_agamma_set
    __swig_getmethods__["agamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_agamma_get
    if _newclass:
        agamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_agamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_agamma_set)
    __swig_setmethods__["bgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_bgamma_set
    __swig_getmethods__["bgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_bgamma_get
    if _newclass:
        bgamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_bgamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_bgamma_set)
    __swig_setmethods__["cgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_cgamma_set
    __swig_getmethods__["cgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_cgamma_get
    if _newclass:
        cgamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_cgamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_cgamma_set)
    __swig_setmethods__["dgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_dgamma_set
    __swig_getmethods__["dgamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_dgamma_get
    if _newclass:
        dgamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_dgamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_dgamma_set)
    __swig_setmethods__["egamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_egamma_set
    __swig_getmethods__["egamma"] = _vscmgStateEffector.VSCMGConfigSimMsg_egamma_get
    if _newclass:
        egamma = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_egamma_get, _vscmgStateEffector.VSCMGConfigSimMsg_egamma_set)
    __swig_setmethods__["p"] = _vscmgStateEffector.VSCMGConfigSimMsg_p_set
    __swig_getmethods__["p"] = _vscmgStateEffector.VSCMGConfigSimMsg_p_get
    if _newclass:
        p = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_p_get, _vscmgStateEffector.VSCMGConfigSimMsg_p_set)
    __swig_setmethods__["q"] = _vscmgStateEffector.VSCMGConfigSimMsg_q_set
    __swig_getmethods__["q"] = _vscmgStateEffector.VSCMGConfigSimMsg_q_get
    if _newclass:
        q = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_q_get, _vscmgStateEffector.VSCMGConfigSimMsg_q_set)
    __swig_setmethods__["s"] = _vscmgStateEffector.VSCMGConfigSimMsg_s_set
    __swig_getmethods__["s"] = _vscmgStateEffector.VSCMGConfigSimMsg_s_get
    if _newclass:
        s = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_s_get, _vscmgStateEffector.VSCMGConfigSimMsg_s_set)
    __swig_setmethods__["gravityTorqueWheel_s"] = _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueWheel_s_set
    __swig_getmethods__["gravityTorqueWheel_s"] = _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueWheel_s_get
    if _newclass:
        gravityTorqueWheel_s = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueWheel_s_get, _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueWheel_s_set)
    __swig_setmethods__["gravityTorqueGimbal_g"] = _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueGimbal_g_set
    __swig_getmethods__["gravityTorqueGimbal_g"] = _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueGimbal_g_get
    if _newclass:
        gravityTorqueGimbal_g = _swig_property(_vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueGimbal_g_get, _vscmgStateEffector.VSCMGConfigSimMsg_gravityTorqueGimbal_g_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGConfigSimMsg
    __del__ = lambda self: None
VSCMGConfigSimMsg_swigregister = _vscmgStateEffector.VSCMGConfigSimMsg_swigregister
VSCMGConfigSimMsg_swigregister(VSCMGConfigSimMsg)

class VSCMGSpeedIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGSpeedIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGSpeedIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelSpeeds"] = _vscmgStateEffector.VSCMGSpeedIntMsg_wheelSpeeds_set
    __swig_getmethods__["wheelSpeeds"] = _vscmgStateEffector.VSCMGSpeedIntMsg_wheelSpeeds_get
    if _newclass:
        wheelSpeeds = _swig_property(_vscmgStateEffector.VSCMGSpeedIntMsg_wheelSpeeds_get, _vscmgStateEffector.VSCMGSpeedIntMsg_wheelSpeeds_set)
    __swig_setmethods__["gimbalAngles"] = _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalAngles_set
    __swig_getmethods__["gimbalAngles"] = _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalAngles_get
    if _newclass:
        gimbalAngles = _swig_property(_vscmgStateEffector.VSCMGSpeedIntMsg_gimbalAngles_get, _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalAngles_set)
    __swig_setmethods__["gimbalRates"] = _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalRates_set
    __swig_getmethods__["gimbalRates"] = _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalRates_get
    if _newclass:
        gimbalRates = _swig_property(_vscmgStateEffector.VSCMGSpeedIntMsg_gimbalRates_get, _vscmgStateEffector.VSCMGSpeedIntMsg_gimbalRates_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGSpeedIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGSpeedIntMsg
    __del__ = lambda self: None
VSCMGSpeedIntMsg_swigregister = _vscmgStateEffector.VSCMGSpeedIntMsg_swigregister
VSCMGSpeedIntMsg_swigregister(VSCMGSpeedIntMsg)

class VSCMGArrayTorqueIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGArrayTorqueIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGArrayTorqueIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelTorque"] = _vscmgStateEffector.VSCMGArrayTorqueIntMsg_wheelTorque_set
    __swig_getmethods__["wheelTorque"] = _vscmgStateEffector.VSCMGArrayTorqueIntMsg_wheelTorque_get
    if _newclass:
        wheelTorque = _swig_property(_vscmgStateEffector.VSCMGArrayTorqueIntMsg_wheelTorque_get, _vscmgStateEffector.VSCMGArrayTorqueIntMsg_wheelTorque_set)
    __swig_setmethods__["gimbalTorque"] = _vscmgStateEffector.VSCMGArrayTorqueIntMsg_gimbalTorque_set
    __swig_getmethods__["gimbalTorque"] = _vscmgStateEffector.VSCMGArrayTorqueIntMsg_gimbalTorque_get
    if _newclass:
        gimbalTorque = _swig_property(_vscmgStateEffector.VSCMGArrayTorqueIntMsg_gimbalTorque_get, _vscmgStateEffector.VSCMGArrayTorqueIntMsg_gimbalTorque_set)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGArrayTorqueIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGArrayTorqueIntMsg
    __del__ = lambda self: None
VSCMGArrayTorqueIntMsg_swigregister = _vscmgStateEffector.VSCMGArrayTorqueIntMsg_swigregister
VSCMGArrayTorqueIntMsg_swigregister(VSCMGArrayTorqueIntMsg)

MAX_EFF_CNT = _vscmgStateEffector.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _vscmgStateEffector.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _vscmgStateEffector.MAX_ST_VEH_COUNT
NANO2SEC = _vscmgStateEffector.NANO2SEC
class VSCMGConfigVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGConfigVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGConfigVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.VSCMGConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.VSCMGConfigVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.VSCMGConfigVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.VSCMGConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.VSCMGConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.VSCMGConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.VSCMGConfigVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.VSCMGConfigVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.VSCMGConfigVector_empty(self)

    def size(self):
        return _vscmgStateEffector.VSCMGConfigVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.VSCMGConfigVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.VSCMGConfigVector_begin(self)

    def end(self):
        return _vscmgStateEffector.VSCMGConfigVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.VSCMGConfigVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.VSCMGConfigVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.VSCMGConfigVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.VSCMGConfigVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.VSCMGConfigVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGConfigVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.VSCMGConfigVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.VSCMGConfigVector_front(self)

    def back(self):
        return _vscmgStateEffector.VSCMGConfigVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.VSCMGConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.VSCMGConfigVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.VSCMGConfigVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.VSCMGConfigVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGConfigVector
    __del__ = lambda self: None
VSCMGConfigVector_swigregister = _vscmgStateEffector.VSCMGConfigVector_swigregister
VSCMGConfigVector_swigregister(VSCMGConfigVector)

class VSCMGCmdVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGCmdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGCmdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vscmgStateEffector.VSCMGCmdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vscmgStateEffector.VSCMGCmdVector___nonzero__(self)

    def __bool__(self):
        return _vscmgStateEffector.VSCMGCmdVector___bool__(self)

    def __len__(self):
        return _vscmgStateEffector.VSCMGCmdVector___len__(self)

    def __getslice__(self, i, j):
        return _vscmgStateEffector.VSCMGCmdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vscmgStateEffector.VSCMGCmdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector___setitem__(self, *args)

    def pop(self):
        return _vscmgStateEffector.VSCMGCmdVector_pop(self)

    def append(self, x):
        return _vscmgStateEffector.VSCMGCmdVector_append(self, x)

    def empty(self):
        return _vscmgStateEffector.VSCMGCmdVector_empty(self)

    def size(self):
        return _vscmgStateEffector.VSCMGCmdVector_size(self)

    def swap(self, v):
        return _vscmgStateEffector.VSCMGCmdVector_swap(self, v)

    def begin(self):
        return _vscmgStateEffector.VSCMGCmdVector_begin(self)

    def end(self):
        return _vscmgStateEffector.VSCMGCmdVector_end(self)

    def rbegin(self):
        return _vscmgStateEffector.VSCMGCmdVector_rbegin(self)

    def rend(self):
        return _vscmgStateEffector.VSCMGCmdVector_rend(self)

    def clear(self):
        return _vscmgStateEffector.VSCMGCmdVector_clear(self)

    def get_allocator(self):
        return _vscmgStateEffector.VSCMGCmdVector_get_allocator(self)

    def pop_back(self):
        return _vscmgStateEffector.VSCMGCmdVector_pop_back(self)

    def erase(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector_erase(self, *args)

    def __init__(self, *args):
        this = _vscmgStateEffector.new_VSCMGCmdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vscmgStateEffector.VSCMGCmdVector_push_back(self, x)

    def front(self):
        return _vscmgStateEffector.VSCMGCmdVector_front(self)

    def back(self):
        return _vscmgStateEffector.VSCMGCmdVector_back(self)

    def assign(self, n, x):
        return _vscmgStateEffector.VSCMGCmdVector_assign(self, n, x)

    def resize(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector_resize(self, *args)

    def insert(self, *args):
        return _vscmgStateEffector.VSCMGCmdVector_insert(self, *args)

    def reserve(self, n):
        return _vscmgStateEffector.VSCMGCmdVector_reserve(self, n)

    def capacity(self):
        return _vscmgStateEffector.VSCMGCmdVector_capacity(self)
    __swig_destroy__ = _vscmgStateEffector.delete_VSCMGCmdVector
    __del__ = lambda self: None
VSCMGCmdVector_swigregister = _vscmgStateEffector.VSCMGCmdVector_swigregister
VSCMGCmdVector_swigregister(VSCMGCmdVector)

sizeof_VSCMGArrayTorqueIntMsg = _vscmgStateEffector.sizeof_VSCMGArrayTorqueIntMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


