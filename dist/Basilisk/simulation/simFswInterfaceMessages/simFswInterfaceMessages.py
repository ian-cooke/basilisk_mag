# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simFswInterfaceMessages')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simFswInterfaceMessages')
    _simFswInterfaceMessages = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simFswInterfaceMessages', [dirname(__file__)])
        except ImportError:
            import _simFswInterfaceMessages
            return _simFswInterfaceMessages
        try:
            _mod = imp.load_module('_simFswInterfaceMessages', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simFswInterfaceMessages = swig_import_helper()
    del swig_import_helper
else:
    import _simFswInterfaceMessages
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _simFswInterfaceMessages.new_doubleArray(nelements)
new_doubleArray = _simFswInterfaceMessages.new_doubleArray

def delete_doubleArray(ary):
    return _simFswInterfaceMessages.delete_doubleArray(ary)
delete_doubleArray = _simFswInterfaceMessages.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _simFswInterfaceMessages.doubleArray_getitem(ary, index)
doubleArray_getitem = _simFswInterfaceMessages.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _simFswInterfaceMessages.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _simFswInterfaceMessages.doubleArray_setitem

def new_longArray(nelements):
    return _simFswInterfaceMessages.new_longArray(nelements)
new_longArray = _simFswInterfaceMessages.new_longArray

def delete_longArray(ary):
    return _simFswInterfaceMessages.delete_longArray(ary)
delete_longArray = _simFswInterfaceMessages.delete_longArray

def longArray_getitem(ary, index):
    return _simFswInterfaceMessages.longArray_getitem(ary, index)
longArray_getitem = _simFswInterfaceMessages.longArray_getitem

def longArray_setitem(ary, index, value):
    return _simFswInterfaceMessages.longArray_setitem(ary, index, value)
longArray_setitem = _simFswInterfaceMessages.longArray_setitem

def new_intArray(nelements):
    return _simFswInterfaceMessages.new_intArray(nelements)
new_intArray = _simFswInterfaceMessages.new_intArray

def delete_intArray(ary):
    return _simFswInterfaceMessages.delete_intArray(ary)
delete_intArray = _simFswInterfaceMessages.delete_intArray

def intArray_getitem(ary, index):
    return _simFswInterfaceMessages.intArray_getitem(ary, index)
intArray_getitem = _simFswInterfaceMessages.intArray_getitem

def intArray_setitem(ary, index, value):
    return _simFswInterfaceMessages.intArray_setitem(ary, index, value)
intArray_setitem = _simFswInterfaceMessages.intArray_setitem

def new_shortArray(nelements):
    return _simFswInterfaceMessages.new_shortArray(nelements)
new_shortArray = _simFswInterfaceMessages.new_shortArray

def delete_shortArray(ary):
    return _simFswInterfaceMessages.delete_shortArray(ary)
delete_shortArray = _simFswInterfaceMessages.delete_shortArray

def shortArray_getitem(ary, index):
    return _simFswInterfaceMessages.shortArray_getitem(ary, index)
shortArray_getitem = _simFswInterfaceMessages.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _simFswInterfaceMessages.shortArray_setitem(ary, index, value)
shortArray_setitem = _simFswInterfaceMessages.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simFswInterfaceMessages.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _simFswInterfaceMessages.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _simFswInterfaceMessages.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _simFswInterfaceMessages.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _simFswInterfaceMessages.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _simFswInterfaceMessages.SwigPyIterator_equal(self, x)

    def copy(self):
        return _simFswInterfaceMessages.SwigPyIterator_copy(self)

    def next(self):
        return _simFswInterfaceMessages.SwigPyIterator_next(self)

    def __next__(self):
        return _simFswInterfaceMessages.SwigPyIterator___next__(self)

    def previous(self):
        return _simFswInterfaceMessages.SwigPyIterator_previous(self)

    def advance(self, n):
        return _simFswInterfaceMessages.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _simFswInterfaceMessages.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _simFswInterfaceMessages.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _simFswInterfaceMessages.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _simFswInterfaceMessages.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _simFswInterfaceMessages.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _simFswInterfaceMessages.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _simFswInterfaceMessages.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_boolArray(nelements):
    return _simFswInterfaceMessages.new_boolArray(nelements)
new_boolArray = _simFswInterfaceMessages.new_boolArray

def delete_boolArray(ary):
    return _simFswInterfaceMessages.delete_boolArray(ary)
delete_boolArray = _simFswInterfaceMessages.delete_boolArray

def boolArray_getitem(ary, index):
    return _simFswInterfaceMessages.boolArray_getitem(ary, index)
boolArray_getitem = _simFswInterfaceMessages.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _simFswInterfaceMessages.boolArray_setitem(ary, index, value)
boolArray_setitem = _simFswInterfaceMessages.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.IntVector___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.IntVector___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _simFswInterfaceMessages.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simFswInterfaceMessages.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simFswInterfaceMessages.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simFswInterfaceMessages.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simFswInterfaceMessages.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simFswInterfaceMessages.IntVector___setitem__(self, *args)

    def pop(self):
        return _simFswInterfaceMessages.IntVector_pop(self)

    def append(self, x):
        return _simFswInterfaceMessages.IntVector_append(self, x)

    def empty(self):
        return _simFswInterfaceMessages.IntVector_empty(self)

    def size(self):
        return _simFswInterfaceMessages.IntVector_size(self)

    def swap(self, v):
        return _simFswInterfaceMessages.IntVector_swap(self, v)

    def begin(self):
        return _simFswInterfaceMessages.IntVector_begin(self)

    def end(self):
        return _simFswInterfaceMessages.IntVector_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.IntVector_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.IntVector_rend(self)

    def clear(self):
        return _simFswInterfaceMessages.IntVector_clear(self)

    def get_allocator(self):
        return _simFswInterfaceMessages.IntVector_get_allocator(self)

    def pop_back(self):
        return _simFswInterfaceMessages.IntVector_pop_back(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simFswInterfaceMessages.IntVector_push_back(self, x)

    def front(self):
        return _simFswInterfaceMessages.IntVector_front(self)

    def back(self):
        return _simFswInterfaceMessages.IntVector_back(self)

    def assign(self, n, x):
        return _simFswInterfaceMessages.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _simFswInterfaceMessages.IntVector_resize(self, *args)

    def insert(self, *args):
        return _simFswInterfaceMessages.IntVector_insert(self, *args)

    def reserve(self, n):
        return _simFswInterfaceMessages.IntVector_reserve(self, n)

    def capacity(self):
        return _simFswInterfaceMessages.IntVector_capacity(self)
    __swig_destroy__ = _simFswInterfaceMessages.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _simFswInterfaceMessages.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.DoubleVector___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _simFswInterfaceMessages.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simFswInterfaceMessages.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simFswInterfaceMessages.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simFswInterfaceMessages.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simFswInterfaceMessages.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simFswInterfaceMessages.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _simFswInterfaceMessages.DoubleVector_pop(self)

    def append(self, x):
        return _simFswInterfaceMessages.DoubleVector_append(self, x)

    def empty(self):
        return _simFswInterfaceMessages.DoubleVector_empty(self)

    def size(self):
        return _simFswInterfaceMessages.DoubleVector_size(self)

    def swap(self, v):
        return _simFswInterfaceMessages.DoubleVector_swap(self, v)

    def begin(self):
        return _simFswInterfaceMessages.DoubleVector_begin(self)

    def end(self):
        return _simFswInterfaceMessages.DoubleVector_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.DoubleVector_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.DoubleVector_rend(self)

    def clear(self):
        return _simFswInterfaceMessages.DoubleVector_clear(self)

    def get_allocator(self):
        return _simFswInterfaceMessages.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _simFswInterfaceMessages.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simFswInterfaceMessages.DoubleVector_push_back(self, x)

    def front(self):
        return _simFswInterfaceMessages.DoubleVector_front(self)

    def back(self):
        return _simFswInterfaceMessages.DoubleVector_back(self)

    def assign(self, n, x):
        return _simFswInterfaceMessages.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _simFswInterfaceMessages.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _simFswInterfaceMessages.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _simFswInterfaceMessages.DoubleVector_reserve(self, n)

    def capacity(self):
        return _simFswInterfaceMessages.DoubleVector_capacity(self)
    __swig_destroy__ = _simFswInterfaceMessages.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _simFswInterfaceMessages.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.StringVector___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.StringVector___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _simFswInterfaceMessages.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simFswInterfaceMessages.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simFswInterfaceMessages.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simFswInterfaceMessages.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simFswInterfaceMessages.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simFswInterfaceMessages.StringVector___setitem__(self, *args)

    def pop(self):
        return _simFswInterfaceMessages.StringVector_pop(self)

    def append(self, x):
        return _simFswInterfaceMessages.StringVector_append(self, x)

    def empty(self):
        return _simFswInterfaceMessages.StringVector_empty(self)

    def size(self):
        return _simFswInterfaceMessages.StringVector_size(self)

    def swap(self, v):
        return _simFswInterfaceMessages.StringVector_swap(self, v)

    def begin(self):
        return _simFswInterfaceMessages.StringVector_begin(self)

    def end(self):
        return _simFswInterfaceMessages.StringVector_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.StringVector_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.StringVector_rend(self)

    def clear(self):
        return _simFswInterfaceMessages.StringVector_clear(self)

    def get_allocator(self):
        return _simFswInterfaceMessages.StringVector_get_allocator(self)

    def pop_back(self):
        return _simFswInterfaceMessages.StringVector_pop_back(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simFswInterfaceMessages.StringVector_push_back(self, x)

    def front(self):
        return _simFswInterfaceMessages.StringVector_front(self)

    def back(self):
        return _simFswInterfaceMessages.StringVector_back(self)

    def assign(self, n, x):
        return _simFswInterfaceMessages.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _simFswInterfaceMessages.StringVector_resize(self, *args)

    def insert(self, *args):
        return _simFswInterfaceMessages.StringVector_insert(self, *args)

    def reserve(self, n):
        return _simFswInterfaceMessages.StringVector_reserve(self, n)

    def capacity(self):
        return _simFswInterfaceMessages.StringVector_capacity(self)
    __swig_destroy__ = _simFswInterfaceMessages.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _simFswInterfaceMessages.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.StringSet___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.StringSet___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.StringSet___len__(self)

    def append(self, x):
        return _simFswInterfaceMessages.StringSet_append(self, x)

    def __contains__(self, x):
        return _simFswInterfaceMessages.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _simFswInterfaceMessages.StringSet___getitem__(self, i)

    def add(self, x):
        return _simFswInterfaceMessages.StringSet_add(self, x)

    def discard(self, x):
        return _simFswInterfaceMessages.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _simFswInterfaceMessages.StringSet_empty(self)

    def size(self):
        return _simFswInterfaceMessages.StringSet_size(self)

    def clear(self):
        return _simFswInterfaceMessages.StringSet_clear(self)

    def swap(self, v):
        return _simFswInterfaceMessages.StringSet_swap(self, v)

    def count(self, x):
        return _simFswInterfaceMessages.StringSet_count(self, x)

    def begin(self):
        return _simFswInterfaceMessages.StringSet_begin(self)

    def end(self):
        return _simFswInterfaceMessages.StringSet_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.StringSet_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.StringSet_rend(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.StringSet_erase(self, *args)

    def find(self, x):
        return _simFswInterfaceMessages.StringSet_find(self, x)

    def lower_bound(self, x):
        return _simFswInterfaceMessages.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _simFswInterfaceMessages.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _simFswInterfaceMessages.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _simFswInterfaceMessages.StringSet_insert(self, __x)
    __swig_destroy__ = _simFswInterfaceMessages.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _simFswInterfaceMessages.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.intSet___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.intSet___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.intSet___len__(self)

    def append(self, x):
        return _simFswInterfaceMessages.intSet_append(self, x)

    def __contains__(self, x):
        return _simFswInterfaceMessages.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _simFswInterfaceMessages.intSet___getitem__(self, i)

    def add(self, x):
        return _simFswInterfaceMessages.intSet_add(self, x)

    def discard(self, x):
        return _simFswInterfaceMessages.intSet_discard(self, x)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _simFswInterfaceMessages.intSet_empty(self)

    def size(self):
        return _simFswInterfaceMessages.intSet_size(self)

    def clear(self):
        return _simFswInterfaceMessages.intSet_clear(self)

    def swap(self, v):
        return _simFswInterfaceMessages.intSet_swap(self, v)

    def count(self, x):
        return _simFswInterfaceMessages.intSet_count(self, x)

    def begin(self):
        return _simFswInterfaceMessages.intSet_begin(self)

    def end(self):
        return _simFswInterfaceMessages.intSet_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.intSet_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.intSet_rend(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.intSet_erase(self, *args)

    def find(self, x):
        return _simFswInterfaceMessages.intSet_find(self, x)

    def lower_bound(self, x):
        return _simFswInterfaceMessages.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _simFswInterfaceMessages.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _simFswInterfaceMessages.intSet_equal_range(self, x)

    def insert(self, __x):
        return _simFswInterfaceMessages.intSet_insert(self, __x)
    __swig_destroy__ = _simFswInterfaceMessages.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _simFswInterfaceMessages.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.ConstCharVector___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _simFswInterfaceMessages.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simFswInterfaceMessages.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simFswInterfaceMessages.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simFswInterfaceMessages.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simFswInterfaceMessages.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simFswInterfaceMessages.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _simFswInterfaceMessages.ConstCharVector_pop(self)

    def append(self, x):
        return _simFswInterfaceMessages.ConstCharVector_append(self, x)

    def empty(self):
        return _simFswInterfaceMessages.ConstCharVector_empty(self)

    def size(self):
        return _simFswInterfaceMessages.ConstCharVector_size(self)

    def swap(self, v):
        return _simFswInterfaceMessages.ConstCharVector_swap(self, v)

    def begin(self):
        return _simFswInterfaceMessages.ConstCharVector_begin(self)

    def end(self):
        return _simFswInterfaceMessages.ConstCharVector_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.ConstCharVector_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.ConstCharVector_rend(self)

    def clear(self):
        return _simFswInterfaceMessages.ConstCharVector_clear(self)

    def get_allocator(self):
        return _simFswInterfaceMessages.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _simFswInterfaceMessages.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simFswInterfaceMessages.ConstCharVector_push_back(self, x)

    def front(self):
        return _simFswInterfaceMessages.ConstCharVector_front(self)

    def back(self):
        return _simFswInterfaceMessages.ConstCharVector_back(self)

    def assign(self, n, x):
        return _simFswInterfaceMessages.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _simFswInterfaceMessages.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _simFswInterfaceMessages.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _simFswInterfaceMessages.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _simFswInterfaceMessages.ConstCharVector_capacity(self)
    __swig_destroy__ = _simFswInterfaceMessages.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _simFswInterfaceMessages.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simFswInterfaceMessages.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simFswInterfaceMessages.MultiArray___nonzero__(self)

    def __bool__(self):
        return _simFswInterfaceMessages.MultiArray___bool__(self)

    def __len__(self):
        return _simFswInterfaceMessages.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _simFswInterfaceMessages.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simFswInterfaceMessages.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simFswInterfaceMessages.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simFswInterfaceMessages.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simFswInterfaceMessages.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simFswInterfaceMessages.MultiArray___setitem__(self, *args)

    def pop(self):
        return _simFswInterfaceMessages.MultiArray_pop(self)

    def append(self, x):
        return _simFswInterfaceMessages.MultiArray_append(self, x)

    def empty(self):
        return _simFswInterfaceMessages.MultiArray_empty(self)

    def size(self):
        return _simFswInterfaceMessages.MultiArray_size(self)

    def swap(self, v):
        return _simFswInterfaceMessages.MultiArray_swap(self, v)

    def begin(self):
        return _simFswInterfaceMessages.MultiArray_begin(self)

    def end(self):
        return _simFswInterfaceMessages.MultiArray_end(self)

    def rbegin(self):
        return _simFswInterfaceMessages.MultiArray_rbegin(self)

    def rend(self):
        return _simFswInterfaceMessages.MultiArray_rend(self)

    def clear(self):
        return _simFswInterfaceMessages.MultiArray_clear(self)

    def get_allocator(self):
        return _simFswInterfaceMessages.MultiArray_get_allocator(self)

    def pop_back(self):
        return _simFswInterfaceMessages.MultiArray_pop_back(self)

    def erase(self, *args):
        return _simFswInterfaceMessages.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simFswInterfaceMessages.MultiArray_push_back(self, x)

    def front(self):
        return _simFswInterfaceMessages.MultiArray_front(self)

    def back(self):
        return _simFswInterfaceMessages.MultiArray_back(self)

    def assign(self, n, x):
        return _simFswInterfaceMessages.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _simFswInterfaceMessages.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _simFswInterfaceMessages.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _simFswInterfaceMessages.MultiArray_reserve(self, n)

    def capacity(self):
        return _simFswInterfaceMessages.MultiArray_capacity(self)
    __swig_destroy__ = _simFswInterfaceMessages.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _simFswInterfaceMessages.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class CmdForceBodyIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdForceBodyIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdForceBodyIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["forceRequestBody"] = _simFswInterfaceMessages.CmdForceBodyIntMsg_forceRequestBody_set
    __swig_getmethods__["forceRequestBody"] = _simFswInterfaceMessages.CmdForceBodyIntMsg_forceRequestBody_get
    if _newclass:
        forceRequestBody = _swig_property(_simFswInterfaceMessages.CmdForceBodyIntMsg_forceRequestBody_get, _simFswInterfaceMessages.CmdForceBodyIntMsg_forceRequestBody_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_CmdForceBodyIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_CmdForceBodyIntMsg
    __del__ = lambda self: None
CmdForceBodyIntMsg_swigregister = _simFswInterfaceMessages.CmdForceBodyIntMsg_swigregister
CmdForceBodyIntMsg_swigregister(CmdForceBodyIntMsg)

sizeof_CmdForceBodyIntMsg = _simFswInterfaceMessages.sizeof_CmdForceBodyIntMsg
class CmdForceInertialIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdForceInertialIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdForceInertialIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["forceRequestInertial"] = _simFswInterfaceMessages.CmdForceInertialIntMsg_forceRequestInertial_set
    __swig_getmethods__["forceRequestInertial"] = _simFswInterfaceMessages.CmdForceInertialIntMsg_forceRequestInertial_get
    if _newclass:
        forceRequestInertial = _swig_property(_simFswInterfaceMessages.CmdForceInertialIntMsg_forceRequestInertial_get, _simFswInterfaceMessages.CmdForceInertialIntMsg_forceRequestInertial_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_CmdForceInertialIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_CmdForceInertialIntMsg
    __del__ = lambda self: None
CmdForceInertialIntMsg_swigregister = _simFswInterfaceMessages.CmdForceInertialIntMsg_swigregister
CmdForceInertialIntMsg_swigregister(CmdForceInertialIntMsg)

sizeof_CmdForceInertialIntMsg = _simFswInterfaceMessages.sizeof_CmdForceInertialIntMsg
class CmdTorqueBodyIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdTorqueBodyIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdTorqueBodyIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["torqueRequestBody"] = _simFswInterfaceMessages.CmdTorqueBodyIntMsg_torqueRequestBody_set
    __swig_getmethods__["torqueRequestBody"] = _simFswInterfaceMessages.CmdTorqueBodyIntMsg_torqueRequestBody_get
    if _newclass:
        torqueRequestBody = _swig_property(_simFswInterfaceMessages.CmdTorqueBodyIntMsg_torqueRequestBody_get, _simFswInterfaceMessages.CmdTorqueBodyIntMsg_torqueRequestBody_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_CmdTorqueBodyIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_CmdTorqueBodyIntMsg
    __del__ = lambda self: None
CmdTorqueBodyIntMsg_swigregister = _simFswInterfaceMessages.CmdTorqueBodyIntMsg_swigregister
CmdTorqueBodyIntMsg_swigregister(CmdTorqueBodyIntMsg)

sizeof_CmdTorqueBodyIntMsg = _simFswInterfaceMessages.sizeof_CmdTorqueBodyIntMsg
class CSSArraySensorIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSArraySensorIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSArraySensorIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CosValue"] = _simFswInterfaceMessages.CSSArraySensorIntMsg_CosValue_set
    __swig_getmethods__["CosValue"] = _simFswInterfaceMessages.CSSArraySensorIntMsg_CosValue_get
    if _newclass:
        CosValue = _swig_property(_simFswInterfaceMessages.CSSArraySensorIntMsg_CosValue_get, _simFswInterfaceMessages.CSSArraySensorIntMsg_CosValue_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_CSSArraySensorIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_CSSArraySensorIntMsg
    __del__ = lambda self: None
CSSArraySensorIntMsg_swigregister = _simFswInterfaceMessages.CSSArraySensorIntMsg_swigregister
CSSArraySensorIntMsg_swigregister(CSSArraySensorIntMsg)

sizeof_CSSArraySensorIntMsg = _simFswInterfaceMessages.sizeof_CSSArraySensorIntMsg
class EphemerisIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EphemerisIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EphemerisIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BdyZero_N"] = _simFswInterfaceMessages.EphemerisIntMsg_r_BdyZero_N_set
    __swig_getmethods__["r_BdyZero_N"] = _simFswInterfaceMessages.EphemerisIntMsg_r_BdyZero_N_get
    if _newclass:
        r_BdyZero_N = _swig_property(_simFswInterfaceMessages.EphemerisIntMsg_r_BdyZero_N_get, _simFswInterfaceMessages.EphemerisIntMsg_r_BdyZero_N_set)
    __swig_setmethods__["v_BdyZero_N"] = _simFswInterfaceMessages.EphemerisIntMsg_v_BdyZero_N_set
    __swig_getmethods__["v_BdyZero_N"] = _simFswInterfaceMessages.EphemerisIntMsg_v_BdyZero_N_get
    if _newclass:
        v_BdyZero_N = _swig_property(_simFswInterfaceMessages.EphemerisIntMsg_v_BdyZero_N_get, _simFswInterfaceMessages.EphemerisIntMsg_v_BdyZero_N_set)
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.EphemerisIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.EphemerisIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.EphemerisIntMsg_timeTag_get, _simFswInterfaceMessages.EphemerisIntMsg_timeTag_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_EphemerisIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_EphemerisIntMsg
    __del__ = lambda self: None
EphemerisIntMsg_swigregister = _simFswInterfaceMessages.EphemerisIntMsg_swigregister
EphemerisIntMsg_swigregister(EphemerisIntMsg)

sizeof_EphemerisIntMsg = _simFswInterfaceMessages.sizeof_EphemerisIntMsg
class IMUSensorIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMUSensorIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMUSensorIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DVFramePlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_DVFramePlatform_set
    __swig_getmethods__["DVFramePlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_DVFramePlatform_get
    if _newclass:
        DVFramePlatform = _swig_property(_simFswInterfaceMessages.IMUSensorIntMsg_DVFramePlatform_get, _simFswInterfaceMessages.IMUSensorIntMsg_DVFramePlatform_set)
    __swig_setmethods__["AccelPlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_AccelPlatform_set
    __swig_getmethods__["AccelPlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_AccelPlatform_get
    if _newclass:
        AccelPlatform = _swig_property(_simFswInterfaceMessages.IMUSensorIntMsg_AccelPlatform_get, _simFswInterfaceMessages.IMUSensorIntMsg_AccelPlatform_set)
    __swig_setmethods__["DRFramePlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_DRFramePlatform_set
    __swig_getmethods__["DRFramePlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_DRFramePlatform_get
    if _newclass:
        DRFramePlatform = _swig_property(_simFswInterfaceMessages.IMUSensorIntMsg_DRFramePlatform_get, _simFswInterfaceMessages.IMUSensorIntMsg_DRFramePlatform_set)
    __swig_setmethods__["AngVelPlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_AngVelPlatform_set
    __swig_getmethods__["AngVelPlatform"] = _simFswInterfaceMessages.IMUSensorIntMsg_AngVelPlatform_get
    if _newclass:
        AngVelPlatform = _swig_property(_simFswInterfaceMessages.IMUSensorIntMsg_AngVelPlatform_get, _simFswInterfaceMessages.IMUSensorIntMsg_AngVelPlatform_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_IMUSensorIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_IMUSensorIntMsg
    __del__ = lambda self: None
IMUSensorIntMsg_swigregister = _simFswInterfaceMessages.IMUSensorIntMsg_swigregister
IMUSensorIntMsg_swigregister(IMUSensorIntMsg)

sizeof_IMUSensorIntMsg = _simFswInterfaceMessages.sizeof_IMUSensorIntMsg
class NavAttIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavAttIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavAttIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.NavAttIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.NavAttIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.NavAttIntMsg_timeTag_get, _simFswInterfaceMessages.NavAttIntMsg_timeTag_set)
    __swig_setmethods__["sigma_BN"] = _simFswInterfaceMessages.NavAttIntMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _simFswInterfaceMessages.NavAttIntMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_simFswInterfaceMessages.NavAttIntMsg_sigma_BN_get, _simFswInterfaceMessages.NavAttIntMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _simFswInterfaceMessages.NavAttIntMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _simFswInterfaceMessages.NavAttIntMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_simFswInterfaceMessages.NavAttIntMsg_omega_BN_B_get, _simFswInterfaceMessages.NavAttIntMsg_omega_BN_B_set)
    __swig_setmethods__["vehSunPntBdy"] = _simFswInterfaceMessages.NavAttIntMsg_vehSunPntBdy_set
    __swig_getmethods__["vehSunPntBdy"] = _simFswInterfaceMessages.NavAttIntMsg_vehSunPntBdy_get
    if _newclass:
        vehSunPntBdy = _swig_property(_simFswInterfaceMessages.NavAttIntMsg_vehSunPntBdy_get, _simFswInterfaceMessages.NavAttIntMsg_vehSunPntBdy_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_NavAttIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_NavAttIntMsg
    __del__ = lambda self: None
NavAttIntMsg_swigregister = _simFswInterfaceMessages.NavAttIntMsg_swigregister
NavAttIntMsg_swigregister(NavAttIntMsg)

sizeof_NavAttIntMsg = _simFswInterfaceMessages.sizeof_NavAttIntMsg
class NavTransIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavTransIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavTransIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.NavTransIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.NavTransIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.NavTransIntMsg_timeTag_get, _simFswInterfaceMessages.NavTransIntMsg_timeTag_set)
    __swig_setmethods__["r_BN_N"] = _simFswInterfaceMessages.NavTransIntMsg_r_BN_N_set
    __swig_getmethods__["r_BN_N"] = _simFswInterfaceMessages.NavTransIntMsg_r_BN_N_get
    if _newclass:
        r_BN_N = _swig_property(_simFswInterfaceMessages.NavTransIntMsg_r_BN_N_get, _simFswInterfaceMessages.NavTransIntMsg_r_BN_N_set)
    __swig_setmethods__["v_BN_N"] = _simFswInterfaceMessages.NavTransIntMsg_v_BN_N_set
    __swig_getmethods__["v_BN_N"] = _simFswInterfaceMessages.NavTransIntMsg_v_BN_N_get
    if _newclass:
        v_BN_N = _swig_property(_simFswInterfaceMessages.NavTransIntMsg_v_BN_N_get, _simFswInterfaceMessages.NavTransIntMsg_v_BN_N_set)
    __swig_setmethods__["vehAccumDV"] = _simFswInterfaceMessages.NavTransIntMsg_vehAccumDV_set
    __swig_getmethods__["vehAccumDV"] = _simFswInterfaceMessages.NavTransIntMsg_vehAccumDV_get
    if _newclass:
        vehAccumDV = _swig_property(_simFswInterfaceMessages.NavTransIntMsg_vehAccumDV_get, _simFswInterfaceMessages.NavTransIntMsg_vehAccumDV_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_NavTransIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_NavTransIntMsg
    __del__ = lambda self: None
NavTransIntMsg_swigregister = _simFswInterfaceMessages.NavTransIntMsg_swigregister
NavTransIntMsg_swigregister(NavTransIntMsg)

sizeof_NavTransIntMsg = _simFswInterfaceMessages.sizeof_NavTransIntMsg
class RWArrayTorqueIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayTorqueIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayTorqueIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["motorTorque"] = _simFswInterfaceMessages.RWArrayTorqueIntMsg_motorTorque_set
    __swig_getmethods__["motorTorque"] = _simFswInterfaceMessages.RWArrayTorqueIntMsg_motorTorque_get
    if _newclass:
        motorTorque = _swig_property(_simFswInterfaceMessages.RWArrayTorqueIntMsg_motorTorque_get, _simFswInterfaceMessages.RWArrayTorqueIntMsg_motorTorque_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_RWArrayTorqueIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_RWArrayTorqueIntMsg
    __del__ = lambda self: None
RWArrayTorqueIntMsg_swigregister = _simFswInterfaceMessages.RWArrayTorqueIntMsg_swigregister
RWArrayTorqueIntMsg_swigregister(RWArrayTorqueIntMsg)

sizeof_RWArrayTorqueIntMsg = _simFswInterfaceMessages.sizeof_RWArrayTorqueIntMsg
class RWArrayVoltageIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayVoltageIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayVoltageIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["voltage"] = _simFswInterfaceMessages.RWArrayVoltageIntMsg_voltage_set
    __swig_getmethods__["voltage"] = _simFswInterfaceMessages.RWArrayVoltageIntMsg_voltage_get
    if _newclass:
        voltage = _swig_property(_simFswInterfaceMessages.RWArrayVoltageIntMsg_voltage_get, _simFswInterfaceMessages.RWArrayVoltageIntMsg_voltage_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_RWArrayVoltageIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_RWArrayVoltageIntMsg
    __del__ = lambda self: None
RWArrayVoltageIntMsg_swigregister = _simFswInterfaceMessages.RWArrayVoltageIntMsg_swigregister
RWArrayVoltageIntMsg_swigregister(RWArrayVoltageIntMsg)

sizeof_RWArrayVoltageIntMsg = _simFswInterfaceMessages.sizeof_RWArrayVoltageIntMsg
class RWSpeedIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWSpeedIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWSpeedIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelSpeeds"] = _simFswInterfaceMessages.RWSpeedIntMsg_wheelSpeeds_set
    __swig_getmethods__["wheelSpeeds"] = _simFswInterfaceMessages.RWSpeedIntMsg_wheelSpeeds_get
    if _newclass:
        wheelSpeeds = _swig_property(_simFswInterfaceMessages.RWSpeedIntMsg_wheelSpeeds_get, _simFswInterfaceMessages.RWSpeedIntMsg_wheelSpeeds_set)
    __swig_setmethods__["wheelThetas"] = _simFswInterfaceMessages.RWSpeedIntMsg_wheelThetas_set
    __swig_getmethods__["wheelThetas"] = _simFswInterfaceMessages.RWSpeedIntMsg_wheelThetas_get
    if _newclass:
        wheelThetas = _swig_property(_simFswInterfaceMessages.RWSpeedIntMsg_wheelThetas_get, _simFswInterfaceMessages.RWSpeedIntMsg_wheelThetas_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_RWSpeedIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_RWSpeedIntMsg
    __del__ = lambda self: None
RWSpeedIntMsg_swigregister = _simFswInterfaceMessages.RWSpeedIntMsg_swigregister
RWSpeedIntMsg_swigregister(RWSpeedIntMsg)

sizeof_RWSpeedIntMsg = _simFswInterfaceMessages.sizeof_RWSpeedIntMsg
class STSensorIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STSensorIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STSensorIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.STSensorIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.STSensorIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.STSensorIntMsg_timeTag_get, _simFswInterfaceMessages.STSensorIntMsg_timeTag_set)
    __swig_setmethods__["qInrtl2Case"] = _simFswInterfaceMessages.STSensorIntMsg_qInrtl2Case_set
    __swig_getmethods__["qInrtl2Case"] = _simFswInterfaceMessages.STSensorIntMsg_qInrtl2Case_get
    if _newclass:
        qInrtl2Case = _swig_property(_simFswInterfaceMessages.STSensorIntMsg_qInrtl2Case_get, _simFswInterfaceMessages.STSensorIntMsg_qInrtl2Case_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_STSensorIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_STSensorIntMsg
    __del__ = lambda self: None
STSensorIntMsg_swigregister = _simFswInterfaceMessages.STSensorIntMsg_swigregister
STSensorIntMsg_swigregister(STSensorIntMsg)

sizeof_STSensorIntMsg = _simFswInterfaceMessages.sizeof_STSensorIntMsg
class THRArrayOnTimeCmdIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayOnTimeCmdIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayOnTimeCmdIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OnTimeRequest"] = _simFswInterfaceMessages.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set
    __swig_getmethods__["OnTimeRequest"] = _simFswInterfaceMessages.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get
    if _newclass:
        OnTimeRequest = _swig_property(_simFswInterfaceMessages.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get, _simFswInterfaceMessages.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_THRArrayOnTimeCmdIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_THRArrayOnTimeCmdIntMsg
    __del__ = lambda self: None
THRArrayOnTimeCmdIntMsg_swigregister = _simFswInterfaceMessages.THRArrayOnTimeCmdIntMsg_swigregister
THRArrayOnTimeCmdIntMsg_swigregister(THRArrayOnTimeCmdIntMsg)

sizeof_THRArrayOnTimeCmdIntMsg = _simFswInterfaceMessages.sizeof_THRArrayOnTimeCmdIntMsg
class MagMeterIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagMeterIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MagMeterIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.MagMeterIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.MagMeterIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.MagMeterIntMsg_timeTag_get, _simFswInterfaceMessages.MagMeterIntMsg_timeTag_set)
    __swig_setmethods__["mag_bf"] = _simFswInterfaceMessages.MagMeterIntMsg_mag_bf_set
    __swig_getmethods__["mag_bf"] = _simFswInterfaceMessages.MagMeterIntMsg_mag_bf_get
    if _newclass:
        mag_bf = _swig_property(_simFswInterfaceMessages.MagMeterIntMsg_mag_bf_get, _simFswInterfaceMessages.MagMeterIntMsg_mag_bf_set)
    __swig_setmethods__["mag_hill"] = _simFswInterfaceMessages.MagMeterIntMsg_mag_hill_set
    __swig_getmethods__["mag_hill"] = _simFswInterfaceMessages.MagMeterIntMsg_mag_hill_get
    if _newclass:
        mag_hill = _swig_property(_simFswInterfaceMessages.MagMeterIntMsg_mag_hill_get, _simFswInterfaceMessages.MagMeterIntMsg_mag_hill_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_MagMeterIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_MagMeterIntMsg
    __del__ = lambda self: None
MagMeterIntMsg_swigregister = _simFswInterfaceMessages.MagMeterIntMsg_swigregister
MagMeterIntMsg_swigregister(MagMeterIntMsg)

sizeof_MagMeterIntMsg = _simFswInterfaceMessages.sizeof_MagMeterIntMsg
class CmdTorqueRodsIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmdTorqueRodsIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CmdTorqueRodsIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dipole_moment"] = _simFswInterfaceMessages.CmdTorqueRodsIntMsg_dipole_moment_set
    __swig_getmethods__["dipole_moment"] = _simFswInterfaceMessages.CmdTorqueRodsIntMsg_dipole_moment_get
    if _newclass:
        dipole_moment = _swig_property(_simFswInterfaceMessages.CmdTorqueRodsIntMsg_dipole_moment_get, _simFswInterfaceMessages.CmdTorqueRodsIntMsg_dipole_moment_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_CmdTorqueRodsIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_CmdTorqueRodsIntMsg
    __del__ = lambda self: None
CmdTorqueRodsIntMsg_swigregister = _simFswInterfaceMessages.CmdTorqueRodsIntMsg_swigregister
CmdTorqueRodsIntMsg_swigregister(CmdTorqueRodsIntMsg)

sizeof_CmdTorqueRodsIntMsg = _simFswInterfaceMessages.sizeof_CmdTorqueRodsIntMsg
class torqueRodOutputIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, torqueRodOutputIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, torqueRodOutputIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeTag"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_timeTag_set
    __swig_getmethods__["timeTag"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_timeTag_get
    if _newclass:
        timeTag = _swig_property(_simFswInterfaceMessages.torqueRodOutputIntMsg_timeTag_get, _simFswInterfaceMessages.torqueRodOutputIntMsg_timeTag_set)
    __swig_setmethods__["torque_constrained"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_torque_constrained_set
    __swig_getmethods__["torque_constrained"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_torque_constrained_get
    if _newclass:
        torque_constrained = _swig_property(_simFswInterfaceMessages.torqueRodOutputIntMsg_torque_constrained_get, _simFswInterfaceMessages.torqueRodOutputIntMsg_torque_constrained_set)
    __swig_setmethods__["dipole_constrained"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_dipole_constrained_set
    __swig_getmethods__["dipole_constrained"] = _simFswInterfaceMessages.torqueRodOutputIntMsg_dipole_constrained_get
    if _newclass:
        dipole_constrained = _swig_property(_simFswInterfaceMessages.torqueRodOutputIntMsg_dipole_constrained_get, _simFswInterfaceMessages.torqueRodOutputIntMsg_dipole_constrained_set)

    def __init__(self, *args):
        this = _simFswInterfaceMessages.new_torqueRodOutputIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simFswInterfaceMessages.delete_torqueRodOutputIntMsg
    __del__ = lambda self: None
torqueRodOutputIntMsg_swigregister = _simFswInterfaceMessages.torqueRodOutputIntMsg_swigregister
torqueRodOutputIntMsg_swigregister(torqueRodOutputIntMsg)

sizeof_torqueRodOutputIntMsg = _simFswInterfaceMessages.sizeof_torqueRodOutputIntMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


