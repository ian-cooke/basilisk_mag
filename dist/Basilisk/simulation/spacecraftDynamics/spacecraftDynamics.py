# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spacecraftDynamics')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spacecraftDynamics')
    _spacecraftDynamics = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spacecraftDynamics', [dirname(__file__)])
        except ImportError:
            import _spacecraftDynamics
            return _spacecraftDynamics
        try:
            _mod = imp.load_module('_spacecraftDynamics', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spacecraftDynamics = swig_import_helper()
    del swig_import_helper
else:
    import _spacecraftDynamics
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spacecraftDynamics.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _spacecraftDynamics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _spacecraftDynamics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _spacecraftDynamics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _spacecraftDynamics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _spacecraftDynamics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _spacecraftDynamics.SwigPyIterator_copy(self)

    def next(self):
        return _spacecraftDynamics.SwigPyIterator_next(self)

    def __next__(self):
        return _spacecraftDynamics.SwigPyIterator___next__(self)

    def previous(self):
        return _spacecraftDynamics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _spacecraftDynamics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _spacecraftDynamics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _spacecraftDynamics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _spacecraftDynamics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _spacecraftDynamics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _spacecraftDynamics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _spacecraftDynamics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _spacecraftDynamics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _spacecraftDynamics.new_doubleArray(nelements)
new_doubleArray = _spacecraftDynamics.new_doubleArray

def delete_doubleArray(ary):
    return _spacecraftDynamics.delete_doubleArray(ary)
delete_doubleArray = _spacecraftDynamics.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _spacecraftDynamics.doubleArray_getitem(ary, index)
doubleArray_getitem = _spacecraftDynamics.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _spacecraftDynamics.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _spacecraftDynamics.doubleArray_setitem

def new_longArray(nelements):
    return _spacecraftDynamics.new_longArray(nelements)
new_longArray = _spacecraftDynamics.new_longArray

def delete_longArray(ary):
    return _spacecraftDynamics.delete_longArray(ary)
delete_longArray = _spacecraftDynamics.delete_longArray

def longArray_getitem(ary, index):
    return _spacecraftDynamics.longArray_getitem(ary, index)
longArray_getitem = _spacecraftDynamics.longArray_getitem

def longArray_setitem(ary, index, value):
    return _spacecraftDynamics.longArray_setitem(ary, index, value)
longArray_setitem = _spacecraftDynamics.longArray_setitem

def new_intArray(nelements):
    return _spacecraftDynamics.new_intArray(nelements)
new_intArray = _spacecraftDynamics.new_intArray

def delete_intArray(ary):
    return _spacecraftDynamics.delete_intArray(ary)
delete_intArray = _spacecraftDynamics.delete_intArray

def intArray_getitem(ary, index):
    return _spacecraftDynamics.intArray_getitem(ary, index)
intArray_getitem = _spacecraftDynamics.intArray_getitem

def intArray_setitem(ary, index, value):
    return _spacecraftDynamics.intArray_setitem(ary, index, value)
intArray_setitem = _spacecraftDynamics.intArray_setitem

def new_shortArray(nelements):
    return _spacecraftDynamics.new_shortArray(nelements)
new_shortArray = _spacecraftDynamics.new_shortArray

def delete_shortArray(ary):
    return _spacecraftDynamics.delete_shortArray(ary)
delete_shortArray = _spacecraftDynamics.delete_shortArray

def shortArray_getitem(ary, index):
    return _spacecraftDynamics.shortArray_getitem(ary, index)
shortArray_getitem = _spacecraftDynamics.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _spacecraftDynamics.shortArray_setitem(ary, index, value)
shortArray_setitem = _spacecraftDynamics.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _spacecraftDynamics.new_boolArray(nelements)
new_boolArray = _spacecraftDynamics.new_boolArray

def delete_boolArray(ary):
    return _spacecraftDynamics.delete_boolArray(ary)
delete_boolArray = _spacecraftDynamics.delete_boolArray

def boolArray_getitem(ary, index):
    return _spacecraftDynamics.boolArray_getitem(ary, index)
boolArray_getitem = _spacecraftDynamics.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _spacecraftDynamics.boolArray_setitem(ary, index, value)
boolArray_setitem = _spacecraftDynamics.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.IntVector___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.IntVector___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.IntVector___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.IntVector_pop(self)

    def append(self, x):
        return _spacecraftDynamics.IntVector_append(self, x)

    def empty(self):
        return _spacecraftDynamics.IntVector_empty(self)

    def size(self):
        return _spacecraftDynamics.IntVector_size(self)

    def swap(self, v):
        return _spacecraftDynamics.IntVector_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.IntVector_begin(self)

    def end(self):
        return _spacecraftDynamics.IntVector_end(self)

    def rbegin(self):
        return _spacecraftDynamics.IntVector_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.IntVector_rend(self)

    def clear(self):
        return _spacecraftDynamics.IntVector_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.IntVector_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.IntVector_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.IntVector_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.IntVector_front(self)

    def back(self):
        return _spacecraftDynamics.IntVector_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.IntVector_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.IntVector_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.IntVector_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.IntVector_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _spacecraftDynamics.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.DoubleVector___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.DoubleVector_pop(self)

    def append(self, x):
        return _spacecraftDynamics.DoubleVector_append(self, x)

    def empty(self):
        return _spacecraftDynamics.DoubleVector_empty(self)

    def size(self):
        return _spacecraftDynamics.DoubleVector_size(self)

    def swap(self, v):
        return _spacecraftDynamics.DoubleVector_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.DoubleVector_begin(self)

    def end(self):
        return _spacecraftDynamics.DoubleVector_end(self)

    def rbegin(self):
        return _spacecraftDynamics.DoubleVector_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.DoubleVector_rend(self)

    def clear(self):
        return _spacecraftDynamics.DoubleVector_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.DoubleVector_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.DoubleVector_front(self)

    def back(self):
        return _spacecraftDynamics.DoubleVector_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.DoubleVector_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.DoubleVector_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _spacecraftDynamics.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.StringVector___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.StringVector___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.StringVector___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.StringVector_pop(self)

    def append(self, x):
        return _spacecraftDynamics.StringVector_append(self, x)

    def empty(self):
        return _spacecraftDynamics.StringVector_empty(self)

    def size(self):
        return _spacecraftDynamics.StringVector_size(self)

    def swap(self, v):
        return _spacecraftDynamics.StringVector_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.StringVector_begin(self)

    def end(self):
        return _spacecraftDynamics.StringVector_end(self)

    def rbegin(self):
        return _spacecraftDynamics.StringVector_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.StringVector_rend(self)

    def clear(self):
        return _spacecraftDynamics.StringVector_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.StringVector_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.StringVector_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.StringVector_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.StringVector_front(self)

    def back(self):
        return _spacecraftDynamics.StringVector_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.StringVector_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.StringVector_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.StringVector_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.StringVector_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _spacecraftDynamics.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.StringSet___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.StringSet___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.StringSet___len__(self)

    def append(self, x):
        return _spacecraftDynamics.StringSet_append(self, x)

    def __contains__(self, x):
        return _spacecraftDynamics.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _spacecraftDynamics.StringSet___getitem__(self, i)

    def add(self, x):
        return _spacecraftDynamics.StringSet_add(self, x)

    def discard(self, x):
        return _spacecraftDynamics.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _spacecraftDynamics.StringSet_empty(self)

    def size(self):
        return _spacecraftDynamics.StringSet_size(self)

    def clear(self):
        return _spacecraftDynamics.StringSet_clear(self)

    def swap(self, v):
        return _spacecraftDynamics.StringSet_swap(self, v)

    def count(self, x):
        return _spacecraftDynamics.StringSet_count(self, x)

    def begin(self):
        return _spacecraftDynamics.StringSet_begin(self)

    def end(self):
        return _spacecraftDynamics.StringSet_end(self)

    def rbegin(self):
        return _spacecraftDynamics.StringSet_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.StringSet_rend(self)

    def erase(self, *args):
        return _spacecraftDynamics.StringSet_erase(self, *args)

    def find(self, x):
        return _spacecraftDynamics.StringSet_find(self, x)

    def lower_bound(self, x):
        return _spacecraftDynamics.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _spacecraftDynamics.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _spacecraftDynamics.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _spacecraftDynamics.StringSet_insert(self, __x)
    __swig_destroy__ = _spacecraftDynamics.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _spacecraftDynamics.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.intSet___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.intSet___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.intSet___len__(self)

    def append(self, x):
        return _spacecraftDynamics.intSet_append(self, x)

    def __contains__(self, x):
        return _spacecraftDynamics.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _spacecraftDynamics.intSet___getitem__(self, i)

    def add(self, x):
        return _spacecraftDynamics.intSet_add(self, x)

    def discard(self, x):
        return _spacecraftDynamics.intSet_discard(self, x)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _spacecraftDynamics.intSet_empty(self)

    def size(self):
        return _spacecraftDynamics.intSet_size(self)

    def clear(self):
        return _spacecraftDynamics.intSet_clear(self)

    def swap(self, v):
        return _spacecraftDynamics.intSet_swap(self, v)

    def count(self, x):
        return _spacecraftDynamics.intSet_count(self, x)

    def begin(self):
        return _spacecraftDynamics.intSet_begin(self)

    def end(self):
        return _spacecraftDynamics.intSet_end(self)

    def rbegin(self):
        return _spacecraftDynamics.intSet_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.intSet_rend(self)

    def erase(self, *args):
        return _spacecraftDynamics.intSet_erase(self, *args)

    def find(self, x):
        return _spacecraftDynamics.intSet_find(self, x)

    def lower_bound(self, x):
        return _spacecraftDynamics.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _spacecraftDynamics.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _spacecraftDynamics.intSet_equal_range(self, x)

    def insert(self, __x):
        return _spacecraftDynamics.intSet_insert(self, __x)
    __swig_destroy__ = _spacecraftDynamics.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _spacecraftDynamics.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.ConstCharVector___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.ConstCharVector_pop(self)

    def append(self, x):
        return _spacecraftDynamics.ConstCharVector_append(self, x)

    def empty(self):
        return _spacecraftDynamics.ConstCharVector_empty(self)

    def size(self):
        return _spacecraftDynamics.ConstCharVector_size(self)

    def swap(self, v):
        return _spacecraftDynamics.ConstCharVector_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.ConstCharVector_begin(self)

    def end(self):
        return _spacecraftDynamics.ConstCharVector_end(self)

    def rbegin(self):
        return _spacecraftDynamics.ConstCharVector_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.ConstCharVector_rend(self)

    def clear(self):
        return _spacecraftDynamics.ConstCharVector_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.ConstCharVector_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.ConstCharVector_front(self)

    def back(self):
        return _spacecraftDynamics.ConstCharVector_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.ConstCharVector_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _spacecraftDynamics.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.MultiArray___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.MultiArray___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.MultiArray___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.MultiArray_pop(self)

    def append(self, x):
        return _spacecraftDynamics.MultiArray_append(self, x)

    def empty(self):
        return _spacecraftDynamics.MultiArray_empty(self)

    def size(self):
        return _spacecraftDynamics.MultiArray_size(self)

    def swap(self, v):
        return _spacecraftDynamics.MultiArray_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.MultiArray_begin(self)

    def end(self):
        return _spacecraftDynamics.MultiArray_end(self)

    def rbegin(self):
        return _spacecraftDynamics.MultiArray_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.MultiArray_rend(self)

    def clear(self):
        return _spacecraftDynamics.MultiArray_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.MultiArray_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.MultiArray_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.MultiArray_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.MultiArray_front(self)

    def back(self):
        return _spacecraftDynamics.MultiArray_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.MultiArray_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.MultiArray_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _spacecraftDynamics.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class GravBodyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravBodyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GravBodyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _spacecraftDynamics.GravBodyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _spacecraftDynamics.GravBodyVector___nonzero__(self)

    def __bool__(self):
        return _spacecraftDynamics.GravBodyVector___bool__(self)

    def __len__(self):
        return _spacecraftDynamics.GravBodyVector___len__(self)

    def __getslice__(self, i, j):
        return _spacecraftDynamics.GravBodyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _spacecraftDynamics.GravBodyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _spacecraftDynamics.GravBodyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _spacecraftDynamics.GravBodyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _spacecraftDynamics.GravBodyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _spacecraftDynamics.GravBodyVector___setitem__(self, *args)

    def pop(self):
        return _spacecraftDynamics.GravBodyVector_pop(self)

    def append(self, x):
        return _spacecraftDynamics.GravBodyVector_append(self, x)

    def empty(self):
        return _spacecraftDynamics.GravBodyVector_empty(self)

    def size(self):
        return _spacecraftDynamics.GravBodyVector_size(self)

    def swap(self, v):
        return _spacecraftDynamics.GravBodyVector_swap(self, v)

    def begin(self):
        return _spacecraftDynamics.GravBodyVector_begin(self)

    def end(self):
        return _spacecraftDynamics.GravBodyVector_end(self)

    def rbegin(self):
        return _spacecraftDynamics.GravBodyVector_rbegin(self)

    def rend(self):
        return _spacecraftDynamics.GravBodyVector_rend(self)

    def clear(self):
        return _spacecraftDynamics.GravBodyVector_clear(self)

    def get_allocator(self):
        return _spacecraftDynamics.GravBodyVector_get_allocator(self)

    def pop_back(self):
        return _spacecraftDynamics.GravBodyVector_pop_back(self)

    def erase(self, *args):
        return _spacecraftDynamics.GravBodyVector_erase(self, *args)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_GravBodyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _spacecraftDynamics.GravBodyVector_push_back(self, x)

    def front(self):
        return _spacecraftDynamics.GravBodyVector_front(self)

    def back(self):
        return _spacecraftDynamics.GravBodyVector_back(self)

    def assign(self, n, x):
        return _spacecraftDynamics.GravBodyVector_assign(self, n, x)

    def resize(self, *args):
        return _spacecraftDynamics.GravBodyVector_resize(self, *args)

    def insert(self, *args):
        return _spacecraftDynamics.GravBodyVector_insert(self, *args)

    def reserve(self, n):
        return _spacecraftDynamics.GravBodyVector_reserve(self, n)

    def capacity(self):
        return _spacecraftDynamics.GravBodyVector_capacity(self)
    __swig_destroy__ = _spacecraftDynamics.delete_GravBodyVector
    __del__ = lambda self: None
GravBodyVector_swigregister = _spacecraftDynamics.GravBodyVector_swigregister
GravBodyVector_swigregister(GravBodyVector)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _spacecraftDynamics.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _spacecraftDynamics.SysModel_SelfInit(self)

    def CrossInit(self):
        return _spacecraftDynamics.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _spacecraftDynamics.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _spacecraftDynamics.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _spacecraftDynamics.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _spacecraftDynamics.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _spacecraftDynamics.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_spacecraftDynamics.SysModel_ModelTag_get, _spacecraftDynamics.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _spacecraftDynamics.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _spacecraftDynamics.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_spacecraftDynamics.SysModel_CallCounts_get, _spacecraftDynamics.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _spacecraftDynamics.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _spacecraftDynamics.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_spacecraftDynamics.SysModel_RNGSeed_get, _spacecraftDynamics.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _spacecraftDynamics.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _spacecraftDynamics.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_spacecraftDynamics.SysModel_moduleID_get, _spacecraftDynamics.SysModel_moduleID_set)
SysModel_swigregister = _spacecraftDynamics.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _spacecraftDynamics.StateData_state_set
    __swig_getmethods__["state"] = _spacecraftDynamics.StateData_state_get
    if _newclass:
        state = _swig_property(_spacecraftDynamics.StateData_state_get, _spacecraftDynamics.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _spacecraftDynamics.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _spacecraftDynamics.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_spacecraftDynamics.StateData_stateDeriv_get, _spacecraftDynamics.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _spacecraftDynamics.StateData_stateName_set
    __swig_getmethods__["stateName"] = _spacecraftDynamics.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_spacecraftDynamics.StateData_stateName_get, _spacecraftDynamics.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _spacecraftDynamics.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _spacecraftDynamics.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_spacecraftDynamics.StateData_stateEnabled_get, _spacecraftDynamics.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _spacecraftDynamics.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _spacecraftDynamics.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _spacecraftDynamics.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _spacecraftDynamics.StateData_getState(self)

    def getStateDeriv(self):
        return _spacecraftDynamics.StateData_getStateDeriv(self)

    def getName(self):
        return _spacecraftDynamics.StateData_getName(self)

    def getRowSize(self):
        return _spacecraftDynamics.StateData_getRowSize(self)

    def getColumnSize(self):
        return _spacecraftDynamics.StateData_getColumnSize(self)

    def isStateActive(self):
        return _spacecraftDynamics.StateData_isStateActive(self)

    def disable(self):
        return _spacecraftDynamics.StateData_disable(self)

    def enable(self):
        return _spacecraftDynamics.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _spacecraftDynamics.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _spacecraftDynamics.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _spacecraftDynamics.StateData___mul__(self, scaleFactor)
StateData_swigregister = _spacecraftDynamics.StateData_swigregister
StateData_swigregister(StateData)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _spacecraftDynamics.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _spacecraftDynamics.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_spacecraftDynamics.StateVector_stateMap_get, _spacecraftDynamics.StateVector_stateMap_set)

    def __add__(self, operand):
        return _spacecraftDynamics.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _spacecraftDynamics.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _spacecraftDynamics.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _spacecraftDynamics.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _spacecraftDynamics.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_spacecraftDynamics.DynParamManager_dynProperties_get, _spacecraftDynamics.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _spacecraftDynamics.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _spacecraftDynamics.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_spacecraftDynamics.DynParamManager_stateContainer_get, _spacecraftDynamics.DynParamManager_stateContainer_set)
    __swig_destroy__ = _spacecraftDynamics.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _spacecraftDynamics.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _spacecraftDynamics.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _spacecraftDynamics.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _spacecraftDynamics.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _spacecraftDynamics.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _spacecraftDynamics.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _spacecraftDynamics.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _spacecraftDynamics.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _spacecraftDynamics.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class DynamicObject(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["dynManager"] = _spacecraftDynamics.DynamicObject_dynManager_set
    __swig_getmethods__["dynManager"] = _spacecraftDynamics.DynamicObject_dynManager_get
    if _newclass:
        dynManager = _swig_property(_spacecraftDynamics.DynamicObject_dynManager_get, _spacecraftDynamics.DynamicObject_dynManager_set)
    __swig_setmethods__["integrator"] = _spacecraftDynamics.DynamicObject_integrator_set
    __swig_getmethods__["integrator"] = _spacecraftDynamics.DynamicObject_integrator_get
    if _newclass:
        integrator = _swig_property(_spacecraftDynamics.DynamicObject_integrator_get, _spacecraftDynamics.DynamicObject_integrator_set)
    __swig_destroy__ = _spacecraftDynamics.delete_DynamicObject
    __del__ = lambda self: None

    def initializeDynamics(self):
        return _spacecraftDynamics.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _spacecraftDynamics.DynamicObject_computeEnergyMomentum(self, t)

    def UpdateState(self, callTime):
        return _spacecraftDynamics.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t):
        return _spacecraftDynamics.DynamicObject_equationsOfMotion(self, t)

    def integrateState(self, t):
        return _spacecraftDynamics.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _spacecraftDynamics.DynamicObject_setIntegrator(self, newIntegrator)
DynamicObject_swigregister = _spacecraftDynamics.DynamicObject_swigregister
DynamicObject_swigregister(DynamicObject)

class SphericalHarmonics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalHarmonics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalHarmonics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxDeg"] = _spacecraftDynamics.SphericalHarmonics_maxDeg_set
    __swig_getmethods__["maxDeg"] = _spacecraftDynamics.SphericalHarmonics_maxDeg_get
    if _newclass:
        maxDeg = _swig_property(_spacecraftDynamics.SphericalHarmonics_maxDeg_get, _spacecraftDynamics.SphericalHarmonics_maxDeg_set)
    __swig_setmethods__["radEquator"] = _spacecraftDynamics.SphericalHarmonics_radEquator_set
    __swig_getmethods__["radEquator"] = _spacecraftDynamics.SphericalHarmonics_radEquator_get
    if _newclass:
        radEquator = _swig_property(_spacecraftDynamics.SphericalHarmonics_radEquator_get, _spacecraftDynamics.SphericalHarmonics_radEquator_set)
    __swig_setmethods__["muBody"] = _spacecraftDynamics.SphericalHarmonics_muBody_set
    __swig_getmethods__["muBody"] = _spacecraftDynamics.SphericalHarmonics_muBody_get
    if _newclass:
        muBody = _swig_property(_spacecraftDynamics.SphericalHarmonics_muBody_get, _spacecraftDynamics.SphericalHarmonics_muBody_set)
    __swig_setmethods__["cBar"] = _spacecraftDynamics.SphericalHarmonics_cBar_set
    __swig_getmethods__["cBar"] = _spacecraftDynamics.SphericalHarmonics_cBar_get
    if _newclass:
        cBar = _swig_property(_spacecraftDynamics.SphericalHarmonics_cBar_get, _spacecraftDynamics.SphericalHarmonics_cBar_set)
    __swig_setmethods__["sBar"] = _spacecraftDynamics.SphericalHarmonics_sBar_set
    __swig_getmethods__["sBar"] = _spacecraftDynamics.SphericalHarmonics_sBar_get
    if _newclass:
        sBar = _swig_property(_spacecraftDynamics.SphericalHarmonics_sBar_get, _spacecraftDynamics.SphericalHarmonics_sBar_set)
    __swig_setmethods__["aBar"] = _spacecraftDynamics.SphericalHarmonics_aBar_set
    __swig_getmethods__["aBar"] = _spacecraftDynamics.SphericalHarmonics_aBar_get
    if _newclass:
        aBar = _swig_property(_spacecraftDynamics.SphericalHarmonics_aBar_get, _spacecraftDynamics.SphericalHarmonics_aBar_set)
    __swig_setmethods__["n1"] = _spacecraftDynamics.SphericalHarmonics_n1_set
    __swig_getmethods__["n1"] = _spacecraftDynamics.SphericalHarmonics_n1_get
    if _newclass:
        n1 = _swig_property(_spacecraftDynamics.SphericalHarmonics_n1_get, _spacecraftDynamics.SphericalHarmonics_n1_set)
    __swig_setmethods__["n2"] = _spacecraftDynamics.SphericalHarmonics_n2_set
    __swig_getmethods__["n2"] = _spacecraftDynamics.SphericalHarmonics_n2_get
    if _newclass:
        n2 = _swig_property(_spacecraftDynamics.SphericalHarmonics_n2_get, _spacecraftDynamics.SphericalHarmonics_n2_set)
    __swig_setmethods__["nQuot1"] = _spacecraftDynamics.SphericalHarmonics_nQuot1_set
    __swig_getmethods__["nQuot1"] = _spacecraftDynamics.SphericalHarmonics_nQuot1_get
    if _newclass:
        nQuot1 = _swig_property(_spacecraftDynamics.SphericalHarmonics_nQuot1_get, _spacecraftDynamics.SphericalHarmonics_nQuot1_set)
    __swig_setmethods__["nQuot2"] = _spacecraftDynamics.SphericalHarmonics_nQuot2_set
    __swig_getmethods__["nQuot2"] = _spacecraftDynamics.SphericalHarmonics_nQuot2_get
    if _newclass:
        nQuot2 = _swig_property(_spacecraftDynamics.SphericalHarmonics_nQuot2_get, _spacecraftDynamics.SphericalHarmonics_nQuot2_set)
    __swig_destroy__ = _spacecraftDynamics.delete_SphericalHarmonics
    __del__ = lambda self: None

    def initializeParameters(self):
        return _spacecraftDynamics.SphericalHarmonics_initializeParameters(self)

    def getK(self, degree):
        return _spacecraftDynamics.SphericalHarmonics_getK(self, degree)

    def computeField(self, pos_Pfix, degree, include_zero_degree):
        return _spacecraftDynamics.SphericalHarmonics_computeField(self, pos_Pfix, degree, include_zero_degree)

    def harmReady(self):
        return _spacecraftDynamics.SphericalHarmonics_harmReady(self)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_SphericalHarmonics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SphericalHarmonics_swigregister = _spacecraftDynamics.SphericalHarmonics_swigregister
SphericalHarmonics_swigregister(SphericalHarmonics)

class GravBodyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravBodyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GravBodyData, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spacecraftDynamics.delete_GravBodyData
    __del__ = lambda self: None

    def initBody(self, moduleID):
        return _spacecraftDynamics.GravBodyData_initBody(self, moduleID)

    def computeGravityInertial(self, r_I, simTimeNanos):
        return _spacecraftDynamics.GravBodyData_computeGravityInertial(self, r_I, simTimeNanos)

    def computePotentialEnergy(self, r_I):
        return _spacecraftDynamics.GravBodyData_computePotentialEnergy(self, r_I)

    def loadEphemeris(self, moduleID):
        return _spacecraftDynamics.GravBodyData_loadEphemeris(self, moduleID)
    __swig_setmethods__["isCentralBody"] = _spacecraftDynamics.GravBodyData_isCentralBody_set
    __swig_getmethods__["isCentralBody"] = _spacecraftDynamics.GravBodyData_isCentralBody_get
    if _newclass:
        isCentralBody = _swig_property(_spacecraftDynamics.GravBodyData_isCentralBody_get, _spacecraftDynamics.GravBodyData_isCentralBody_set)
    __swig_setmethods__["isDisplayBody"] = _spacecraftDynamics.GravBodyData_isDisplayBody_set
    __swig_getmethods__["isDisplayBody"] = _spacecraftDynamics.GravBodyData_isDisplayBody_get
    if _newclass:
        isDisplayBody = _swig_property(_spacecraftDynamics.GravBodyData_isDisplayBody_get, _spacecraftDynamics.GravBodyData_isDisplayBody_set)
    __swig_setmethods__["useSphericalHarmParams"] = _spacecraftDynamics.GravBodyData_useSphericalHarmParams_set
    __swig_getmethods__["useSphericalHarmParams"] = _spacecraftDynamics.GravBodyData_useSphericalHarmParams_get
    if _newclass:
        useSphericalHarmParams = _swig_property(_spacecraftDynamics.GravBodyData_useSphericalHarmParams_get, _spacecraftDynamics.GravBodyData_useSphericalHarmParams_set)
    __swig_setmethods__["mu"] = _spacecraftDynamics.GravBodyData_mu_set
    __swig_getmethods__["mu"] = _spacecraftDynamics.GravBodyData_mu_get
    if _newclass:
        mu = _swig_property(_spacecraftDynamics.GravBodyData_mu_get, _spacecraftDynamics.GravBodyData_mu_set)
    __swig_setmethods__["ephemTime"] = _spacecraftDynamics.GravBodyData_ephemTime_set
    __swig_getmethods__["ephemTime"] = _spacecraftDynamics.GravBodyData_ephemTime_get
    if _newclass:
        ephemTime = _swig_property(_spacecraftDynamics.GravBodyData_ephemTime_get, _spacecraftDynamics.GravBodyData_ephemTime_set)
    __swig_setmethods__["ephIntTime"] = _spacecraftDynamics.GravBodyData_ephIntTime_set
    __swig_getmethods__["ephIntTime"] = _spacecraftDynamics.GravBodyData_ephIntTime_get
    if _newclass:
        ephIntTime = _swig_property(_spacecraftDynamics.GravBodyData_ephIntTime_get, _spacecraftDynamics.GravBodyData_ephIntTime_set)
    __swig_setmethods__["radEquator"] = _spacecraftDynamics.GravBodyData_radEquator_set
    __swig_getmethods__["radEquator"] = _spacecraftDynamics.GravBodyData_radEquator_get
    if _newclass:
        radEquator = _swig_property(_spacecraftDynamics.GravBodyData_radEquator_get, _spacecraftDynamics.GravBodyData_radEquator_set)
    __swig_setmethods__["localPlanet"] = _spacecraftDynamics.GravBodyData_localPlanet_set
    __swig_getmethods__["localPlanet"] = _spacecraftDynamics.GravBodyData_localPlanet_get
    if _newclass:
        localPlanet = _swig_property(_spacecraftDynamics.GravBodyData_localPlanet_get, _spacecraftDynamics.GravBodyData_localPlanet_set)
    __swig_setmethods__["localHeader"] = _spacecraftDynamics.GravBodyData_localHeader_set
    __swig_getmethods__["localHeader"] = _spacecraftDynamics.GravBodyData_localHeader_get
    if _newclass:
        localHeader = _swig_property(_spacecraftDynamics.GravBodyData_localHeader_get, _spacecraftDynamics.GravBodyData_localHeader_set)
    __swig_setmethods__["bodyInMsgName"] = _spacecraftDynamics.GravBodyData_bodyInMsgName_set
    __swig_getmethods__["bodyInMsgName"] = _spacecraftDynamics.GravBodyData_bodyInMsgName_get
    if _newclass:
        bodyInMsgName = _swig_property(_spacecraftDynamics.GravBodyData_bodyInMsgName_get, _spacecraftDynamics.GravBodyData_bodyInMsgName_set)
    __swig_setmethods__["outputMsgName"] = _spacecraftDynamics.GravBodyData_outputMsgName_set
    __swig_getmethods__["outputMsgName"] = _spacecraftDynamics.GravBodyData_outputMsgName_get
    if _newclass:
        outputMsgName = _swig_property(_spacecraftDynamics.GravBodyData_outputMsgName_get, _spacecraftDynamics.GravBodyData_outputMsgName_set)
    __swig_setmethods__["planetEphemName"] = _spacecraftDynamics.GravBodyData_planetEphemName_set
    __swig_getmethods__["planetEphemName"] = _spacecraftDynamics.GravBodyData_planetEphemName_get
    if _newclass:
        planetEphemName = _swig_property(_spacecraftDynamics.GravBodyData_planetEphemName_get, _spacecraftDynamics.GravBodyData_planetEphemName_set)
    __swig_setmethods__["outputMsgID"] = _spacecraftDynamics.GravBodyData_outputMsgID_set
    __swig_getmethods__["outputMsgID"] = _spacecraftDynamics.GravBodyData_outputMsgID_get
    if _newclass:
        outputMsgID = _swig_property(_spacecraftDynamics.GravBodyData_outputMsgID_get, _spacecraftDynamics.GravBodyData_outputMsgID_set)
    __swig_setmethods__["bodyMsgID"] = _spacecraftDynamics.GravBodyData_bodyMsgID_set
    __swig_getmethods__["bodyMsgID"] = _spacecraftDynamics.GravBodyData_bodyMsgID_get
    if _newclass:
        bodyMsgID = _swig_property(_spacecraftDynamics.GravBodyData_bodyMsgID_get, _spacecraftDynamics.GravBodyData_bodyMsgID_set)
    __swig_setmethods__["spherHarm"] = _spacecraftDynamics.GravBodyData_spherHarm_set
    __swig_getmethods__["spherHarm"] = _spacecraftDynamics.GravBodyData_spherHarm_get
    if _newclass:
        spherHarm = _swig_property(_spacecraftDynamics.GravBodyData_spherHarm_get, _spacecraftDynamics.GravBodyData_spherHarm_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_GravBodyData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GravBodyData_swigregister = _spacecraftDynamics.GravBodyData_swigregister
GravBodyData_swigregister(GravBodyData)

class GravityEffector(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GravityEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GravityEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _spacecraftDynamics.delete_GravityEffector
    __del__ = lambda self: None

    def SelfInit(self):
        return _spacecraftDynamics.GravityEffector_SelfInit(self)

    def CrossInit(self):
        return _spacecraftDynamics.GravityEffector_CrossInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _spacecraftDynamics.GravityEffector_UpdateState(self, CurrentSimNanos)

    def linkInStates(self, statesIn):
        return _spacecraftDynamics.GravityEffector_linkInStates(self, statesIn)

    def registerProperties(self, statesIn):
        return _spacecraftDynamics.GravityEffector_registerProperties(self, statesIn)

    def computeGravityField(self, r_cF_N, rDot_cF_N):
        return _spacecraftDynamics.GravityEffector_computeGravityField(self, r_cF_N, rDot_cF_N)

    def updateInertialPosAndVel(self, r_BF_N, rDot_BF_N):
        return _spacecraftDynamics.GravityEffector_updateInertialPosAndVel(self, r_BF_N, rDot_BF_N)

    def updateEnergyContributions(self, r_CN_N, orbPotEnergyContr):
        return _spacecraftDynamics.GravityEffector_updateEnergyContributions(self, r_CN_N, orbPotEnergyContr)

    def setGravBodies(self, gravBodies):
        return _spacecraftDynamics.GravityEffector_setGravBodies(self, gravBodies)

    def addGravBody(self, gravBody):
        return _spacecraftDynamics.GravityEffector_addGravBody(self, gravBody)

    def prependSpacecraftNameToStates(self):
        return _spacecraftDynamics.GravityEffector_prependSpacecraftNameToStates(self)
    __swig_setmethods__["vehicleGravityPropName"] = _spacecraftDynamics.GravityEffector_vehicleGravityPropName_set
    __swig_getmethods__["vehicleGravityPropName"] = _spacecraftDynamics.GravityEffector_vehicleGravityPropName_get
    if _newclass:
        vehicleGravityPropName = _swig_property(_spacecraftDynamics.GravityEffector_vehicleGravityPropName_get, _spacecraftDynamics.GravityEffector_vehicleGravityPropName_set)
    __swig_setmethods__["systemTimeCorrPropName"] = _spacecraftDynamics.GravityEffector_systemTimeCorrPropName_set
    __swig_getmethods__["systemTimeCorrPropName"] = _spacecraftDynamics.GravityEffector_systemTimeCorrPropName_get
    if _newclass:
        systemTimeCorrPropName = _swig_property(_spacecraftDynamics.GravityEffector_systemTimeCorrPropName_get, _spacecraftDynamics.GravityEffector_systemTimeCorrPropName_set)
    __swig_setmethods__["gravBodies"] = _spacecraftDynamics.GravityEffector_gravBodies_set
    __swig_getmethods__["gravBodies"] = _spacecraftDynamics.GravityEffector_gravBodies_get
    if _newclass:
        gravBodies = _swig_property(_spacecraftDynamics.GravityEffector_gravBodies_get, _spacecraftDynamics.GravityEffector_gravBodies_set)
    __swig_setmethods__["centralBody"] = _spacecraftDynamics.GravityEffector_centralBody_set
    __swig_getmethods__["centralBody"] = _spacecraftDynamics.GravityEffector_centralBody_get
    if _newclass:
        centralBody = _swig_property(_spacecraftDynamics.GravityEffector_centralBody_get, _spacecraftDynamics.GravityEffector_centralBody_set)
    __swig_setmethods__["inertialPositionPropName"] = _spacecraftDynamics.GravityEffector_inertialPositionPropName_set
    __swig_getmethods__["inertialPositionPropName"] = _spacecraftDynamics.GravityEffector_inertialPositionPropName_get
    if _newclass:
        inertialPositionPropName = _swig_property(_spacecraftDynamics.GravityEffector_inertialPositionPropName_get, _spacecraftDynamics.GravityEffector_inertialPositionPropName_set)
    __swig_setmethods__["inertialVelocityPropName"] = _spacecraftDynamics.GravityEffector_inertialVelocityPropName_set
    __swig_getmethods__["inertialVelocityPropName"] = _spacecraftDynamics.GravityEffector_inertialVelocityPropName_get
    if _newclass:
        inertialVelocityPropName = _swig_property(_spacecraftDynamics.GravityEffector_inertialVelocityPropName_get, _spacecraftDynamics.GravityEffector_inertialVelocityPropName_set)
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _spacecraftDynamics.GravityEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _spacecraftDynamics.GravityEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_spacecraftDynamics.GravityEffector_nameOfSpacecraftAttachedTo_get, _spacecraftDynamics.GravityEffector_nameOfSpacecraftAttachedTo_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_GravityEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
GravityEffector_swigregister = _spacecraftDynamics.GravityEffector_swigregister
GravityEffector_swigregister(GravityEffector)

class BackSubMatrices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackSubMatrices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackSubMatrices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrixA"] = _spacecraftDynamics.BackSubMatrices_matrixA_set
    __swig_getmethods__["matrixA"] = _spacecraftDynamics.BackSubMatrices_matrixA_get
    if _newclass:
        matrixA = _swig_property(_spacecraftDynamics.BackSubMatrices_matrixA_get, _spacecraftDynamics.BackSubMatrices_matrixA_set)
    __swig_setmethods__["matrixB"] = _spacecraftDynamics.BackSubMatrices_matrixB_set
    __swig_getmethods__["matrixB"] = _spacecraftDynamics.BackSubMatrices_matrixB_get
    if _newclass:
        matrixB = _swig_property(_spacecraftDynamics.BackSubMatrices_matrixB_get, _spacecraftDynamics.BackSubMatrices_matrixB_set)
    __swig_setmethods__["matrixC"] = _spacecraftDynamics.BackSubMatrices_matrixC_set
    __swig_getmethods__["matrixC"] = _spacecraftDynamics.BackSubMatrices_matrixC_get
    if _newclass:
        matrixC = _swig_property(_spacecraftDynamics.BackSubMatrices_matrixC_get, _spacecraftDynamics.BackSubMatrices_matrixC_set)
    __swig_setmethods__["matrixD"] = _spacecraftDynamics.BackSubMatrices_matrixD_set
    __swig_getmethods__["matrixD"] = _spacecraftDynamics.BackSubMatrices_matrixD_get
    if _newclass:
        matrixD = _swig_property(_spacecraftDynamics.BackSubMatrices_matrixD_get, _spacecraftDynamics.BackSubMatrices_matrixD_set)
    __swig_setmethods__["vecTrans"] = _spacecraftDynamics.BackSubMatrices_vecTrans_set
    __swig_getmethods__["vecTrans"] = _spacecraftDynamics.BackSubMatrices_vecTrans_get
    if _newclass:
        vecTrans = _swig_property(_spacecraftDynamics.BackSubMatrices_vecTrans_get, _spacecraftDynamics.BackSubMatrices_vecTrans_set)
    __swig_setmethods__["vecRot"] = _spacecraftDynamics.BackSubMatrices_vecRot_set
    __swig_getmethods__["vecRot"] = _spacecraftDynamics.BackSubMatrices_vecRot_get
    if _newclass:
        vecRot = _swig_property(_spacecraftDynamics.BackSubMatrices_vecRot_get, _spacecraftDynamics.BackSubMatrices_vecRot_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_BackSubMatrices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_BackSubMatrices
    __del__ = lambda self: None
BackSubMatrices_swigregister = _spacecraftDynamics.BackSubMatrices_swigregister
BackSubMatrices_swigregister(BackSubMatrices)

class EffectorMassProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorMassProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorMassProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mEff"] = _spacecraftDynamics.EffectorMassProps_mEff_set
    __swig_getmethods__["mEff"] = _spacecraftDynamics.EffectorMassProps_mEff_get
    if _newclass:
        mEff = _swig_property(_spacecraftDynamics.EffectorMassProps_mEff_get, _spacecraftDynamics.EffectorMassProps_mEff_set)
    __swig_setmethods__["mEffDot"] = _spacecraftDynamics.EffectorMassProps_mEffDot_set
    __swig_getmethods__["mEffDot"] = _spacecraftDynamics.EffectorMassProps_mEffDot_get
    if _newclass:
        mEffDot = _swig_property(_spacecraftDynamics.EffectorMassProps_mEffDot_get, _spacecraftDynamics.EffectorMassProps_mEffDot_set)
    __swig_setmethods__["IEffPntB_B"] = _spacecraftDynamics.EffectorMassProps_IEffPntB_B_set
    __swig_getmethods__["IEffPntB_B"] = _spacecraftDynamics.EffectorMassProps_IEffPntB_B_get
    if _newclass:
        IEffPntB_B = _swig_property(_spacecraftDynamics.EffectorMassProps_IEffPntB_B_get, _spacecraftDynamics.EffectorMassProps_IEffPntB_B_set)
    __swig_setmethods__["rEff_CB_B"] = _spacecraftDynamics.EffectorMassProps_rEff_CB_B_set
    __swig_getmethods__["rEff_CB_B"] = _spacecraftDynamics.EffectorMassProps_rEff_CB_B_get
    if _newclass:
        rEff_CB_B = _swig_property(_spacecraftDynamics.EffectorMassProps_rEff_CB_B_get, _spacecraftDynamics.EffectorMassProps_rEff_CB_B_set)
    __swig_setmethods__["rEffPrime_CB_B"] = _spacecraftDynamics.EffectorMassProps_rEffPrime_CB_B_set
    __swig_getmethods__["rEffPrime_CB_B"] = _spacecraftDynamics.EffectorMassProps_rEffPrime_CB_B_get
    if _newclass:
        rEffPrime_CB_B = _swig_property(_spacecraftDynamics.EffectorMassProps_rEffPrime_CB_B_get, _spacecraftDynamics.EffectorMassProps_rEffPrime_CB_B_set)
    __swig_setmethods__["IEffPrimePntB_B"] = _spacecraftDynamics.EffectorMassProps_IEffPrimePntB_B_set
    __swig_getmethods__["IEffPrimePntB_B"] = _spacecraftDynamics.EffectorMassProps_IEffPrimePntB_B_get
    if _newclass:
        IEffPrimePntB_B = _swig_property(_spacecraftDynamics.EffectorMassProps_IEffPrimePntB_B_get, _spacecraftDynamics.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_EffectorMassProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_EffectorMassProps
    __del__ = lambda self: None
EffectorMassProps_swigregister = _spacecraftDynamics.EffectorMassProps_swigregister
EffectorMassProps_swigregister(EffectorMassProps)

class StateEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _spacecraftDynamics.StateEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _spacecraftDynamics.StateEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_spacecraftDynamics.StateEffector_nameOfSpacecraftAttachedTo_get, _spacecraftDynamics.StateEffector_nameOfSpacecraftAttachedTo_set)
    __swig_setmethods__["effProps"] = _spacecraftDynamics.StateEffector_effProps_set
    __swig_getmethods__["effProps"] = _spacecraftDynamics.StateEffector_effProps_get
    if _newclass:
        effProps = _swig_property(_spacecraftDynamics.StateEffector_effProps_get, _spacecraftDynamics.StateEffector_effProps_set)
    __swig_setmethods__["forceOnBody_B"] = _spacecraftDynamics.StateEffector_forceOnBody_B_set
    __swig_getmethods__["forceOnBody_B"] = _spacecraftDynamics.StateEffector_forceOnBody_B_get
    if _newclass:
        forceOnBody_B = _swig_property(_spacecraftDynamics.StateEffector_forceOnBody_B_get, _spacecraftDynamics.StateEffector_forceOnBody_B_set)
    __swig_setmethods__["torqueOnBodyPntB_B"] = _spacecraftDynamics.StateEffector_torqueOnBodyPntB_B_set
    __swig_getmethods__["torqueOnBodyPntB_B"] = _spacecraftDynamics.StateEffector_torqueOnBodyPntB_B_get
    if _newclass:
        torqueOnBodyPntB_B = _swig_property(_spacecraftDynamics.StateEffector_torqueOnBodyPntB_B_get, _spacecraftDynamics.StateEffector_torqueOnBodyPntB_B_set)
    __swig_setmethods__["torqueOnBodyPntC_B"] = _spacecraftDynamics.StateEffector_torqueOnBodyPntC_B_set
    __swig_getmethods__["torqueOnBodyPntC_B"] = _spacecraftDynamics.StateEffector_torqueOnBodyPntC_B_get
    if _newclass:
        torqueOnBodyPntC_B = _swig_property(_spacecraftDynamics.StateEffector_torqueOnBodyPntC_B_get, _spacecraftDynamics.StateEffector_torqueOnBodyPntC_B_set)
    __swig_setmethods__["r_BP_P"] = _spacecraftDynamics.StateEffector_r_BP_P_set
    __swig_getmethods__["r_BP_P"] = _spacecraftDynamics.StateEffector_r_BP_P_get
    if _newclass:
        r_BP_P = _swig_property(_spacecraftDynamics.StateEffector_r_BP_P_get, _spacecraftDynamics.StateEffector_r_BP_P_set)
    __swig_setmethods__["dcm_BP"] = _spacecraftDynamics.StateEffector_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _spacecraftDynamics.StateEffector_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_spacecraftDynamics.StateEffector_dcm_BP_get, _spacecraftDynamics.StateEffector_dcm_BP_set)
    __swig_destroy__ = _spacecraftDynamics.delete_StateEffector
    __del__ = lambda self: None

    def updateEffectorMassProps(self, integTime):
        return _spacecraftDynamics.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _spacecraftDynamics.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _spacecraftDynamics.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _spacecraftDynamics.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _spacecraftDynamics.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _spacecraftDynamics.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _spacecraftDynamics.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _spacecraftDynamics.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _spacecraftDynamics.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _spacecraftDynamics.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _spacecraftDynamics.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)
StateEffector_swigregister = _spacecraftDynamics.StateEffector_swigregister
StateEffector_swigregister(StateEffector)

class DynamicEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spacecraftDynamics.delete_DynamicEffector
    __del__ = lambda self: None

    def computeStateContribution(self, integTime):
        return _spacecraftDynamics.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _spacecraftDynamics.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _spacecraftDynamics.DynamicEffector_computeForceTorque(self, integTime)
    __swig_setmethods__["stateDerivContribution"] = _spacecraftDynamics.DynamicEffector_stateDerivContribution_set
    __swig_getmethods__["stateDerivContribution"] = _spacecraftDynamics.DynamicEffector_stateDerivContribution_get
    if _newclass:
        stateDerivContribution = _swig_property(_spacecraftDynamics.DynamicEffector_stateDerivContribution_get, _spacecraftDynamics.DynamicEffector_stateDerivContribution_set)
    __swig_setmethods__["forceExternal_N"] = _spacecraftDynamics.DynamicEffector_forceExternal_N_set
    __swig_getmethods__["forceExternal_N"] = _spacecraftDynamics.DynamicEffector_forceExternal_N_get
    if _newclass:
        forceExternal_N = _swig_property(_spacecraftDynamics.DynamicEffector_forceExternal_N_get, _spacecraftDynamics.DynamicEffector_forceExternal_N_set)
    __swig_setmethods__["forceExternal_B"] = _spacecraftDynamics.DynamicEffector_forceExternal_B_set
    __swig_getmethods__["forceExternal_B"] = _spacecraftDynamics.DynamicEffector_forceExternal_B_get
    if _newclass:
        forceExternal_B = _swig_property(_spacecraftDynamics.DynamicEffector_forceExternal_B_get, _spacecraftDynamics.DynamicEffector_forceExternal_B_set)
    __swig_setmethods__["torqueExternalPntB_B"] = _spacecraftDynamics.DynamicEffector_torqueExternalPntB_B_set
    __swig_getmethods__["torqueExternalPntB_B"] = _spacecraftDynamics.DynamicEffector_torqueExternalPntB_B_get
    if _newclass:
        torqueExternalPntB_B = _swig_property(_spacecraftDynamics.DynamicEffector_torqueExternalPntB_B_get, _spacecraftDynamics.DynamicEffector_torqueExternalPntB_B_set)
DynamicEffector_swigregister = _spacecraftDynamics.DynamicEffector_swigregister
DynamicEffector_swigregister(DynamicEffector)

class DockingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DockingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DockingData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_DB_B"] = _spacecraftDynamics.DockingData_r_DB_B_set
    __swig_getmethods__["r_DB_B"] = _spacecraftDynamics.DockingData_r_DB_B_get
    if _newclass:
        r_DB_B = _swig_property(_spacecraftDynamics.DockingData_r_DB_B_get, _spacecraftDynamics.DockingData_r_DB_B_set)
    __swig_setmethods__["dcm_DB"] = _spacecraftDynamics.DockingData_dcm_DB_set
    __swig_getmethods__["dcm_DB"] = _spacecraftDynamics.DockingData_dcm_DB_get
    if _newclass:
        dcm_DB = _swig_property(_spacecraftDynamics.DockingData_dcm_DB_get, _spacecraftDynamics.DockingData_dcm_DB_set)
    __swig_setmethods__["r_DP_P"] = _spacecraftDynamics.DockingData_r_DP_P_set
    __swig_getmethods__["r_DP_P"] = _spacecraftDynamics.DockingData_r_DP_P_get
    if _newclass:
        r_DP_P = _swig_property(_spacecraftDynamics.DockingData_r_DP_P_get, _spacecraftDynamics.DockingData_r_DP_P_set)
    __swig_setmethods__["dcm_DP"] = _spacecraftDynamics.DockingData_dcm_DP_set
    __swig_getmethods__["dcm_DP"] = _spacecraftDynamics.DockingData_dcm_DP_get
    if _newclass:
        dcm_DP = _swig_property(_spacecraftDynamics.DockingData_dcm_DP_get, _spacecraftDynamics.DockingData_dcm_DP_set)
    __swig_setmethods__["portName"] = _spacecraftDynamics.DockingData_portName_set
    __swig_getmethods__["portName"] = _spacecraftDynamics.DockingData_portName_get
    if _newclass:
        portName = _swig_property(_spacecraftDynamics.DockingData_portName_get, _spacecraftDynamics.DockingData_portName_set)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_DockingData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spacecraftDynamics.delete_DockingData
    __del__ = lambda self: None
DockingData_swigregister = _spacecraftDynamics.DockingData_swigregister
DockingData_swigregister(DockingData)

class Spacecraft(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spacecraft, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spacecraft, name)
    __repr__ = _swig_repr
    __swig_setmethods__["docked"] = _spacecraftDynamics.Spacecraft_docked_set
    __swig_getmethods__["docked"] = _spacecraftDynamics.Spacecraft_docked_get
    if _newclass:
        docked = _swig_property(_spacecraftDynamics.Spacecraft_docked_get, _spacecraftDynamics.Spacecraft_docked_set)
    __swig_setmethods__["scStateOutMsgId"] = _spacecraftDynamics.Spacecraft_scStateOutMsgId_set
    __swig_getmethods__["scStateOutMsgId"] = _spacecraftDynamics.Spacecraft_scStateOutMsgId_get
    if _newclass:
        scStateOutMsgId = _swig_property(_spacecraftDynamics.Spacecraft_scStateOutMsgId_get, _spacecraftDynamics.Spacecraft_scStateOutMsgId_set)
    __swig_setmethods__["scMassStateOutMsgId"] = _spacecraftDynamics.Spacecraft_scMassStateOutMsgId_set
    __swig_getmethods__["scMassStateOutMsgId"] = _spacecraftDynamics.Spacecraft_scMassStateOutMsgId_get
    if _newclass:
        scMassStateOutMsgId = _swig_property(_spacecraftDynamics.Spacecraft_scMassStateOutMsgId_get, _spacecraftDynamics.Spacecraft_scMassStateOutMsgId_set)
    __swig_setmethods__["scEnergyMomentumOutMsgId"] = _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgId_set
    __swig_getmethods__["scEnergyMomentumOutMsgId"] = _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgId_get
    if _newclass:
        scEnergyMomentumOutMsgId = _swig_property(_spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgId_get, _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgId_set)
    __swig_setmethods__["numOutMsgBuffers"] = _spacecraftDynamics.Spacecraft_numOutMsgBuffers_set
    __swig_getmethods__["numOutMsgBuffers"] = _spacecraftDynamics.Spacecraft_numOutMsgBuffers_get
    if _newclass:
        numOutMsgBuffers = _swig_property(_spacecraftDynamics.Spacecraft_numOutMsgBuffers_get, _spacecraftDynamics.Spacecraft_numOutMsgBuffers_set)
    __swig_setmethods__["spacecraftName"] = _spacecraftDynamics.Spacecraft_spacecraftName_set
    __swig_getmethods__["spacecraftName"] = _spacecraftDynamics.Spacecraft_spacecraftName_get
    if _newclass:
        spacecraftName = _swig_property(_spacecraftDynamics.Spacecraft_spacecraftName_get, _spacecraftDynamics.Spacecraft_spacecraftName_set)
    __swig_setmethods__["scStateOutMsgName"] = _spacecraftDynamics.Spacecraft_scStateOutMsgName_set
    __swig_getmethods__["scStateOutMsgName"] = _spacecraftDynamics.Spacecraft_scStateOutMsgName_get
    if _newclass:
        scStateOutMsgName = _swig_property(_spacecraftDynamics.Spacecraft_scStateOutMsgName_get, _spacecraftDynamics.Spacecraft_scStateOutMsgName_set)
    __swig_setmethods__["scMassStateOutMsgName"] = _spacecraftDynamics.Spacecraft_scMassStateOutMsgName_set
    __swig_getmethods__["scMassStateOutMsgName"] = _spacecraftDynamics.Spacecraft_scMassStateOutMsgName_get
    if _newclass:
        scMassStateOutMsgName = _swig_property(_spacecraftDynamics.Spacecraft_scMassStateOutMsgName_get, _spacecraftDynamics.Spacecraft_scMassStateOutMsgName_set)
    __swig_setmethods__["scEnergyMomentumOutMsgName"] = _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgName_set
    __swig_getmethods__["scEnergyMomentumOutMsgName"] = _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgName_get
    if _newclass:
        scEnergyMomentumOutMsgName = _swig_property(_spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgName_get, _spacecraftDynamics.Spacecraft_scEnergyMomentumOutMsgName_set)
    __swig_setmethods__["totOrbEnergy"] = _spacecraftDynamics.Spacecraft_totOrbEnergy_set
    __swig_getmethods__["totOrbEnergy"] = _spacecraftDynamics.Spacecraft_totOrbEnergy_get
    if _newclass:
        totOrbEnergy = _swig_property(_spacecraftDynamics.Spacecraft_totOrbEnergy_get, _spacecraftDynamics.Spacecraft_totOrbEnergy_set)
    __swig_setmethods__["totRotEnergy"] = _spacecraftDynamics.Spacecraft_totRotEnergy_set
    __swig_getmethods__["totRotEnergy"] = _spacecraftDynamics.Spacecraft_totRotEnergy_get
    if _newclass:
        totRotEnergy = _swig_property(_spacecraftDynamics.Spacecraft_totRotEnergy_get, _spacecraftDynamics.Spacecraft_totRotEnergy_set)
    __swig_setmethods__["rotEnergyContr"] = _spacecraftDynamics.Spacecraft_rotEnergyContr_set
    __swig_getmethods__["rotEnergyContr"] = _spacecraftDynamics.Spacecraft_rotEnergyContr_get
    if _newclass:
        rotEnergyContr = _swig_property(_spacecraftDynamics.Spacecraft_rotEnergyContr_get, _spacecraftDynamics.Spacecraft_rotEnergyContr_set)
    __swig_setmethods__["orbPotentialEnergyContr"] = _spacecraftDynamics.Spacecraft_orbPotentialEnergyContr_set
    __swig_getmethods__["orbPotentialEnergyContr"] = _spacecraftDynamics.Spacecraft_orbPotentialEnergyContr_get
    if _newclass:
        orbPotentialEnergyContr = _swig_property(_spacecraftDynamics.Spacecraft_orbPotentialEnergyContr_get, _spacecraftDynamics.Spacecraft_orbPotentialEnergyContr_set)
    __swig_setmethods__["totOrbAngMomPntN_N"] = _spacecraftDynamics.Spacecraft_totOrbAngMomPntN_N_set
    __swig_getmethods__["totOrbAngMomPntN_N"] = _spacecraftDynamics.Spacecraft_totOrbAngMomPntN_N_get
    if _newclass:
        totOrbAngMomPntN_N = _swig_property(_spacecraftDynamics.Spacecraft_totOrbAngMomPntN_N_get, _spacecraftDynamics.Spacecraft_totOrbAngMomPntN_N_set)
    __swig_setmethods__["totRotAngMomPntC_N"] = _spacecraftDynamics.Spacecraft_totRotAngMomPntC_N_set
    __swig_getmethods__["totRotAngMomPntC_N"] = _spacecraftDynamics.Spacecraft_totRotAngMomPntC_N_get
    if _newclass:
        totRotAngMomPntC_N = _swig_property(_spacecraftDynamics.Spacecraft_totRotAngMomPntC_N_get, _spacecraftDynamics.Spacecraft_totRotAngMomPntC_N_set)
    __swig_setmethods__["rotAngMomPntCContr_B"] = _spacecraftDynamics.Spacecraft_rotAngMomPntCContr_B_set
    __swig_getmethods__["rotAngMomPntCContr_B"] = _spacecraftDynamics.Spacecraft_rotAngMomPntCContr_B_get
    if _newclass:
        rotAngMomPntCContr_B = _swig_property(_spacecraftDynamics.Spacecraft_rotAngMomPntCContr_B_get, _spacecraftDynamics.Spacecraft_rotAngMomPntCContr_B_set)
    __swig_setmethods__["backSubMatricesContributions"] = _spacecraftDynamics.Spacecraft_backSubMatricesContributions_set
    __swig_getmethods__["backSubMatricesContributions"] = _spacecraftDynamics.Spacecraft_backSubMatricesContributions_get
    if _newclass:
        backSubMatricesContributions = _swig_property(_spacecraftDynamics.Spacecraft_backSubMatricesContributions_get, _spacecraftDynamics.Spacecraft_backSubMatricesContributions_set)
    __swig_setmethods__["sumForceExternal_N"] = _spacecraftDynamics.Spacecraft_sumForceExternal_N_set
    __swig_getmethods__["sumForceExternal_N"] = _spacecraftDynamics.Spacecraft_sumForceExternal_N_get
    if _newclass:
        sumForceExternal_N = _swig_property(_spacecraftDynamics.Spacecraft_sumForceExternal_N_get, _spacecraftDynamics.Spacecraft_sumForceExternal_N_set)
    __swig_setmethods__["sumForceExternal_B"] = _spacecraftDynamics.Spacecraft_sumForceExternal_B_set
    __swig_getmethods__["sumForceExternal_B"] = _spacecraftDynamics.Spacecraft_sumForceExternal_B_get
    if _newclass:
        sumForceExternal_B = _swig_property(_spacecraftDynamics.Spacecraft_sumForceExternal_B_get, _spacecraftDynamics.Spacecraft_sumForceExternal_B_set)
    __swig_setmethods__["sumTorquePntB_B"] = _spacecraftDynamics.Spacecraft_sumTorquePntB_B_set
    __swig_getmethods__["sumTorquePntB_B"] = _spacecraftDynamics.Spacecraft_sumTorquePntB_B_get
    if _newclass:
        sumTorquePntB_B = _swig_property(_spacecraftDynamics.Spacecraft_sumTorquePntB_B_get, _spacecraftDynamics.Spacecraft_sumTorquePntB_B_set)
    __swig_setmethods__["oldV_CN_N"] = _spacecraftDynamics.Spacecraft_oldV_CN_N_set
    __swig_getmethods__["oldV_CN_N"] = _spacecraftDynamics.Spacecraft_oldV_CN_N_get
    if _newclass:
        oldV_CN_N = _swig_property(_spacecraftDynamics.Spacecraft_oldV_CN_N_get, _spacecraftDynamics.Spacecraft_oldV_CN_N_set)
    __swig_setmethods__["oldV_BN_N"] = _spacecraftDynamics.Spacecraft_oldV_BN_N_set
    __swig_getmethods__["oldV_BN_N"] = _spacecraftDynamics.Spacecraft_oldV_BN_N_get
    if _newclass:
        oldV_BN_N = _swig_property(_spacecraftDynamics.Spacecraft_oldV_BN_N_get, _spacecraftDynamics.Spacecraft_oldV_BN_N_set)
    __swig_setmethods__["oldOmega_BN_B"] = _spacecraftDynamics.Spacecraft_oldOmega_BN_B_set
    __swig_getmethods__["oldOmega_BN_B"] = _spacecraftDynamics.Spacecraft_oldOmega_BN_B_get
    if _newclass:
        oldOmega_BN_B = _swig_property(_spacecraftDynamics.Spacecraft_oldOmega_BN_B_get, _spacecraftDynamics.Spacecraft_oldOmega_BN_B_set)
    __swig_setmethods__["dvAccum_B"] = _spacecraftDynamics.Spacecraft_dvAccum_B_set
    __swig_getmethods__["dvAccum_B"] = _spacecraftDynamics.Spacecraft_dvAccum_B_get
    if _newclass:
        dvAccum_B = _swig_property(_spacecraftDynamics.Spacecraft_dvAccum_B_get, _spacecraftDynamics.Spacecraft_dvAccum_B_set)
    __swig_setmethods__["dvAccum_BN_B"] = _spacecraftDynamics.Spacecraft_dvAccum_BN_B_set
    __swig_getmethods__["dvAccum_BN_B"] = _spacecraftDynamics.Spacecraft_dvAccum_BN_B_get
    if _newclass:
        dvAccum_BN_B = _swig_property(_spacecraftDynamics.Spacecraft_dvAccum_BN_B_get, _spacecraftDynamics.Spacecraft_dvAccum_BN_B_set)
    __swig_setmethods__["nonConservativeAccelpntB_B"] = _spacecraftDynamics.Spacecraft_nonConservativeAccelpntB_B_set
    __swig_getmethods__["nonConservativeAccelpntB_B"] = _spacecraftDynamics.Spacecraft_nonConservativeAccelpntB_B_get
    if _newclass:
        nonConservativeAccelpntB_B = _swig_property(_spacecraftDynamics.Spacecraft_nonConservativeAccelpntB_B_get, _spacecraftDynamics.Spacecraft_nonConservativeAccelpntB_B_set)
    __swig_setmethods__["omegaDot_BN_B"] = _spacecraftDynamics.Spacecraft_omegaDot_BN_B_set
    __swig_getmethods__["omegaDot_BN_B"] = _spacecraftDynamics.Spacecraft_omegaDot_BN_B_get
    if _newclass:
        omegaDot_BN_B = _swig_property(_spacecraftDynamics.Spacecraft_omegaDot_BN_B_get, _spacecraftDynamics.Spacecraft_omegaDot_BN_B_set)
    __swig_setmethods__["m_SC"] = _spacecraftDynamics.Spacecraft_m_SC_set
    __swig_getmethods__["m_SC"] = _spacecraftDynamics.Spacecraft_m_SC_get
    if _newclass:
        m_SC = _swig_property(_spacecraftDynamics.Spacecraft_m_SC_get, _spacecraftDynamics.Spacecraft_m_SC_set)
    __swig_setmethods__["mDot_SC"] = _spacecraftDynamics.Spacecraft_mDot_SC_set
    __swig_getmethods__["mDot_SC"] = _spacecraftDynamics.Spacecraft_mDot_SC_get
    if _newclass:
        mDot_SC = _swig_property(_spacecraftDynamics.Spacecraft_mDot_SC_get, _spacecraftDynamics.Spacecraft_mDot_SC_set)
    __swig_setmethods__["ISCPntB_B"] = _spacecraftDynamics.Spacecraft_ISCPntB_B_set
    __swig_getmethods__["ISCPntB_B"] = _spacecraftDynamics.Spacecraft_ISCPntB_B_get
    if _newclass:
        ISCPntB_B = _swig_property(_spacecraftDynamics.Spacecraft_ISCPntB_B_get, _spacecraftDynamics.Spacecraft_ISCPntB_B_set)
    __swig_setmethods__["c_B"] = _spacecraftDynamics.Spacecraft_c_B_set
    __swig_getmethods__["c_B"] = _spacecraftDynamics.Spacecraft_c_B_get
    if _newclass:
        c_B = _swig_property(_spacecraftDynamics.Spacecraft_c_B_get, _spacecraftDynamics.Spacecraft_c_B_set)
    __swig_setmethods__["cPrime_B"] = _spacecraftDynamics.Spacecraft_cPrime_B_set
    __swig_getmethods__["cPrime_B"] = _spacecraftDynamics.Spacecraft_cPrime_B_get
    if _newclass:
        cPrime_B = _swig_property(_spacecraftDynamics.Spacecraft_cPrime_B_get, _spacecraftDynamics.Spacecraft_cPrime_B_set)
    __swig_setmethods__["cDot_B"] = _spacecraftDynamics.Spacecraft_cDot_B_set
    __swig_getmethods__["cDot_B"] = _spacecraftDynamics.Spacecraft_cDot_B_get
    if _newclass:
        cDot_B = _swig_property(_spacecraftDynamics.Spacecraft_cDot_B_get, _spacecraftDynamics.Spacecraft_cDot_B_set)
    __swig_setmethods__["ISCPntBPrime_B"] = _spacecraftDynamics.Spacecraft_ISCPntBPrime_B_set
    __swig_getmethods__["ISCPntBPrime_B"] = _spacecraftDynamics.Spacecraft_ISCPntBPrime_B_get
    if _newclass:
        ISCPntBPrime_B = _swig_property(_spacecraftDynamics.Spacecraft_ISCPntBPrime_B_get, _spacecraftDynamics.Spacecraft_ISCPntBPrime_B_set)
    __swig_setmethods__["g_N"] = _spacecraftDynamics.Spacecraft_g_N_set
    __swig_getmethods__["g_N"] = _spacecraftDynamics.Spacecraft_g_N_get
    if _newclass:
        g_N = _swig_property(_spacecraftDynamics.Spacecraft_g_N_get, _spacecraftDynamics.Spacecraft_g_N_set)
    __swig_setmethods__["hub"] = _spacecraftDynamics.Spacecraft_hub_set
    __swig_getmethods__["hub"] = _spacecraftDynamics.Spacecraft_hub_get
    if _newclass:
        hub = _swig_property(_spacecraftDynamics.Spacecraft_hub_get, _spacecraftDynamics.Spacecraft_hub_set)
    __swig_setmethods__["gravField"] = _spacecraftDynamics.Spacecraft_gravField_set
    __swig_getmethods__["gravField"] = _spacecraftDynamics.Spacecraft_gravField_get
    if _newclass:
        gravField = _swig_property(_spacecraftDynamics.Spacecraft_gravField_get, _spacecraftDynamics.Spacecraft_gravField_set)
    __swig_setmethods__["states"] = _spacecraftDynamics.Spacecraft_states_set
    __swig_getmethods__["states"] = _spacecraftDynamics.Spacecraft_states_get
    if _newclass:
        states = _swig_property(_spacecraftDynamics.Spacecraft_states_get, _spacecraftDynamics.Spacecraft_states_set)
    __swig_setmethods__["dynEffectors"] = _spacecraftDynamics.Spacecraft_dynEffectors_set
    __swig_getmethods__["dynEffectors"] = _spacecraftDynamics.Spacecraft_dynEffectors_get
    if _newclass:
        dynEffectors = _swig_property(_spacecraftDynamics.Spacecraft_dynEffectors_get, _spacecraftDynamics.Spacecraft_dynEffectors_set)
    __swig_setmethods__["dockingPoints"] = _spacecraftDynamics.Spacecraft_dockingPoints_set
    __swig_getmethods__["dockingPoints"] = _spacecraftDynamics.Spacecraft_dockingPoints_get
    if _newclass:
        dockingPoints = _swig_property(_spacecraftDynamics.Spacecraft_dockingPoints_get, _spacecraftDynamics.Spacecraft_dockingPoints_set)
    __swig_setmethods__["hubR_N"] = _spacecraftDynamics.Spacecraft_hubR_N_set
    __swig_getmethods__["hubR_N"] = _spacecraftDynamics.Spacecraft_hubR_N_get
    if _newclass:
        hubR_N = _swig_property(_spacecraftDynamics.Spacecraft_hubR_N_get, _spacecraftDynamics.Spacecraft_hubR_N_set)
    __swig_setmethods__["hubV_N"] = _spacecraftDynamics.Spacecraft_hubV_N_set
    __swig_getmethods__["hubV_N"] = _spacecraftDynamics.Spacecraft_hubV_N_get
    if _newclass:
        hubV_N = _swig_property(_spacecraftDynamics.Spacecraft_hubV_N_get, _spacecraftDynamics.Spacecraft_hubV_N_set)
    __swig_setmethods__["hubOmega_BN_B"] = _spacecraftDynamics.Spacecraft_hubOmega_BN_B_set
    __swig_getmethods__["hubOmega_BN_B"] = _spacecraftDynamics.Spacecraft_hubOmega_BN_B_get
    if _newclass:
        hubOmega_BN_B = _swig_property(_spacecraftDynamics.Spacecraft_hubOmega_BN_B_get, _spacecraftDynamics.Spacecraft_hubOmega_BN_B_set)
    __swig_setmethods__["hubSigma"] = _spacecraftDynamics.Spacecraft_hubSigma_set
    __swig_getmethods__["hubSigma"] = _spacecraftDynamics.Spacecraft_hubSigma_get
    if _newclass:
        hubSigma = _swig_property(_spacecraftDynamics.Spacecraft_hubSigma_get, _spacecraftDynamics.Spacecraft_hubSigma_set)
    __swig_setmethods__["inertialPositionProperty"] = _spacecraftDynamics.Spacecraft_inertialPositionProperty_set
    __swig_getmethods__["inertialPositionProperty"] = _spacecraftDynamics.Spacecraft_inertialPositionProperty_get
    if _newclass:
        inertialPositionProperty = _swig_property(_spacecraftDynamics.Spacecraft_inertialPositionProperty_get, _spacecraftDynamics.Spacecraft_inertialPositionProperty_set)
    __swig_setmethods__["inertialVelocityProperty"] = _spacecraftDynamics.Spacecraft_inertialVelocityProperty_set
    __swig_getmethods__["inertialVelocityProperty"] = _spacecraftDynamics.Spacecraft_inertialVelocityProperty_get
    if _newclass:
        inertialVelocityProperty = _swig_property(_spacecraftDynamics.Spacecraft_inertialVelocityProperty_get, _spacecraftDynamics.Spacecraft_inertialVelocityProperty_set)
    __swig_destroy__ = _spacecraftDynamics.delete_Spacecraft
    __del__ = lambda self: None

    def addStateEffector(self, newStateEffector):
        return _spacecraftDynamics.Spacecraft_addStateEffector(self, newStateEffector)

    def addDynamicEffector(self, newDynamicEffector):
        return _spacecraftDynamics.Spacecraft_addDynamicEffector(self, newDynamicEffector)

    def addDockingPort(self, newDockingPort):
        return _spacecraftDynamics.Spacecraft_addDockingPort(self, newDockingPort)

    def SelfInitSC(self, moduleID):
        return _spacecraftDynamics.Spacecraft_SelfInitSC(self, moduleID)

    def CrossInitSC(self):
        return _spacecraftDynamics.Spacecraft_CrossInitSC(self)

    def writeOutputMessagesSC(self, clockTime, moduleID):
        return _spacecraftDynamics.Spacecraft_writeOutputMessagesSC(self, clockTime, moduleID)

    def linkInStatesSC(self, statesIn):
        return _spacecraftDynamics.Spacecraft_linkInStatesSC(self, statesIn)

    def initializeDynamicsSC(self, statesIn):
        return _spacecraftDynamics.Spacecraft_initializeDynamicsSC(self, statesIn)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_Spacecraft(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Spacecraft_swigregister = _spacecraftDynamics.Spacecraft_swigregister
Spacecraft_swigregister(Spacecraft)

class SpacecraftDynamics(DynamicObject):
    __swig_setmethods__ = {}
    for _s in [DynamicObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpacecraftDynamics, name, value)
    __swig_getmethods__ = {}
    for _s in [DynamicObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpacecraftDynamics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["simTimePrevious"] = _spacecraftDynamics.SpacecraftDynamics_simTimePrevious_set
    __swig_getmethods__["simTimePrevious"] = _spacecraftDynamics.SpacecraftDynamics_simTimePrevious_get
    if _newclass:
        simTimePrevious = _swig_property(_spacecraftDynamics.SpacecraftDynamics_simTimePrevious_get, _spacecraftDynamics.SpacecraftDynamics_simTimePrevious_set)
    __swig_setmethods__["numOutMsgBuffers"] = _spacecraftDynamics.SpacecraftDynamics_numOutMsgBuffers_set
    __swig_getmethods__["numOutMsgBuffers"] = _spacecraftDynamics.SpacecraftDynamics_numOutMsgBuffers_get
    if _newclass:
        numOutMsgBuffers = _swig_property(_spacecraftDynamics.SpacecraftDynamics_numOutMsgBuffers_get, _spacecraftDynamics.SpacecraftDynamics_numOutMsgBuffers_set)
    __swig_setmethods__["sysTimePropertyName"] = _spacecraftDynamics.SpacecraftDynamics_sysTimePropertyName_set
    __swig_getmethods__["sysTimePropertyName"] = _spacecraftDynamics.SpacecraftDynamics_sysTimePropertyName_get
    if _newclass:
        sysTimePropertyName = _swig_property(_spacecraftDynamics.SpacecraftDynamics_sysTimePropertyName_get, _spacecraftDynamics.SpacecraftDynamics_sysTimePropertyName_set)
    __swig_setmethods__["currTimeStep"] = _spacecraftDynamics.SpacecraftDynamics_currTimeStep_set
    __swig_getmethods__["currTimeStep"] = _spacecraftDynamics.SpacecraftDynamics_currTimeStep_get
    if _newclass:
        currTimeStep = _swig_property(_spacecraftDynamics.SpacecraftDynamics_currTimeStep_get, _spacecraftDynamics.SpacecraftDynamics_currTimeStep_set)
    __swig_setmethods__["timePrevious"] = _spacecraftDynamics.SpacecraftDynamics_timePrevious_set
    __swig_getmethods__["timePrevious"] = _spacecraftDynamics.SpacecraftDynamics_timePrevious_get
    if _newclass:
        timePrevious = _swig_property(_spacecraftDynamics.SpacecraftDynamics_timePrevious_get, _spacecraftDynamics.SpacecraftDynamics_timePrevious_set)
    __swig_setmethods__["sysTime"] = _spacecraftDynamics.SpacecraftDynamics_sysTime_set
    __swig_getmethods__["sysTime"] = _spacecraftDynamics.SpacecraftDynamics_sysTime_get
    if _newclass:
        sysTime = _swig_property(_spacecraftDynamics.SpacecraftDynamics_sysTime_get, _spacecraftDynamics.SpacecraftDynamics_sysTime_set)
    __swig_setmethods__["primaryCentralSpacecraft"] = _spacecraftDynamics.SpacecraftDynamics_primaryCentralSpacecraft_set
    __swig_getmethods__["primaryCentralSpacecraft"] = _spacecraftDynamics.SpacecraftDynamics_primaryCentralSpacecraft_get
    if _newclass:
        primaryCentralSpacecraft = _swig_property(_spacecraftDynamics.SpacecraftDynamics_primaryCentralSpacecraft_get, _spacecraftDynamics.SpacecraftDynamics_primaryCentralSpacecraft_set)
    __swig_setmethods__["spacecraftDockedToPrimary"] = _spacecraftDynamics.SpacecraftDynamics_spacecraftDockedToPrimary_set
    __swig_getmethods__["spacecraftDockedToPrimary"] = _spacecraftDynamics.SpacecraftDynamics_spacecraftDockedToPrimary_get
    if _newclass:
        spacecraftDockedToPrimary = _swig_property(_spacecraftDynamics.SpacecraftDynamics_spacecraftDockedToPrimary_get, _spacecraftDynamics.SpacecraftDynamics_spacecraftDockedToPrimary_set)
    __swig_setmethods__["unDockedSpacecraft"] = _spacecraftDynamics.SpacecraftDynamics_unDockedSpacecraft_set
    __swig_getmethods__["unDockedSpacecraft"] = _spacecraftDynamics.SpacecraftDynamics_unDockedSpacecraft_get
    if _newclass:
        unDockedSpacecraft = _swig_property(_spacecraftDynamics.SpacecraftDynamics_unDockedSpacecraft_get, _spacecraftDynamics.SpacecraftDynamics_unDockedSpacecraft_set)
    __swig_setmethods__["numberOfSCAttachedToPrimary"] = _spacecraftDynamics.SpacecraftDynamics_numberOfSCAttachedToPrimary_set
    __swig_getmethods__["numberOfSCAttachedToPrimary"] = _spacecraftDynamics.SpacecraftDynamics_numberOfSCAttachedToPrimary_get
    if _newclass:
        numberOfSCAttachedToPrimary = _swig_property(_spacecraftDynamics.SpacecraftDynamics_numberOfSCAttachedToPrimary_get, _spacecraftDynamics.SpacecraftDynamics_numberOfSCAttachedToPrimary_set)
    __swig_destroy__ = _spacecraftDynamics.delete_SpacecraftDynamics
    __del__ = lambda self: None

    def initializeDynamics(self):
        return _spacecraftDynamics.SpacecraftDynamics_initializeDynamics(self)

    def computeEnergyMomentum(self, time):
        return _spacecraftDynamics.SpacecraftDynamics_computeEnergyMomentum(self, time)

    def computeEnergyMomentumSC(self, time, spacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_computeEnergyMomentumSC(self, time, spacecraft)

    def computeEnergyMomentumSystem(self, time):
        return _spacecraftDynamics.SpacecraftDynamics_computeEnergyMomentumSystem(self, time)

    def updateSpacecraftMassProps(self, time, spacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_updateSpacecraftMassProps(self, time, spacecraft)

    def updateSystemMassProps(self, time):
        return _spacecraftDynamics.SpacecraftDynamics_updateSystemMassProps(self, time)

    def initializeSCPosVelocity(self, spacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_initializeSCPosVelocity(self, spacecraft)

    def SelfInit(self):
        return _spacecraftDynamics.SpacecraftDynamics_SelfInit(self)

    def CrossInit(self):
        return _spacecraftDynamics.SpacecraftDynamics_CrossInit(self)

    def writeOutputMessages(self, clockTime):
        return _spacecraftDynamics.SpacecraftDynamics_writeOutputMessages(self, clockTime)

    def UpdateState(self, CurrentSimNanos):
        return _spacecraftDynamics.SpacecraftDynamics_UpdateState(self, CurrentSimNanos)

    def equationsOfMotion(self, integTimeSeconds):
        return _spacecraftDynamics.SpacecraftDynamics_equationsOfMotion(self, integTimeSeconds)

    def equationsOfMotionSC(self, integTimeSeconds, spacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_equationsOfMotionSC(self, integTimeSeconds, spacecraft)

    def equationsOfMotionSystem(self, integTimeSeconds):
        return _spacecraftDynamics.SpacecraftDynamics_equationsOfMotionSystem(self, integTimeSeconds)

    def findPriorStateInformation(self, spacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_findPriorStateInformation(self, spacecraft)

    def calculateDeltaVandAcceleration(self, spacecraft, localTimeStep):
        return _spacecraftDynamics.SpacecraftDynamics_calculateDeltaVandAcceleration(self, spacecraft, localTimeStep)

    def integrateState(self, time):
        return _spacecraftDynamics.SpacecraftDynamics_integrateState(self, time)

    def attachSpacecraftToPrimary(self, newSpacecraft, dockingPortNameOfNewSpacecraft, dockingToPortName):
        return _spacecraftDynamics.SpacecraftDynamics_attachSpacecraftToPrimary(self, newSpacecraft, dockingPortNameOfNewSpacecraft, dockingToPortName)

    def addSpacecraftUndocked(self, newSpacecraft):
        return _spacecraftDynamics.SpacecraftDynamics_addSpacecraftUndocked(self, newSpacecraft)

    def determineAttachedSCStates(self):
        return _spacecraftDynamics.SpacecraftDynamics_determineAttachedSCStates(self)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_SpacecraftDynamics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
SpacecraftDynamics_swigregister = _spacecraftDynamics.SpacecraftDynamics_swigregister
SpacecraftDynamics_swigregister(SpacecraftDynamics)

class HubEffector(StateEffector):
    __swig_setmethods__ = {}
    for _s in [StateEffector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HubEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [StateEffector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HubEffector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mHub"] = _spacecraftDynamics.HubEffector_mHub_set
    __swig_getmethods__["mHub"] = _spacecraftDynamics.HubEffector_mHub_get
    if _newclass:
        mHub = _swig_property(_spacecraftDynamics.HubEffector_mHub_get, _spacecraftDynamics.HubEffector_mHub_set)
    __swig_setmethods__["MRPSwitchCount"] = _spacecraftDynamics.HubEffector_MRPSwitchCount_set
    __swig_getmethods__["MRPSwitchCount"] = _spacecraftDynamics.HubEffector_MRPSwitchCount_get
    if _newclass:
        MRPSwitchCount = _swig_property(_spacecraftDynamics.HubEffector_MRPSwitchCount_get, _spacecraftDynamics.HubEffector_MRPSwitchCount_set)
    __swig_setmethods__["nameOfHubPosition"] = _spacecraftDynamics.HubEffector_nameOfHubPosition_set
    __swig_getmethods__["nameOfHubPosition"] = _spacecraftDynamics.HubEffector_nameOfHubPosition_get
    if _newclass:
        nameOfHubPosition = _swig_property(_spacecraftDynamics.HubEffector_nameOfHubPosition_get, _spacecraftDynamics.HubEffector_nameOfHubPosition_set)
    __swig_setmethods__["nameOfHubVelocity"] = _spacecraftDynamics.HubEffector_nameOfHubVelocity_set
    __swig_getmethods__["nameOfHubVelocity"] = _spacecraftDynamics.HubEffector_nameOfHubVelocity_get
    if _newclass:
        nameOfHubVelocity = _swig_property(_spacecraftDynamics.HubEffector_nameOfHubVelocity_get, _spacecraftDynamics.HubEffector_nameOfHubVelocity_set)
    __swig_setmethods__["nameOfHubSigma"] = _spacecraftDynamics.HubEffector_nameOfHubSigma_set
    __swig_getmethods__["nameOfHubSigma"] = _spacecraftDynamics.HubEffector_nameOfHubSigma_get
    if _newclass:
        nameOfHubSigma = _swig_property(_spacecraftDynamics.HubEffector_nameOfHubSigma_get, _spacecraftDynamics.HubEffector_nameOfHubSigma_set)
    __swig_setmethods__["nameOfHubOmega"] = _spacecraftDynamics.HubEffector_nameOfHubOmega_set
    __swig_getmethods__["nameOfHubOmega"] = _spacecraftDynamics.HubEffector_nameOfHubOmega_get
    if _newclass:
        nameOfHubOmega = _swig_property(_spacecraftDynamics.HubEffector_nameOfHubOmega_get, _spacecraftDynamics.HubEffector_nameOfHubOmega_set)
    __swig_setmethods__["r_BcB_B"] = _spacecraftDynamics.HubEffector_r_BcB_B_set
    __swig_getmethods__["r_BcB_B"] = _spacecraftDynamics.HubEffector_r_BcB_B_get
    if _newclass:
        r_BcB_B = _swig_property(_spacecraftDynamics.HubEffector_r_BcB_B_get, _spacecraftDynamics.HubEffector_r_BcB_B_set)
    __swig_setmethods__["IHubPntBc_B"] = _spacecraftDynamics.HubEffector_IHubPntBc_B_set
    __swig_getmethods__["IHubPntBc_B"] = _spacecraftDynamics.HubEffector_IHubPntBc_B_get
    if _newclass:
        IHubPntBc_B = _swig_property(_spacecraftDynamics.HubEffector_IHubPntBc_B_get, _spacecraftDynamics.HubEffector_IHubPntBc_B_set)
    __swig_setmethods__["hubBackSubMatrices"] = _spacecraftDynamics.HubEffector_hubBackSubMatrices_set
    __swig_getmethods__["hubBackSubMatrices"] = _spacecraftDynamics.HubEffector_hubBackSubMatrices_get
    if _newclass:
        hubBackSubMatrices = _swig_property(_spacecraftDynamics.HubEffector_hubBackSubMatrices_get, _spacecraftDynamics.HubEffector_hubBackSubMatrices_set)
    __swig_setmethods__["r_CN_NInit"] = _spacecraftDynamics.HubEffector_r_CN_NInit_set
    __swig_getmethods__["r_CN_NInit"] = _spacecraftDynamics.HubEffector_r_CN_NInit_get
    if _newclass:
        r_CN_NInit = _swig_property(_spacecraftDynamics.HubEffector_r_CN_NInit_get, _spacecraftDynamics.HubEffector_r_CN_NInit_set)
    __swig_setmethods__["v_CN_NInit"] = _spacecraftDynamics.HubEffector_v_CN_NInit_set
    __swig_getmethods__["v_CN_NInit"] = _spacecraftDynamics.HubEffector_v_CN_NInit_get
    if _newclass:
        v_CN_NInit = _swig_property(_spacecraftDynamics.HubEffector_v_CN_NInit_get, _spacecraftDynamics.HubEffector_v_CN_NInit_set)
    __swig_setmethods__["sigma_BNInit"] = _spacecraftDynamics.HubEffector_sigma_BNInit_set
    __swig_getmethods__["sigma_BNInit"] = _spacecraftDynamics.HubEffector_sigma_BNInit_get
    if _newclass:
        sigma_BNInit = _swig_property(_spacecraftDynamics.HubEffector_sigma_BNInit_get, _spacecraftDynamics.HubEffector_sigma_BNInit_set)
    __swig_setmethods__["omega_BN_BInit"] = _spacecraftDynamics.HubEffector_omega_BN_BInit_set
    __swig_getmethods__["omega_BN_BInit"] = _spacecraftDynamics.HubEffector_omega_BN_BInit_get
    if _newclass:
        omega_BN_BInit = _swig_property(_spacecraftDynamics.HubEffector_omega_BN_BInit_get, _spacecraftDynamics.HubEffector_omega_BN_BInit_set)
    __swig_destroy__ = _spacecraftDynamics.delete_HubEffector
    __del__ = lambda self: None

    def linkInStates(self, statesIn):
        return _spacecraftDynamics.HubEffector_linkInStates(self, statesIn)

    def registerStates(self, states):
        return _spacecraftDynamics.HubEffector_registerStates(self, states)

    def updateEffectorMassProps(self, integTime):
        return _spacecraftDynamics.HubEffector_updateEffectorMassProps(self, integTime)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _spacecraftDynamics.HubEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _spacecraftDynamics.HubEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _spacecraftDynamics.HubEffector_modifyStates(self, integTime)

    def prependSpacecraftNameToStates(self):
        return _spacecraftDynamics.HubEffector_prependSpacecraftNameToStates(self)

    def __init__(self, *args):
        this = _spacecraftDynamics.new_HubEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
HubEffector_swigregister = _spacecraftDynamics.HubEffector_swigregister
HubEffector_swigregister(HubEffector)


import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


