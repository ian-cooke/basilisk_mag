# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_thrusterDynamicEffector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_thrusterDynamicEffector')
    _thrusterDynamicEffector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_thrusterDynamicEffector', [dirname(__file__)])
        except ImportError:
            import _thrusterDynamicEffector
            return _thrusterDynamicEffector
        try:
            _mod = imp.load_module('_thrusterDynamicEffector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _thrusterDynamicEffector = swig_import_helper()
    del swig_import_helper
else:
    import _thrusterDynamicEffector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrusterDynamicEffector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _thrusterDynamicEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _thrusterDynamicEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _thrusterDynamicEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _thrusterDynamicEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _thrusterDynamicEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _thrusterDynamicEffector.SwigPyIterator_copy(self)

    def next(self):
        return _thrusterDynamicEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _thrusterDynamicEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _thrusterDynamicEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _thrusterDynamicEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _thrusterDynamicEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _thrusterDynamicEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _thrusterDynamicEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _thrusterDynamicEffector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _thrusterDynamicEffector.new_doubleArray(nelements)
new_doubleArray = _thrusterDynamicEffector.new_doubleArray

def delete_doubleArray(ary):
    return _thrusterDynamicEffector.delete_doubleArray(ary)
delete_doubleArray = _thrusterDynamicEffector.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _thrusterDynamicEffector.doubleArray_getitem(ary, index)
doubleArray_getitem = _thrusterDynamicEffector.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _thrusterDynamicEffector.doubleArray_setitem

def new_longArray(nelements):
    return _thrusterDynamicEffector.new_longArray(nelements)
new_longArray = _thrusterDynamicEffector.new_longArray

def delete_longArray(ary):
    return _thrusterDynamicEffector.delete_longArray(ary)
delete_longArray = _thrusterDynamicEffector.delete_longArray

def longArray_getitem(ary, index):
    return _thrusterDynamicEffector.longArray_getitem(ary, index)
longArray_getitem = _thrusterDynamicEffector.longArray_getitem

def longArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.longArray_setitem(ary, index, value)
longArray_setitem = _thrusterDynamicEffector.longArray_setitem

def new_intArray(nelements):
    return _thrusterDynamicEffector.new_intArray(nelements)
new_intArray = _thrusterDynamicEffector.new_intArray

def delete_intArray(ary):
    return _thrusterDynamicEffector.delete_intArray(ary)
delete_intArray = _thrusterDynamicEffector.delete_intArray

def intArray_getitem(ary, index):
    return _thrusterDynamicEffector.intArray_getitem(ary, index)
intArray_getitem = _thrusterDynamicEffector.intArray_getitem

def intArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.intArray_setitem(ary, index, value)
intArray_setitem = _thrusterDynamicEffector.intArray_setitem

def new_shortArray(nelements):
    return _thrusterDynamicEffector.new_shortArray(nelements)
new_shortArray = _thrusterDynamicEffector.new_shortArray

def delete_shortArray(ary):
    return _thrusterDynamicEffector.delete_shortArray(ary)
delete_shortArray = _thrusterDynamicEffector.delete_shortArray

def shortArray_getitem(ary, index):
    return _thrusterDynamicEffector.shortArray_getitem(ary, index)
shortArray_getitem = _thrusterDynamicEffector.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.shortArray_setitem(ary, index, value)
shortArray_setitem = _thrusterDynamicEffector.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _thrusterDynamicEffector.new_boolArray(nelements)
new_boolArray = _thrusterDynamicEffector.new_boolArray

def delete_boolArray(ary):
    return _thrusterDynamicEffector.delete_boolArray(ary)
delete_boolArray = _thrusterDynamicEffector.delete_boolArray

def boolArray_getitem(ary, index):
    return _thrusterDynamicEffector.boolArray_getitem(ary, index)
boolArray_getitem = _thrusterDynamicEffector.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.boolArray_setitem(ary, index, value)
boolArray_setitem = _thrusterDynamicEffector.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.IntVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.IntVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.IntVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.IntVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.IntVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.IntVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.IntVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.IntVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.IntVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.IntVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.IntVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.IntVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.IntVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.IntVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.IntVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.IntVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.IntVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.IntVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.IntVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.IntVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _thrusterDynamicEffector.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.DoubleVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.DoubleVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.DoubleVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.DoubleVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.DoubleVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.DoubleVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.DoubleVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.DoubleVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.DoubleVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.DoubleVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.DoubleVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.DoubleVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.DoubleVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.DoubleVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.DoubleVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.DoubleVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _thrusterDynamicEffector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.StringVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.StringVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.StringVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.StringVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.StringVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.StringVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.StringVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.StringVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.StringVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.StringVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.StringVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.StringVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.StringVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.StringVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.StringVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.StringVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.StringVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.StringVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.StringVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.StringVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _thrusterDynamicEffector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.StringSet___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.StringSet___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.StringSet___len__(self)

    def append(self, x):
        return _thrusterDynamicEffector.StringSet_append(self, x)

    def __contains__(self, x):
        return _thrusterDynamicEffector.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _thrusterDynamicEffector.StringSet___getitem__(self, i)

    def add(self, x):
        return _thrusterDynamicEffector.StringSet_add(self, x)

    def discard(self, x):
        return _thrusterDynamicEffector.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _thrusterDynamicEffector.StringSet_empty(self)

    def size(self):
        return _thrusterDynamicEffector.StringSet_size(self)

    def clear(self):
        return _thrusterDynamicEffector.StringSet_clear(self)

    def swap(self, v):
        return _thrusterDynamicEffector.StringSet_swap(self, v)

    def count(self, x):
        return _thrusterDynamicEffector.StringSet_count(self, x)

    def begin(self):
        return _thrusterDynamicEffector.StringSet_begin(self)

    def end(self):
        return _thrusterDynamicEffector.StringSet_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.StringSet_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.StringSet_rend(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.StringSet_erase(self, *args)

    def find(self, x):
        return _thrusterDynamicEffector.StringSet_find(self, x)

    def lower_bound(self, x):
        return _thrusterDynamicEffector.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _thrusterDynamicEffector.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _thrusterDynamicEffector.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _thrusterDynamicEffector.StringSet_insert(self, __x)
    __swig_destroy__ = _thrusterDynamicEffector.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _thrusterDynamicEffector.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.intSet___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.intSet___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.intSet___len__(self)

    def append(self, x):
        return _thrusterDynamicEffector.intSet_append(self, x)

    def __contains__(self, x):
        return _thrusterDynamicEffector.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _thrusterDynamicEffector.intSet___getitem__(self, i)

    def add(self, x):
        return _thrusterDynamicEffector.intSet_add(self, x)

    def discard(self, x):
        return _thrusterDynamicEffector.intSet_discard(self, x)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _thrusterDynamicEffector.intSet_empty(self)

    def size(self):
        return _thrusterDynamicEffector.intSet_size(self)

    def clear(self):
        return _thrusterDynamicEffector.intSet_clear(self)

    def swap(self, v):
        return _thrusterDynamicEffector.intSet_swap(self, v)

    def count(self, x):
        return _thrusterDynamicEffector.intSet_count(self, x)

    def begin(self):
        return _thrusterDynamicEffector.intSet_begin(self)

    def end(self):
        return _thrusterDynamicEffector.intSet_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.intSet_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.intSet_rend(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.intSet_erase(self, *args)

    def find(self, x):
        return _thrusterDynamicEffector.intSet_find(self, x)

    def lower_bound(self, x):
        return _thrusterDynamicEffector.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _thrusterDynamicEffector.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _thrusterDynamicEffector.intSet_equal_range(self, x)

    def insert(self, __x):
        return _thrusterDynamicEffector.intSet_insert(self, __x)
    __swig_destroy__ = _thrusterDynamicEffector.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _thrusterDynamicEffector.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.ConstCharVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.ConstCharVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.ConstCharVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.ConstCharVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.ConstCharVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.ConstCharVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.ConstCharVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.ConstCharVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.ConstCharVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.ConstCharVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.ConstCharVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.ConstCharVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.ConstCharVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.ConstCharVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.ConstCharVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _thrusterDynamicEffector.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.MultiArray___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.MultiArray___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.MultiArray___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.MultiArray_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.MultiArray_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.MultiArray_empty(self)

    def size(self):
        return _thrusterDynamicEffector.MultiArray_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.MultiArray_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.MultiArray_begin(self)

    def end(self):
        return _thrusterDynamicEffector.MultiArray_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.MultiArray_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.MultiArray_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.MultiArray_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.MultiArray_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.MultiArray_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.MultiArray_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.MultiArray_front(self)

    def back(self):
        return _thrusterDynamicEffector.MultiArray_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.MultiArray_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.MultiArray_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _thrusterDynamicEffector.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class ThrusterTimeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrusterTimeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThrusterTimeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterTimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterTimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.ThrusterTimeVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_ThrusterTimeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.ThrusterTimeVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterTimeVector
    __del__ = lambda self: None
ThrusterTimeVector_swigregister = _thrusterDynamicEffector.ThrusterTimeVector_swigregister
ThrusterTimeVector_swigregister(ThrusterTimeVector)

class ThrusterConfigVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrusterConfigVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThrusterConfigVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.ThrusterConfigVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_erase(self, *args)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_ThrusterConfigVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.ThrusterConfigVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterConfigVector
    __del__ = lambda self: None
ThrusterConfigVector_swigregister = _thrusterDynamicEffector.ThrusterConfigVector_swigregister
ThrusterConfigVector_swigregister(ThrusterConfigVector)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _thrusterDynamicEffector.SysModel_SelfInit(self)

    def CrossInit(self):
        return _thrusterDynamicEffector.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _thrusterDynamicEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _thrusterDynamicEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _thrusterDynamicEffector.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _thrusterDynamicEffector.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _thrusterDynamicEffector.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_thrusterDynamicEffector.SysModel_ModelTag_get, _thrusterDynamicEffector.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _thrusterDynamicEffector.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _thrusterDynamicEffector.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_thrusterDynamicEffector.SysModel_CallCounts_get, _thrusterDynamicEffector.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _thrusterDynamicEffector.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _thrusterDynamicEffector.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_thrusterDynamicEffector.SysModel_RNGSeed_get, _thrusterDynamicEffector.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _thrusterDynamicEffector.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _thrusterDynamicEffector.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_thrusterDynamicEffector.SysModel_moduleID_get, _thrusterDynamicEffector.SysModel_moduleID_set)
SysModel_swigregister = _thrusterDynamicEffector.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _thrusterDynamicEffector.StateData_state_set
    __swig_getmethods__["state"] = _thrusterDynamicEffector.StateData_state_get
    if _newclass:
        state = _swig_property(_thrusterDynamicEffector.StateData_state_get, _thrusterDynamicEffector.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _thrusterDynamicEffector.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _thrusterDynamicEffector.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_thrusterDynamicEffector.StateData_stateDeriv_get, _thrusterDynamicEffector.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _thrusterDynamicEffector.StateData_stateName_set
    __swig_getmethods__["stateName"] = _thrusterDynamicEffector.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_thrusterDynamicEffector.StateData_stateName_get, _thrusterDynamicEffector.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _thrusterDynamicEffector.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _thrusterDynamicEffector.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_thrusterDynamicEffector.StateData_stateEnabled_get, _thrusterDynamicEffector.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _thrusterDynamicEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _thrusterDynamicEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _thrusterDynamicEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _thrusterDynamicEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _thrusterDynamicEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _thrusterDynamicEffector.StateData_getName(self)

    def getRowSize(self):
        return _thrusterDynamicEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _thrusterDynamicEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _thrusterDynamicEffector.StateData_isStateActive(self)

    def disable(self):
        return _thrusterDynamicEffector.StateData_disable(self)

    def enable(self):
        return _thrusterDynamicEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _thrusterDynamicEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _thrusterDynamicEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _thrusterDynamicEffector.StateData___mul__(self, scaleFactor)
StateData_swigregister = _thrusterDynamicEffector.StateData_swigregister
StateData_swigregister(StateData)

class DynamicEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrusterDynamicEffector.delete_DynamicEffector
    __del__ = lambda self: None

    def computeStateContribution(self, integTime):
        return _thrusterDynamicEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _thrusterDynamicEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _thrusterDynamicEffector.DynamicEffector_computeForceTorque(self, integTime)
    __swig_setmethods__["stateDerivContribution"] = _thrusterDynamicEffector.DynamicEffector_stateDerivContribution_set
    __swig_getmethods__["stateDerivContribution"] = _thrusterDynamicEffector.DynamicEffector_stateDerivContribution_get
    if _newclass:
        stateDerivContribution = _swig_property(_thrusterDynamicEffector.DynamicEffector_stateDerivContribution_get, _thrusterDynamicEffector.DynamicEffector_stateDerivContribution_set)
    __swig_setmethods__["forceExternal_N"] = _thrusterDynamicEffector.DynamicEffector_forceExternal_N_set
    __swig_getmethods__["forceExternal_N"] = _thrusterDynamicEffector.DynamicEffector_forceExternal_N_get
    if _newclass:
        forceExternal_N = _swig_property(_thrusterDynamicEffector.DynamicEffector_forceExternal_N_get, _thrusterDynamicEffector.DynamicEffector_forceExternal_N_set)
    __swig_setmethods__["forceExternal_B"] = _thrusterDynamicEffector.DynamicEffector_forceExternal_B_set
    __swig_getmethods__["forceExternal_B"] = _thrusterDynamicEffector.DynamicEffector_forceExternal_B_get
    if _newclass:
        forceExternal_B = _swig_property(_thrusterDynamicEffector.DynamicEffector_forceExternal_B_get, _thrusterDynamicEffector.DynamicEffector_forceExternal_B_set)
    __swig_setmethods__["torqueExternalPntB_B"] = _thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_set
    __swig_getmethods__["torqueExternalPntB_B"] = _thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_get
    if _newclass:
        torqueExternalPntB_B = _swig_property(_thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_get, _thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_set)
DynamicEffector_swigregister = _thrusterDynamicEffector.DynamicEffector_swigregister
DynamicEffector_swigregister(DynamicEffector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _thrusterDynamicEffector.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _thrusterDynamicEffector.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_thrusterDynamicEffector.StateVector_stateMap_get, _thrusterDynamicEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _thrusterDynamicEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _thrusterDynamicEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _thrusterDynamicEffector.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _thrusterDynamicEffector.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _thrusterDynamicEffector.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_thrusterDynamicEffector.DynParamManager_dynProperties_get, _thrusterDynamicEffector.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _thrusterDynamicEffector.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _thrusterDynamicEffector.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_thrusterDynamicEffector.DynParamManager_stateContainer_get, _thrusterDynamicEffector.DynParamManager_stateContainer_set)
    __swig_destroy__ = _thrusterDynamicEffector.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _thrusterDynamicEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _thrusterDynamicEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _thrusterDynamicEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _thrusterDynamicEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _thrusterDynamicEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _thrusterDynamicEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _thrusterDynamicEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _thrusterDynamicEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _thrusterDynamicEffector.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class ThrusterDynamicEffector(SysModel, DynamicEffector):
    __swig_setmethods__ = {}
    for _s in [SysModel, DynamicEffector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrusterDynamicEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel, DynamicEffector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThrusterDynamicEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterDynamicEffector
    __del__ = lambda self: None

    def linkInStates(self, states):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_computeForceTorque(self, integTime)

    def computeStateContribution(self, integTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_computeStateContribution(self, integTime)

    def SelfInit(self):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_SelfInit(self)

    def CrossInit(self):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_CrossInit(self)

    def addThruster(self, newThruster):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_addThruster(self, newThruster)

    def UpdateState(self, CurrentSimNanos):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_UpdateState(self, CurrentSimNanos)

    def writeOutputMessages(self, CurrentClock):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_writeOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ReadInputs(self)

    def ConfigureThrustRequests(self, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ConfigureThrustRequests(self, currentTime)

    def ComputeThrusterFire(self, CurrentThruster, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ComputeThrusterFire(self, CurrentThruster, currentTime)

    def ComputeThrusterShut(self, CurrentThruster, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ComputeThrusterShut(self, CurrentThruster, currentTime)
    __swig_setmethods__["stepsInRamp"] = _thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_set
    __swig_getmethods__["stepsInRamp"] = _thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_get
    if _newclass:
        stepsInRamp = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_get, _thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_set)
    __swig_setmethods__["thrusterData"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_set
    __swig_getmethods__["thrusterData"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_get
    if _newclass:
        thrusterData = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_get, _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_set)
    __swig_setmethods__["InputCmds"] = _thrusterDynamicEffector.ThrusterDynamicEffector_InputCmds_set
    __swig_getmethods__["InputCmds"] = _thrusterDynamicEffector.ThrusterDynamicEffector_InputCmds_get
    if _newclass:
        InputCmds = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_InputCmds_get, _thrusterDynamicEffector.ThrusterDynamicEffector_InputCmds_set)
    __swig_setmethods__["inputProperties"] = _thrusterDynamicEffector.ThrusterDynamicEffector_inputProperties_set
    __swig_getmethods__["inputProperties"] = _thrusterDynamicEffector.ThrusterDynamicEffector_inputProperties_get
    if _newclass:
        inputProperties = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_inputProperties_get, _thrusterDynamicEffector.ThrusterDynamicEffector_inputProperties_set)
    __swig_setmethods__["thrusterOutMsgNameBufferCount"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNameBufferCount_set
    __swig_getmethods__["thrusterOutMsgNameBufferCount"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNameBufferCount_get
    if _newclass:
        thrusterOutMsgNameBufferCount = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNameBufferCount_get, _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNameBufferCount_set)
    __swig_setmethods__["thrusterOutMsgNames"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNames_set
    __swig_getmethods__["thrusterOutMsgNames"] = _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNames_get
    if _newclass:
        thrusterOutMsgNames = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNames_get, _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgNames_set)
    __swig_setmethods__["NewThrustCmds"] = _thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_set
    __swig_getmethods__["NewThrustCmds"] = _thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_get
    if _newclass:
        NewThrustCmds = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_get, _thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_set)
    __swig_setmethods__["mDotTotal"] = _thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_set
    __swig_getmethods__["mDotTotal"] = _thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_get
    if _newclass:
        mDotTotal = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_get, _thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_set)
    __swig_setmethods__["prevFireTime"] = _thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_set
    __swig_getmethods__["prevFireTime"] = _thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_get
    if _newclass:
        prevFireTime = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_get, _thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_set)

    def thrFactorToTime(self, thrData, thrRamp):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_thrFactorToTime(self, thrData, thrRamp)
    __swig_setmethods__["hubSigma"] = _thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_set
    __swig_getmethods__["hubSigma"] = _thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_get
    if _newclass:
        hubSigma = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_get, _thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_set)
    __swig_setmethods__["hubOmega"] = _thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_set
    __swig_getmethods__["hubOmega"] = _thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_get
    if _newclass:
        hubOmega = _swig_property(_thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_get, _thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_ThrusterDynamicEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ThrusterDynamicEffector_swigregister = _thrusterDynamicEffector.ThrusterDynamicEffector_swigregister
ThrusterDynamicEffector_swigregister(ThrusterDynamicEffector)

class THRTimePairSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRTimePairSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRTimePairSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ThrustFactor"] = _thrusterDynamicEffector.THRTimePairSimMsg_ThrustFactor_set
    __swig_getmethods__["ThrustFactor"] = _thrusterDynamicEffector.THRTimePairSimMsg_ThrustFactor_get
    if _newclass:
        ThrustFactor = _swig_property(_thrusterDynamicEffector.THRTimePairSimMsg_ThrustFactor_get, _thrusterDynamicEffector.THRTimePairSimMsg_ThrustFactor_set)
    __swig_setmethods__["IspFactor"] = _thrusterDynamicEffector.THRTimePairSimMsg_IspFactor_set
    __swig_getmethods__["IspFactor"] = _thrusterDynamicEffector.THRTimePairSimMsg_IspFactor_get
    if _newclass:
        IspFactor = _swig_property(_thrusterDynamicEffector.THRTimePairSimMsg_IspFactor_get, _thrusterDynamicEffector.THRTimePairSimMsg_IspFactor_set)
    __swig_setmethods__["TimeDelta"] = _thrusterDynamicEffector.THRTimePairSimMsg_TimeDelta_set
    __swig_getmethods__["TimeDelta"] = _thrusterDynamicEffector.THRTimePairSimMsg_TimeDelta_get
    if _newclass:
        TimeDelta = _swig_property(_thrusterDynamicEffector.THRTimePairSimMsg_TimeDelta_get, _thrusterDynamicEffector.THRTimePairSimMsg_TimeDelta_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_THRTimePairSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_THRTimePairSimMsg
    __del__ = lambda self: None
THRTimePairSimMsg_swigregister = _thrusterDynamicEffector.THRTimePairSimMsg_swigregister
THRTimePairSimMsg_swigregister(THRTimePairSimMsg)

class THRConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thrLoc_B"] = _thrusterDynamicEffector.THRConfigSimMsg_thrLoc_B_set
    __swig_getmethods__["thrLoc_B"] = _thrusterDynamicEffector.THRConfigSimMsg_thrLoc_B_get
    if _newclass:
        thrLoc_B = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_thrLoc_B_get, _thrusterDynamicEffector.THRConfigSimMsg_thrLoc_B_set)
    __swig_setmethods__["thrDir_B"] = _thrusterDynamicEffector.THRConfigSimMsg_thrDir_B_set
    __swig_getmethods__["thrDir_B"] = _thrusterDynamicEffector.THRConfigSimMsg_thrDir_B_get
    if _newclass:
        thrDir_B = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_thrDir_B_get, _thrusterDynamicEffector.THRConfigSimMsg_thrDir_B_set)
    __swig_setmethods__["ThrusterOnRamp"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOnRamp_set
    __swig_getmethods__["ThrusterOnRamp"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOnRamp_get
    if _newclass:
        ThrusterOnRamp = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_ThrusterOnRamp_get, _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOnRamp_set)
    __swig_setmethods__["ThrusterOffRamp"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOffRamp_set
    __swig_getmethods__["ThrusterOffRamp"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOffRamp_get
    if _newclass:
        ThrusterOffRamp = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_ThrusterOffRamp_get, _thrusterDynamicEffector.THRConfigSimMsg_ThrusterOffRamp_set)
    __swig_setmethods__["areaNozzle"] = _thrusterDynamicEffector.THRConfigSimMsg_areaNozzle_set
    __swig_getmethods__["areaNozzle"] = _thrusterDynamicEffector.THRConfigSimMsg_areaNozzle_get
    if _newclass:
        areaNozzle = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_areaNozzle_get, _thrusterDynamicEffector.THRConfigSimMsg_areaNozzle_set)
    __swig_setmethods__["MaxThrust"] = _thrusterDynamicEffector.THRConfigSimMsg_MaxThrust_set
    __swig_getmethods__["MaxThrust"] = _thrusterDynamicEffector.THRConfigSimMsg_MaxThrust_get
    if _newclass:
        MaxThrust = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_MaxThrust_get, _thrusterDynamicEffector.THRConfigSimMsg_MaxThrust_set)
    __swig_setmethods__["steadyIsp"] = _thrusterDynamicEffector.THRConfigSimMsg_steadyIsp_set
    __swig_getmethods__["steadyIsp"] = _thrusterDynamicEffector.THRConfigSimMsg_steadyIsp_get
    if _newclass:
        steadyIsp = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_steadyIsp_get, _thrusterDynamicEffector.THRConfigSimMsg_steadyIsp_set)
    __swig_setmethods__["MinOnTime"] = _thrusterDynamicEffector.THRConfigSimMsg_MinOnTime_set
    __swig_getmethods__["MinOnTime"] = _thrusterDynamicEffector.THRConfigSimMsg_MinOnTime_get
    if _newclass:
        MinOnTime = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_MinOnTime_get, _thrusterDynamicEffector.THRConfigSimMsg_MinOnTime_set)
    __swig_setmethods__["ThrustOps"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrustOps_set
    __swig_getmethods__["ThrustOps"] = _thrusterDynamicEffector.THRConfigSimMsg_ThrustOps_get
    if _newclass:
        ThrustOps = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_ThrustOps_get, _thrusterDynamicEffector.THRConfigSimMsg_ThrustOps_set)
    __swig_setmethods__["thrusterMagDisp"] = _thrusterDynamicEffector.THRConfigSimMsg_thrusterMagDisp_set
    __swig_getmethods__["thrusterMagDisp"] = _thrusterDynamicEffector.THRConfigSimMsg_thrusterMagDisp_get
    if _newclass:
        thrusterMagDisp = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_thrusterMagDisp_get, _thrusterDynamicEffector.THRConfigSimMsg_thrusterMagDisp_set)
    __swig_setmethods__["thrusterDirectionDisp"] = _thrusterDynamicEffector.THRConfigSimMsg_thrusterDirectionDisp_set
    __swig_getmethods__["thrusterDirectionDisp"] = _thrusterDynamicEffector.THRConfigSimMsg_thrusterDirectionDisp_get
    if _newclass:
        thrusterDirectionDisp = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_thrusterDirectionDisp_get, _thrusterDynamicEffector.THRConfigSimMsg_thrusterDirectionDisp_set)
    __swig_setmethods__["updateOnly"] = _thrusterDynamicEffector.THRConfigSimMsg_updateOnly_set
    __swig_getmethods__["updateOnly"] = _thrusterDynamicEffector.THRConfigSimMsg_updateOnly_get
    if _newclass:
        updateOnly = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_updateOnly_get, _thrusterDynamicEffector.THRConfigSimMsg_updateOnly_set)
    __swig_setmethods__["label"] = _thrusterDynamicEffector.THRConfigSimMsg_label_set
    __swig_getmethods__["label"] = _thrusterDynamicEffector.THRConfigSimMsg_label_get
    if _newclass:
        label = _swig_property(_thrusterDynamicEffector.THRConfigSimMsg_label_get, _thrusterDynamicEffector.THRConfigSimMsg_label_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_THRConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_THRConfigSimMsg
    __del__ = lambda self: None
THRConfigSimMsg_swigregister = _thrusterDynamicEffector.THRConfigSimMsg_swigregister
THRConfigSimMsg_swigregister(THRConfigSimMsg)

class THROperationSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THROperationSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THROperationSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fireCounter"] = _thrusterDynamicEffector.THROperationSimMsg_fireCounter_set
    __swig_getmethods__["fireCounter"] = _thrusterDynamicEffector.THROperationSimMsg_fireCounter_get
    if _newclass:
        fireCounter = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_fireCounter_get, _thrusterDynamicEffector.THROperationSimMsg_fireCounter_set)
    __swig_setmethods__["ThrustFactor"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustFactor_set
    __swig_getmethods__["ThrustFactor"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustFactor_get
    if _newclass:
        ThrustFactor = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrustFactor_get, _thrusterDynamicEffector.THROperationSimMsg_ThrustFactor_set)
    __swig_setmethods__["IspFactor"] = _thrusterDynamicEffector.THROperationSimMsg_IspFactor_set
    __swig_getmethods__["IspFactor"] = _thrusterDynamicEffector.THROperationSimMsg_IspFactor_get
    if _newclass:
        IspFactor = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_IspFactor_get, _thrusterDynamicEffector.THROperationSimMsg_IspFactor_set)
    __swig_setmethods__["ThrustOnRampTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnRampTime_set
    __swig_getmethods__["ThrustOnRampTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnRampTime_get
    if _newclass:
        ThrustOnRampTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrustOnRampTime_get, _thrusterDynamicEffector.THROperationSimMsg_ThrustOnRampTime_set)
    __swig_setmethods__["ThrustOnSteadyTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnSteadyTime_set
    __swig_getmethods__["ThrustOnSteadyTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnSteadyTime_get
    if _newclass:
        ThrustOnSteadyTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrustOnSteadyTime_get, _thrusterDynamicEffector.THROperationSimMsg_ThrustOnSteadyTime_set)
    __swig_setmethods__["ThrustOffRampTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOffRampTime_set
    __swig_getmethods__["ThrustOffRampTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOffRampTime_get
    if _newclass:
        ThrustOffRampTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrustOffRampTime_get, _thrusterDynamicEffector.THROperationSimMsg_ThrustOffRampTime_set)
    __swig_setmethods__["ThrusterStartTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrusterStartTime_set
    __swig_getmethods__["ThrusterStartTime"] = _thrusterDynamicEffector.THROperationSimMsg_ThrusterStartTime_get
    if _newclass:
        ThrusterStartTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrusterStartTime_get, _thrusterDynamicEffector.THROperationSimMsg_ThrusterStartTime_set)
    __swig_setmethods__["ThrustOnCmd"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnCmd_set
    __swig_getmethods__["ThrustOnCmd"] = _thrusterDynamicEffector.THROperationSimMsg_ThrustOnCmd_get
    if _newclass:
        ThrustOnCmd = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_ThrustOnCmd_get, _thrusterDynamicEffector.THROperationSimMsg_ThrustOnCmd_set)
    __swig_setmethods__["PreviousIterTime"] = _thrusterDynamicEffector.THROperationSimMsg_PreviousIterTime_set
    __swig_getmethods__["PreviousIterTime"] = _thrusterDynamicEffector.THROperationSimMsg_PreviousIterTime_get
    if _newclass:
        PreviousIterTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_PreviousIterTime_get, _thrusterDynamicEffector.THROperationSimMsg_PreviousIterTime_set)
    __swig_setmethods__["totalOnTime"] = _thrusterDynamicEffector.THROperationSimMsg_totalOnTime_set
    __swig_getmethods__["totalOnTime"] = _thrusterDynamicEffector.THROperationSimMsg_totalOnTime_get
    if _newclass:
        totalOnTime = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_totalOnTime_get, _thrusterDynamicEffector.THROperationSimMsg_totalOnTime_set)
    __swig_setmethods__["opThrustForce_B"] = _thrusterDynamicEffector.THROperationSimMsg_opThrustForce_B_set
    __swig_getmethods__["opThrustForce_B"] = _thrusterDynamicEffector.THROperationSimMsg_opThrustForce_B_get
    if _newclass:
        opThrustForce_B = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_opThrustForce_B_get, _thrusterDynamicEffector.THROperationSimMsg_opThrustForce_B_set)
    __swig_setmethods__["opThrustTorquePntB_B"] = _thrusterDynamicEffector.THROperationSimMsg_opThrustTorquePntB_B_set
    __swig_getmethods__["opThrustTorquePntB_B"] = _thrusterDynamicEffector.THROperationSimMsg_opThrustTorquePntB_B_get
    if _newclass:
        opThrustTorquePntB_B = _swig_property(_thrusterDynamicEffector.THROperationSimMsg_opThrustTorquePntB_B_get, _thrusterDynamicEffector.THROperationSimMsg_opThrustTorquePntB_B_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_THROperationSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_THROperationSimMsg
    __del__ = lambda self: None
THROperationSimMsg_swigregister = _thrusterDynamicEffector.THROperationSimMsg_swigregister
THROperationSimMsg_swigregister(THROperationSimMsg)

class THRArrayOnTimeCmdIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRArrayOnTimeCmdIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRArrayOnTimeCmdIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OnTimeRequest"] = _thrusterDynamicEffector.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set
    __swig_getmethods__["OnTimeRequest"] = _thrusterDynamicEffector.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get
    if _newclass:
        OnTimeRequest = _swig_property(_thrusterDynamicEffector.THRArrayOnTimeCmdIntMsg_OnTimeRequest_get, _thrusterDynamicEffector.THRArrayOnTimeCmdIntMsg_OnTimeRequest_set)

    def __init__(self, *args):
        this = _thrusterDynamicEffector.new_THRArrayOnTimeCmdIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _thrusterDynamicEffector.delete_THRArrayOnTimeCmdIntMsg
    __del__ = lambda self: None
THRArrayOnTimeCmdIntMsg_swigregister = _thrusterDynamicEffector.THRArrayOnTimeCmdIntMsg_swigregister
THRArrayOnTimeCmdIntMsg_swigregister(THRArrayOnTimeCmdIntMsg)

sizeof_THRTimePairSimMsg = _thrusterDynamicEffector.sizeof_THRTimePairSimMsg
sizeof_THRConfigSimMsg = _thrusterDynamicEffector.sizeof_THRConfigSimMsg
sizeof_THROperationSimMsg = _thrusterDynamicEffector.sizeof_THROperationSimMsg
sizeof_THRArrayOnTimeCmdIntMsg = _thrusterDynamicEffector.sizeof_THRArrayOnTimeCmdIntMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


