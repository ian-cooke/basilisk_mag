# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_reactionWheelStateEffector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_reactionWheelStateEffector')
    _reactionWheelStateEffector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_reactionWheelStateEffector', [dirname(__file__)])
        except ImportError:
            import _reactionWheelStateEffector
            return _reactionWheelStateEffector
        try:
            _mod = imp.load_module('_reactionWheelStateEffector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _reactionWheelStateEffector = swig_import_helper()
    del swig_import_helper
else:
    import _reactionWheelStateEffector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reactionWheelStateEffector.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _reactionWheelStateEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _reactionWheelStateEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _reactionWheelStateEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _reactionWheelStateEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _reactionWheelStateEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _reactionWheelStateEffector.SwigPyIterator_copy(self)

    def next(self):
        return _reactionWheelStateEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _reactionWheelStateEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _reactionWheelStateEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _reactionWheelStateEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _reactionWheelStateEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _reactionWheelStateEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _reactionWheelStateEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _reactionWheelStateEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _reactionWheelStateEffector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_doubleArray(nelements):
    return _reactionWheelStateEffector.new_doubleArray(nelements)
new_doubleArray = _reactionWheelStateEffector.new_doubleArray

def delete_doubleArray(ary):
    return _reactionWheelStateEffector.delete_doubleArray(ary)
delete_doubleArray = _reactionWheelStateEffector.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _reactionWheelStateEffector.doubleArray_getitem(ary, index)
doubleArray_getitem = _reactionWheelStateEffector.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _reactionWheelStateEffector.doubleArray_setitem

def new_longArray(nelements):
    return _reactionWheelStateEffector.new_longArray(nelements)
new_longArray = _reactionWheelStateEffector.new_longArray

def delete_longArray(ary):
    return _reactionWheelStateEffector.delete_longArray(ary)
delete_longArray = _reactionWheelStateEffector.delete_longArray

def longArray_getitem(ary, index):
    return _reactionWheelStateEffector.longArray_getitem(ary, index)
longArray_getitem = _reactionWheelStateEffector.longArray_getitem

def longArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.longArray_setitem(ary, index, value)
longArray_setitem = _reactionWheelStateEffector.longArray_setitem

def new_intArray(nelements):
    return _reactionWheelStateEffector.new_intArray(nelements)
new_intArray = _reactionWheelStateEffector.new_intArray

def delete_intArray(ary):
    return _reactionWheelStateEffector.delete_intArray(ary)
delete_intArray = _reactionWheelStateEffector.delete_intArray

def intArray_getitem(ary, index):
    return _reactionWheelStateEffector.intArray_getitem(ary, index)
intArray_getitem = _reactionWheelStateEffector.intArray_getitem

def intArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.intArray_setitem(ary, index, value)
intArray_setitem = _reactionWheelStateEffector.intArray_setitem

def new_shortArray(nelements):
    return _reactionWheelStateEffector.new_shortArray(nelements)
new_shortArray = _reactionWheelStateEffector.new_shortArray

def delete_shortArray(ary):
    return _reactionWheelStateEffector.delete_shortArray(ary)
delete_shortArray = _reactionWheelStateEffector.delete_shortArray

def shortArray_getitem(ary, index):
    return _reactionWheelStateEffector.shortArray_getitem(ary, index)
shortArray_getitem = _reactionWheelStateEffector.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.shortArray_setitem(ary, index, value)
shortArray_setitem = _reactionWheelStateEffector.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass



def new_boolArray(nelements):
    return _reactionWheelStateEffector.new_boolArray(nelements)
new_boolArray = _reactionWheelStateEffector.new_boolArray

def delete_boolArray(ary):
    return _reactionWheelStateEffector.delete_boolArray(ary)
delete_boolArray = _reactionWheelStateEffector.delete_boolArray

def boolArray_getitem(ary, index):
    return _reactionWheelStateEffector.boolArray_getitem(ary, index)
boolArray_getitem = _reactionWheelStateEffector.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _reactionWheelStateEffector.boolArray_setitem(ary, index, value)
boolArray_setitem = _reactionWheelStateEffector.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.IntVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.IntVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.IntVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.IntVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.IntVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.IntVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.IntVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.IntVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.IntVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.IntVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.IntVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.IntVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.IntVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.IntVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.IntVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.IntVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.IntVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.IntVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.IntVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.IntVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.IntVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.IntVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _reactionWheelStateEffector.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.DoubleVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.DoubleVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.DoubleVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.DoubleVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.DoubleVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.DoubleVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.DoubleVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.DoubleVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.DoubleVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.DoubleVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.DoubleVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.DoubleVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.DoubleVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.DoubleVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.DoubleVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.DoubleVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _reactionWheelStateEffector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.StringVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.StringVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.StringVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.StringVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.StringVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.StringVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.StringVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.StringVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.StringVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.StringVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.StringVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.StringVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.StringVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.StringVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.StringVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.StringVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.StringVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.StringVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.StringVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.StringVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.StringVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.StringVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _reactionWheelStateEffector.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.StringSet___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.StringSet___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.StringSet___len__(self)

    def append(self, x):
        return _reactionWheelStateEffector.StringSet_append(self, x)

    def __contains__(self, x):
        return _reactionWheelStateEffector.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _reactionWheelStateEffector.StringSet___getitem__(self, i)

    def add(self, x):
        return _reactionWheelStateEffector.StringSet_add(self, x)

    def discard(self, x):
        return _reactionWheelStateEffector.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _reactionWheelStateEffector.StringSet_empty(self)

    def size(self):
        return _reactionWheelStateEffector.StringSet_size(self)

    def clear(self):
        return _reactionWheelStateEffector.StringSet_clear(self)

    def swap(self, v):
        return _reactionWheelStateEffector.StringSet_swap(self, v)

    def count(self, x):
        return _reactionWheelStateEffector.StringSet_count(self, x)

    def begin(self):
        return _reactionWheelStateEffector.StringSet_begin(self)

    def end(self):
        return _reactionWheelStateEffector.StringSet_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.StringSet_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.StringSet_rend(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.StringSet_erase(self, *args)

    def find(self, x):
        return _reactionWheelStateEffector.StringSet_find(self, x)

    def lower_bound(self, x):
        return _reactionWheelStateEffector.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _reactionWheelStateEffector.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _reactionWheelStateEffector.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _reactionWheelStateEffector.StringSet_insert(self, __x)
    __swig_destroy__ = _reactionWheelStateEffector.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _reactionWheelStateEffector.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.intSet___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.intSet___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.intSet___len__(self)

    def append(self, x):
        return _reactionWheelStateEffector.intSet_append(self, x)

    def __contains__(self, x):
        return _reactionWheelStateEffector.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _reactionWheelStateEffector.intSet___getitem__(self, i)

    def add(self, x):
        return _reactionWheelStateEffector.intSet_add(self, x)

    def discard(self, x):
        return _reactionWheelStateEffector.intSet_discard(self, x)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _reactionWheelStateEffector.intSet_empty(self)

    def size(self):
        return _reactionWheelStateEffector.intSet_size(self)

    def clear(self):
        return _reactionWheelStateEffector.intSet_clear(self)

    def swap(self, v):
        return _reactionWheelStateEffector.intSet_swap(self, v)

    def count(self, x):
        return _reactionWheelStateEffector.intSet_count(self, x)

    def begin(self):
        return _reactionWheelStateEffector.intSet_begin(self)

    def end(self):
        return _reactionWheelStateEffector.intSet_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.intSet_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.intSet_rend(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.intSet_erase(self, *args)

    def find(self, x):
        return _reactionWheelStateEffector.intSet_find(self, x)

    def lower_bound(self, x):
        return _reactionWheelStateEffector.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _reactionWheelStateEffector.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _reactionWheelStateEffector.intSet_equal_range(self, x)

    def insert(self, __x):
        return _reactionWheelStateEffector.intSet_insert(self, __x)
    __swig_destroy__ = _reactionWheelStateEffector.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _reactionWheelStateEffector.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.ConstCharVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.ConstCharVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.ConstCharVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.ConstCharVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.ConstCharVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.ConstCharVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.ConstCharVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.ConstCharVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.ConstCharVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.ConstCharVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.ConstCharVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.ConstCharVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.ConstCharVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.ConstCharVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.ConstCharVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _reactionWheelStateEffector.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.MultiArray___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.MultiArray___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.MultiArray___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.MultiArray_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.MultiArray_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.MultiArray_empty(self)

    def size(self):
        return _reactionWheelStateEffector.MultiArray_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.MultiArray_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.MultiArray_begin(self)

    def end(self):
        return _reactionWheelStateEffector.MultiArray_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.MultiArray_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.MultiArray_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.MultiArray_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.MultiArray_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.MultiArray_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.MultiArray_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.MultiArray_front(self)

    def back(self):
        return _reactionWheelStateEffector.MultiArray_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.MultiArray_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.MultiArray_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _reactionWheelStateEffector.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class SysModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_SysModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_SysModel
    __del__ = lambda self: None

    def SelfInit(self):
        return _reactionWheelStateEffector.SysModel_SelfInit(self)

    def CrossInit(self):
        return _reactionWheelStateEffector.SysModel_CrossInit(self)

    def IntegratedInit(self):
        return _reactionWheelStateEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _reactionWheelStateEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _reactionWheelStateEffector.SysModel_Reset(self, CurrentSimNanos)
    __swig_setmethods__["ModelTag"] = _reactionWheelStateEffector.SysModel_ModelTag_set
    __swig_getmethods__["ModelTag"] = _reactionWheelStateEffector.SysModel_ModelTag_get
    if _newclass:
        ModelTag = _swig_property(_reactionWheelStateEffector.SysModel_ModelTag_get, _reactionWheelStateEffector.SysModel_ModelTag_set)
    __swig_setmethods__["CallCounts"] = _reactionWheelStateEffector.SysModel_CallCounts_set
    __swig_getmethods__["CallCounts"] = _reactionWheelStateEffector.SysModel_CallCounts_get
    if _newclass:
        CallCounts = _swig_property(_reactionWheelStateEffector.SysModel_CallCounts_get, _reactionWheelStateEffector.SysModel_CallCounts_set)
    __swig_setmethods__["RNGSeed"] = _reactionWheelStateEffector.SysModel_RNGSeed_set
    __swig_getmethods__["RNGSeed"] = _reactionWheelStateEffector.SysModel_RNGSeed_get
    if _newclass:
        RNGSeed = _swig_property(_reactionWheelStateEffector.SysModel_RNGSeed_get, _reactionWheelStateEffector.SysModel_RNGSeed_set)
    __swig_setmethods__["moduleID"] = _reactionWheelStateEffector.SysModel_moduleID_set
    __swig_getmethods__["moduleID"] = _reactionWheelStateEffector.SysModel_moduleID_get
    if _newclass:
        moduleID = _swig_property(_reactionWheelStateEffector.SysModel_moduleID_get, _reactionWheelStateEffector.SysModel_moduleID_set)
SysModel_swigregister = _reactionWheelStateEffector.SysModel_swigregister
SysModel_swigregister(SysModel)

class StateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _reactionWheelStateEffector.StateData_state_set
    __swig_getmethods__["state"] = _reactionWheelStateEffector.StateData_state_get
    if _newclass:
        state = _swig_property(_reactionWheelStateEffector.StateData_state_get, _reactionWheelStateEffector.StateData_state_set)
    __swig_setmethods__["stateDeriv"] = _reactionWheelStateEffector.StateData_stateDeriv_set
    __swig_getmethods__["stateDeriv"] = _reactionWheelStateEffector.StateData_stateDeriv_get
    if _newclass:
        stateDeriv = _swig_property(_reactionWheelStateEffector.StateData_stateDeriv_get, _reactionWheelStateEffector.StateData_stateDeriv_set)
    __swig_setmethods__["stateName"] = _reactionWheelStateEffector.StateData_stateName_set
    __swig_getmethods__["stateName"] = _reactionWheelStateEffector.StateData_stateName_get
    if _newclass:
        stateName = _swig_property(_reactionWheelStateEffector.StateData_stateName_get, _reactionWheelStateEffector.StateData_stateName_set)
    __swig_setmethods__["stateEnabled"] = _reactionWheelStateEffector.StateData_stateEnabled_set
    __swig_getmethods__["stateEnabled"] = _reactionWheelStateEffector.StateData_stateEnabled_get
    if _newclass:
        stateEnabled = _swig_property(_reactionWheelStateEffector.StateData_stateEnabled_get, _reactionWheelStateEffector.StateData_stateEnabled_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_StateData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateData
    __del__ = lambda self: None

    def setState(self, newState):
        return _reactionWheelStateEffector.StateData_setState(self, newState)

    def propagateState(self, dt):
        return _reactionWheelStateEffector.StateData_propagateState(self, dt)

    def setDerivative(self, newDeriv):
        return _reactionWheelStateEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _reactionWheelStateEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _reactionWheelStateEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _reactionWheelStateEffector.StateData_getName(self)

    def getRowSize(self):
        return _reactionWheelStateEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _reactionWheelStateEffector.StateData_getColumnSize(self)

    def isStateActive(self):
        return _reactionWheelStateEffector.StateData_isStateActive(self)

    def disable(self):
        return _reactionWheelStateEffector.StateData_disable(self)

    def enable(self):
        return _reactionWheelStateEffector.StateData_enable(self)

    def scaleState(self, scaleFactor):
        return _reactionWheelStateEffector.StateData_scaleState(self, scaleFactor)

    def __add__(self, operand):
        return _reactionWheelStateEffector.StateData___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _reactionWheelStateEffector.StateData___mul__(self, scaleFactor)
StateData_swigregister = _reactionWheelStateEffector.StateData_swigregister
StateData_swigregister(StateData)

class BackSubMatrices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackSubMatrices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackSubMatrices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrixA"] = _reactionWheelStateEffector.BackSubMatrices_matrixA_set
    __swig_getmethods__["matrixA"] = _reactionWheelStateEffector.BackSubMatrices_matrixA_get
    if _newclass:
        matrixA = _swig_property(_reactionWheelStateEffector.BackSubMatrices_matrixA_get, _reactionWheelStateEffector.BackSubMatrices_matrixA_set)
    __swig_setmethods__["matrixB"] = _reactionWheelStateEffector.BackSubMatrices_matrixB_set
    __swig_getmethods__["matrixB"] = _reactionWheelStateEffector.BackSubMatrices_matrixB_get
    if _newclass:
        matrixB = _swig_property(_reactionWheelStateEffector.BackSubMatrices_matrixB_get, _reactionWheelStateEffector.BackSubMatrices_matrixB_set)
    __swig_setmethods__["matrixC"] = _reactionWheelStateEffector.BackSubMatrices_matrixC_set
    __swig_getmethods__["matrixC"] = _reactionWheelStateEffector.BackSubMatrices_matrixC_get
    if _newclass:
        matrixC = _swig_property(_reactionWheelStateEffector.BackSubMatrices_matrixC_get, _reactionWheelStateEffector.BackSubMatrices_matrixC_set)
    __swig_setmethods__["matrixD"] = _reactionWheelStateEffector.BackSubMatrices_matrixD_set
    __swig_getmethods__["matrixD"] = _reactionWheelStateEffector.BackSubMatrices_matrixD_get
    if _newclass:
        matrixD = _swig_property(_reactionWheelStateEffector.BackSubMatrices_matrixD_get, _reactionWheelStateEffector.BackSubMatrices_matrixD_set)
    __swig_setmethods__["vecTrans"] = _reactionWheelStateEffector.BackSubMatrices_vecTrans_set
    __swig_getmethods__["vecTrans"] = _reactionWheelStateEffector.BackSubMatrices_vecTrans_get
    if _newclass:
        vecTrans = _swig_property(_reactionWheelStateEffector.BackSubMatrices_vecTrans_get, _reactionWheelStateEffector.BackSubMatrices_vecTrans_set)
    __swig_setmethods__["vecRot"] = _reactionWheelStateEffector.BackSubMatrices_vecRot_set
    __swig_getmethods__["vecRot"] = _reactionWheelStateEffector.BackSubMatrices_vecRot_get
    if _newclass:
        vecRot = _swig_property(_reactionWheelStateEffector.BackSubMatrices_vecRot_get, _reactionWheelStateEffector.BackSubMatrices_vecRot_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_BackSubMatrices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_BackSubMatrices
    __del__ = lambda self: None
BackSubMatrices_swigregister = _reactionWheelStateEffector.BackSubMatrices_swigregister
BackSubMatrices_swigregister(BackSubMatrices)

class EffectorMassProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectorMassProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffectorMassProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mEff"] = _reactionWheelStateEffector.EffectorMassProps_mEff_set
    __swig_getmethods__["mEff"] = _reactionWheelStateEffector.EffectorMassProps_mEff_get
    if _newclass:
        mEff = _swig_property(_reactionWheelStateEffector.EffectorMassProps_mEff_get, _reactionWheelStateEffector.EffectorMassProps_mEff_set)
    __swig_setmethods__["mEffDot"] = _reactionWheelStateEffector.EffectorMassProps_mEffDot_set
    __swig_getmethods__["mEffDot"] = _reactionWheelStateEffector.EffectorMassProps_mEffDot_get
    if _newclass:
        mEffDot = _swig_property(_reactionWheelStateEffector.EffectorMassProps_mEffDot_get, _reactionWheelStateEffector.EffectorMassProps_mEffDot_set)
    __swig_setmethods__["IEffPntB_B"] = _reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_set
    __swig_getmethods__["IEffPntB_B"] = _reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_get
    if _newclass:
        IEffPntB_B = _swig_property(_reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_get, _reactionWheelStateEffector.EffectorMassProps_IEffPntB_B_set)
    __swig_setmethods__["rEff_CB_B"] = _reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_set
    __swig_getmethods__["rEff_CB_B"] = _reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_get
    if _newclass:
        rEff_CB_B = _swig_property(_reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_get, _reactionWheelStateEffector.EffectorMassProps_rEff_CB_B_set)
    __swig_setmethods__["rEffPrime_CB_B"] = _reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_set
    __swig_getmethods__["rEffPrime_CB_B"] = _reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_get
    if _newclass:
        rEffPrime_CB_B = _swig_property(_reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_get, _reactionWheelStateEffector.EffectorMassProps_rEffPrime_CB_B_set)
    __swig_setmethods__["IEffPrimePntB_B"] = _reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_set
    __swig_getmethods__["IEffPrimePntB_B"] = _reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_get
    if _newclass:
        IEffPrimePntB_B = _swig_property(_reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_get, _reactionWheelStateEffector.EffectorMassProps_IEffPrimePntB_B_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_EffectorMassProps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_EffectorMassProps
    __del__ = lambda self: None
EffectorMassProps_swigregister = _reactionWheelStateEffector.EffectorMassProps_swigregister
EffectorMassProps_swigregister(EffectorMassProps)

class StateEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["nameOfSpacecraftAttachedTo"] = _reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set
    __swig_getmethods__["nameOfSpacecraftAttachedTo"] = _reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get
    if _newclass:
        nameOfSpacecraftAttachedTo = _swig_property(_reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_get, _reactionWheelStateEffector.StateEffector_nameOfSpacecraftAttachedTo_set)
    __swig_setmethods__["effProps"] = _reactionWheelStateEffector.StateEffector_effProps_set
    __swig_getmethods__["effProps"] = _reactionWheelStateEffector.StateEffector_effProps_get
    if _newclass:
        effProps = _swig_property(_reactionWheelStateEffector.StateEffector_effProps_get, _reactionWheelStateEffector.StateEffector_effProps_set)
    __swig_setmethods__["forceOnBody_B"] = _reactionWheelStateEffector.StateEffector_forceOnBody_B_set
    __swig_getmethods__["forceOnBody_B"] = _reactionWheelStateEffector.StateEffector_forceOnBody_B_get
    if _newclass:
        forceOnBody_B = _swig_property(_reactionWheelStateEffector.StateEffector_forceOnBody_B_get, _reactionWheelStateEffector.StateEffector_forceOnBody_B_set)
    __swig_setmethods__["torqueOnBodyPntB_B"] = _reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_set
    __swig_getmethods__["torqueOnBodyPntB_B"] = _reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_get
    if _newclass:
        torqueOnBodyPntB_B = _swig_property(_reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_get, _reactionWheelStateEffector.StateEffector_torqueOnBodyPntB_B_set)
    __swig_setmethods__["torqueOnBodyPntC_B"] = _reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_set
    __swig_getmethods__["torqueOnBodyPntC_B"] = _reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_get
    if _newclass:
        torqueOnBodyPntC_B = _swig_property(_reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_get, _reactionWheelStateEffector.StateEffector_torqueOnBodyPntC_B_set)
    __swig_setmethods__["r_BP_P"] = _reactionWheelStateEffector.StateEffector_r_BP_P_set
    __swig_getmethods__["r_BP_P"] = _reactionWheelStateEffector.StateEffector_r_BP_P_get
    if _newclass:
        r_BP_P = _swig_property(_reactionWheelStateEffector.StateEffector_r_BP_P_get, _reactionWheelStateEffector.StateEffector_r_BP_P_set)
    __swig_setmethods__["dcm_BP"] = _reactionWheelStateEffector.StateEffector_dcm_BP_set
    __swig_getmethods__["dcm_BP"] = _reactionWheelStateEffector.StateEffector_dcm_BP_get
    if _newclass:
        dcm_BP = _swig_property(_reactionWheelStateEffector.StateEffector_dcm_BP_get, _reactionWheelStateEffector.StateEffector_dcm_BP_set)
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateEffector
    __del__ = lambda self: None

    def updateEffectorMassProps(self, integTime):
        return _reactionWheelStateEffector.StateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _reactionWheelStateEffector.StateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _reactionWheelStateEffector.StateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def modifyStates(self, integTime):
        return _reactionWheelStateEffector.StateEffector_modifyStates(self, integTime)

    def calcForceTorqueOnBody(self, integTime, omega_BN_B):
        return _reactionWheelStateEffector.StateEffector_calcForceTorqueOnBody(self, integTime, omega_BN_B)

    def writeOutputStateMessages(self, integTimeNanos):
        return _reactionWheelStateEffector.StateEffector_writeOutputStateMessages(self, integTimeNanos)

    def registerStates(self, states):
        return _reactionWheelStateEffector.StateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.StateEffector_linkInStates(self, states)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _reactionWheelStateEffector.StateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def prependSpacecraftNameToStates(self):
        return _reactionWheelStateEffector.StateEffector_prependSpacecraftNameToStates(self)

    def receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP):
        return _reactionWheelStateEffector.StateEffector_receiveMotherSpacecraftData(self, rSC_BP_P, dcmSC_BP)
StateEffector_swigregister = _reactionWheelStateEffector.StateEffector_swigregister
StateEffector_swigregister(StateEffector)

class DynamicEffector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicEffector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicEffector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynamicEffector
    __del__ = lambda self: None

    def computeStateContribution(self, integTime):
        return _reactionWheelStateEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime):
        return _reactionWheelStateEffector.DynamicEffector_computeForceTorque(self, integTime)
    __swig_setmethods__["stateDerivContribution"] = _reactionWheelStateEffector.DynamicEffector_stateDerivContribution_set
    __swig_getmethods__["stateDerivContribution"] = _reactionWheelStateEffector.DynamicEffector_stateDerivContribution_get
    if _newclass:
        stateDerivContribution = _swig_property(_reactionWheelStateEffector.DynamicEffector_stateDerivContribution_get, _reactionWheelStateEffector.DynamicEffector_stateDerivContribution_set)
    __swig_setmethods__["forceExternal_N"] = _reactionWheelStateEffector.DynamicEffector_forceExternal_N_set
    __swig_getmethods__["forceExternal_N"] = _reactionWheelStateEffector.DynamicEffector_forceExternal_N_get
    if _newclass:
        forceExternal_N = _swig_property(_reactionWheelStateEffector.DynamicEffector_forceExternal_N_get, _reactionWheelStateEffector.DynamicEffector_forceExternal_N_set)
    __swig_setmethods__["forceExternal_B"] = _reactionWheelStateEffector.DynamicEffector_forceExternal_B_set
    __swig_getmethods__["forceExternal_B"] = _reactionWheelStateEffector.DynamicEffector_forceExternal_B_get
    if _newclass:
        forceExternal_B = _swig_property(_reactionWheelStateEffector.DynamicEffector_forceExternal_B_get, _reactionWheelStateEffector.DynamicEffector_forceExternal_B_set)
    __swig_setmethods__["torqueExternalPntB_B"] = _reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_set
    __swig_getmethods__["torqueExternalPntB_B"] = _reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_get
    if _newclass:
        torqueExternalPntB_B = _swig_property(_reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_get, _reactionWheelStateEffector.DynamicEffector_torqueExternalPntB_B_set)
DynamicEffector_swigregister = _reactionWheelStateEffector.DynamicEffector_swigregister
DynamicEffector_swigregister(DynamicEffector)

class StateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateMap"] = _reactionWheelStateEffector.StateVector_stateMap_set
    __swig_getmethods__["stateMap"] = _reactionWheelStateEffector.StateVector_stateMap_get
    if _newclass:
        stateMap = _swig_property(_reactionWheelStateEffector.StateVector_stateMap_get, _reactionWheelStateEffector.StateVector_stateMap_set)

    def __add__(self, operand):
        return _reactionWheelStateEffector.StateVector___add__(self, operand)

    def __mul__(self, scaleFactor):
        return _reactionWheelStateEffector.StateVector___mul__(self, scaleFactor)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_StateVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_StateVector
    __del__ = lambda self: None
StateVector_swigregister = _reactionWheelStateEffector.StateVector_swigregister
StateVector_swigregister(StateVector)

class DynParamManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynParamManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DynParamManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dynProperties"] = _reactionWheelStateEffector.DynParamManager_dynProperties_set
    __swig_getmethods__["dynProperties"] = _reactionWheelStateEffector.DynParamManager_dynProperties_get
    if _newclass:
        dynProperties = _swig_property(_reactionWheelStateEffector.DynParamManager_dynProperties_get, _reactionWheelStateEffector.DynParamManager_dynProperties_set)
    __swig_setmethods__["stateContainer"] = _reactionWheelStateEffector.DynParamManager_stateContainer_set
    __swig_getmethods__["stateContainer"] = _reactionWheelStateEffector.DynParamManager_stateContainer_get
    if _newclass:
        stateContainer = _swig_property(_reactionWheelStateEffector.DynParamManager_stateContainer_get, _reactionWheelStateEffector.DynParamManager_stateContainer_set)
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynParamManager
    __del__ = lambda self: None

    def registerState(self, nRow, nCol, stateName):
        return _reactionWheelStateEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def getStateObject(self, stateName):
        return _reactionWheelStateEffector.DynParamManager_getStateObject(self, stateName)

    def getStateVector(self):
        return _reactionWheelStateEffector.DynParamManager_getStateVector(self)

    def updateStateVector(self, newState):
        return _reactionWheelStateEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _reactionWheelStateEffector.DynParamManager_propagateStateVector(self, dt)

    def createProperty(self, propName, propValue):
        return _reactionWheelStateEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _reactionWheelStateEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _reactionWheelStateEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_DynParamManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DynParamManager_swigregister = _reactionWheelStateEffector.DynParamManager_swigregister
DynParamManager_swigregister(DynParamManager)

class DynamicObject(SysModel):
    __swig_setmethods__ = {}
    for _s in [SysModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["dynManager"] = _reactionWheelStateEffector.DynamicObject_dynManager_set
    __swig_getmethods__["dynManager"] = _reactionWheelStateEffector.DynamicObject_dynManager_get
    if _newclass:
        dynManager = _swig_property(_reactionWheelStateEffector.DynamicObject_dynManager_get, _reactionWheelStateEffector.DynamicObject_dynManager_set)
    __swig_setmethods__["integrator"] = _reactionWheelStateEffector.DynamicObject_integrator_set
    __swig_getmethods__["integrator"] = _reactionWheelStateEffector.DynamicObject_integrator_get
    if _newclass:
        integrator = _swig_property(_reactionWheelStateEffector.DynamicObject_integrator_get, _reactionWheelStateEffector.DynamicObject_integrator_set)
    __swig_destroy__ = _reactionWheelStateEffector.delete_DynamicObject
    __del__ = lambda self: None

    def initializeDynamics(self):
        return _reactionWheelStateEffector.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _reactionWheelStateEffector.DynamicObject_computeEnergyMomentum(self, t)

    def UpdateState(self, callTime):
        return _reactionWheelStateEffector.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t):
        return _reactionWheelStateEffector.DynamicObject_equationsOfMotion(self, t)

    def integrateState(self, t):
        return _reactionWheelStateEffector.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _reactionWheelStateEffector.DynamicObject_setIntegrator(self, newIntegrator)
DynamicObject_swigregister = _reactionWheelStateEffector.DynamicObject_swigregister
DynamicObject_swigregister(DynamicObject)

class ReactionWheelStateEffector(SysModel, StateEffector):
    __swig_setmethods__ = {}
    for _s in [SysModel, StateEffector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionWheelStateEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [SysModel, StateEffector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionWheelStateEffector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _reactionWheelStateEffector.delete_ReactionWheelStateEffector
    __del__ = lambda self: None

    def registerStates(self, states):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_registerStates(self, states)

    def linkInStates(self, states):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_linkInStates(self, states)

    def writeOutputStateMessages(self, integTimeNanos):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_writeOutputStateMessages(self, integTimeNanos)

    def computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_computeDerivatives(self, integTime, rDDot_BN_N, omegaDot_BN_B, sigma_BN)

    def updateEffectorMassProps(self, integTime):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateEffectorMassProps(self, integTime)

    def updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateContributions(self, integTime, backSubContr, sigma_BN, omega_BN_B, g_N)

    def updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_updateEnergyMomContributions(self, integTime, rotAngMomPntCContr_B, rotEnergyContr, omega_BN_B)

    def SelfInit(self):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_SelfInit(self)

    def CrossInit(self):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_CrossInit(self)

    def addReactionWheel(self, NewRW):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_addReactionWheel(self, NewRW)

    def UpdateState(self, CurrentSimNanos):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_UpdateState(self, CurrentSimNanos)

    def WriteOutputMessages(self, CurrentClock):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_WriteOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_ReadInputs(self)

    def ConfigureRWRequests(self, CurrentTime):
        return _reactionWheelStateEffector.ReactionWheelStateEffector_ConfigureRWRequests(self, CurrentTime)
    __swig_setmethods__["ReactionWheelData"] = _reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_set
    __swig_getmethods__["ReactionWheelData"] = _reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_get
    if _newclass:
        ReactionWheelData = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_get, _reactionWheelStateEffector.ReactionWheelStateEffector_ReactionWheelData_set)
    __swig_setmethods__["g_N"] = _reactionWheelStateEffector.ReactionWheelStateEffector_g_N_set
    __swig_getmethods__["g_N"] = _reactionWheelStateEffector.ReactionWheelStateEffector_g_N_get
    if _newclass:
        g_N = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_g_N_get, _reactionWheelStateEffector.ReactionWheelStateEffector_g_N_set)
    __swig_setmethods__["InputCmds"] = _reactionWheelStateEffector.ReactionWheelStateEffector_InputCmds_set
    __swig_getmethods__["InputCmds"] = _reactionWheelStateEffector.ReactionWheelStateEffector_InputCmds_get
    if _newclass:
        InputCmds = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_InputCmds_get, _reactionWheelStateEffector.ReactionWheelStateEffector_InputCmds_set)
    __swig_setmethods__["OutputDataString"] = _reactionWheelStateEffector.ReactionWheelStateEffector_OutputDataString_set
    __swig_getmethods__["OutputDataString"] = _reactionWheelStateEffector.ReactionWheelStateEffector_OutputDataString_get
    if _newclass:
        OutputDataString = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_OutputDataString_get, _reactionWheelStateEffector.ReactionWheelStateEffector_OutputDataString_set)
    __swig_setmethods__["OutputBufferCount"] = _reactionWheelStateEffector.ReactionWheelStateEffector_OutputBufferCount_set
    __swig_getmethods__["OutputBufferCount"] = _reactionWheelStateEffector.ReactionWheelStateEffector_OutputBufferCount_get
    if _newclass:
        OutputBufferCount = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_OutputBufferCount_get, _reactionWheelStateEffector.ReactionWheelStateEffector_OutputBufferCount_set)
    __swig_setmethods__["NewRWCmds"] = _reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_set
    __swig_getmethods__["NewRWCmds"] = _reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_get
    if _newclass:
        NewRWCmds = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_get, _reactionWheelStateEffector.ReactionWheelStateEffector_NewRWCmds_set)
    __swig_setmethods__["outputStates"] = _reactionWheelStateEffector.ReactionWheelStateEffector_outputStates_set
    __swig_getmethods__["outputStates"] = _reactionWheelStateEffector.ReactionWheelStateEffector_outputStates_get
    if _newclass:
        outputStates = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_outputStates_get, _reactionWheelStateEffector.ReactionWheelStateEffector_outputStates_set)
    __swig_setmethods__["nameOfReactionWheelOmegasState"] = _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_set
    __swig_getmethods__["nameOfReactionWheelOmegasState"] = _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_get
    if _newclass:
        nameOfReactionWheelOmegasState = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_get, _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelOmegasState_set)
    __swig_setmethods__["nameOfReactionWheelThetasState"] = _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_set
    __swig_getmethods__["nameOfReactionWheelThetasState"] = _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_get
    if _newclass:
        nameOfReactionWheelThetasState = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_get, _reactionWheelStateEffector.ReactionWheelStateEffector_nameOfReactionWheelThetasState_set)
    __swig_setmethods__["numRW"] = _reactionWheelStateEffector.ReactionWheelStateEffector_numRW_set
    __swig_getmethods__["numRW"] = _reactionWheelStateEffector.ReactionWheelStateEffector_numRW_get
    if _newclass:
        numRW = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_numRW_get, _reactionWheelStateEffector.ReactionWheelStateEffector_numRW_set)
    __swig_setmethods__["numRWJitter"] = _reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_set
    __swig_getmethods__["numRWJitter"] = _reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_get
    if _newclass:
        numRWJitter = _swig_property(_reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_get, _reactionWheelStateEffector.ReactionWheelStateEffector_numRWJitter_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_ReactionWheelStateEffector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ReactionWheelStateEffector_swigregister = _reactionWheelStateEffector.ReactionWheelStateEffector_swigregister
ReactionWheelStateEffector_swigregister(ReactionWheelStateEffector)

class RWSpeedIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWSpeedIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWSpeedIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wheelSpeeds"] = _reactionWheelStateEffector.RWSpeedIntMsg_wheelSpeeds_set
    __swig_getmethods__["wheelSpeeds"] = _reactionWheelStateEffector.RWSpeedIntMsg_wheelSpeeds_get
    if _newclass:
        wheelSpeeds = _swig_property(_reactionWheelStateEffector.RWSpeedIntMsg_wheelSpeeds_get, _reactionWheelStateEffector.RWSpeedIntMsg_wheelSpeeds_set)
    __swig_setmethods__["wheelThetas"] = _reactionWheelStateEffector.RWSpeedIntMsg_wheelThetas_set
    __swig_getmethods__["wheelThetas"] = _reactionWheelStateEffector.RWSpeedIntMsg_wheelThetas_get
    if _newclass:
        wheelThetas = _swig_property(_reactionWheelStateEffector.RWSpeedIntMsg_wheelThetas_get, _reactionWheelStateEffector.RWSpeedIntMsg_wheelThetas_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWSpeedIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWSpeedIntMsg
    __del__ = lambda self: None
RWSpeedIntMsg_swigregister = _reactionWheelStateEffector.RWSpeedIntMsg_swigregister
RWSpeedIntMsg_swigregister(RWSpeedIntMsg)

class RWCmdSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWCmdSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWCmdSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u_cmd"] = _reactionWheelStateEffector.RWCmdSimMsg_u_cmd_set
    __swig_getmethods__["u_cmd"] = _reactionWheelStateEffector.RWCmdSimMsg_u_cmd_get
    if _newclass:
        u_cmd = _swig_property(_reactionWheelStateEffector.RWCmdSimMsg_u_cmd_get, _reactionWheelStateEffector.RWCmdSimMsg_u_cmd_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWCmdSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWCmdSimMsg
    __del__ = lambda self: None
RWCmdSimMsg_swigregister = _reactionWheelStateEffector.RWCmdSimMsg_swigregister
RWCmdSimMsg_swigregister(RWCmdSimMsg)

BalancedWheels = _reactionWheelStateEffector.BalancedWheels
JitterSimple = _reactionWheelStateEffector.JitterSimple
JitterFullyCoupled = _reactionWheelStateEffector.JitterFullyCoupled
class RWConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rWB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rWB_B_set
    __swig_getmethods__["rWB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rWB_B_get
    if _newclass:
        rWB_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_rWB_B_get, _reactionWheelStateEffector.RWConfigSimMsg_rWB_B_set)
    __swig_setmethods__["gsHat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_gsHat_B_get, _reactionWheelStateEffector.RWConfigSimMsg_gsHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_w2Hat0_B_get, _reactionWheelStateEffector.RWConfigSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w3Hat0_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_w3Hat0_B_get, _reactionWheelStateEffector.RWConfigSimMsg_w3Hat0_B_set)
    __swig_setmethods__["mass"] = _reactionWheelStateEffector.RWConfigSimMsg_mass_set
    __swig_getmethods__["mass"] = _reactionWheelStateEffector.RWConfigSimMsg_mass_get
    if _newclass:
        mass = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_mass_get, _reactionWheelStateEffector.RWConfigSimMsg_mass_set)
    __swig_setmethods__["theta"] = _reactionWheelStateEffector.RWConfigSimMsg_theta_set
    __swig_getmethods__["theta"] = _reactionWheelStateEffector.RWConfigSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_theta_get, _reactionWheelStateEffector.RWConfigSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _reactionWheelStateEffector.RWConfigSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _reactionWheelStateEffector.RWConfigSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_Omega_get, _reactionWheelStateEffector.RWConfigSimMsg_Omega_set)
    __swig_setmethods__["Js"] = _reactionWheelStateEffector.RWConfigSimMsg_Js_set
    __swig_getmethods__["Js"] = _reactionWheelStateEffector.RWConfigSimMsg_Js_get
    if _newclass:
        Js = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_Js_get, _reactionWheelStateEffector.RWConfigSimMsg_Js_set)
    __swig_setmethods__["Jt"] = _reactionWheelStateEffector.RWConfigSimMsg_Jt_set
    __swig_getmethods__["Jt"] = _reactionWheelStateEffector.RWConfigSimMsg_Jt_get
    if _newclass:
        Jt = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_Jt_get, _reactionWheelStateEffector.RWConfigSimMsg_Jt_set)
    __swig_setmethods__["Jg"] = _reactionWheelStateEffector.RWConfigSimMsg_Jg_set
    __swig_getmethods__["Jg"] = _reactionWheelStateEffector.RWConfigSimMsg_Jg_get
    if _newclass:
        Jg = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_Jg_get, _reactionWheelStateEffector.RWConfigSimMsg_Jg_set)
    __swig_setmethods__["U_s"] = _reactionWheelStateEffector.RWConfigSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _reactionWheelStateEffector.RWConfigSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_U_s_get, _reactionWheelStateEffector.RWConfigSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _reactionWheelStateEffector.RWConfigSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _reactionWheelStateEffector.RWConfigSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_U_d_get, _reactionWheelStateEffector.RWConfigSimMsg_U_d_set)
    __swig_setmethods__["d"] = _reactionWheelStateEffector.RWConfigSimMsg_d_set
    __swig_getmethods__["d"] = _reactionWheelStateEffector.RWConfigSimMsg_d_get
    if _newclass:
        d = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_d_get, _reactionWheelStateEffector.RWConfigSimMsg_d_set)
    __swig_setmethods__["J13"] = _reactionWheelStateEffector.RWConfigSimMsg_J13_set
    __swig_getmethods__["J13"] = _reactionWheelStateEffector.RWConfigSimMsg_J13_get
    if _newclass:
        J13 = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_J13_get, _reactionWheelStateEffector.RWConfigSimMsg_J13_set)
    __swig_setmethods__["u_current"] = _reactionWheelStateEffector.RWConfigSimMsg_u_current_set
    __swig_getmethods__["u_current"] = _reactionWheelStateEffector.RWConfigSimMsg_u_current_get
    if _newclass:
        u_current = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_u_current_get, _reactionWheelStateEffector.RWConfigSimMsg_u_current_set)
    __swig_setmethods__["u_max"] = _reactionWheelStateEffector.RWConfigSimMsg_u_max_set
    __swig_getmethods__["u_max"] = _reactionWheelStateEffector.RWConfigSimMsg_u_max_get
    if _newclass:
        u_max = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_u_max_get, _reactionWheelStateEffector.RWConfigSimMsg_u_max_set)
    __swig_setmethods__["u_min"] = _reactionWheelStateEffector.RWConfigSimMsg_u_min_set
    __swig_getmethods__["u_min"] = _reactionWheelStateEffector.RWConfigSimMsg_u_min_get
    if _newclass:
        u_min = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_u_min_get, _reactionWheelStateEffector.RWConfigSimMsg_u_min_set)
    __swig_setmethods__["fCoulomb"] = _reactionWheelStateEffector.RWConfigSimMsg_fCoulomb_set
    __swig_getmethods__["fCoulomb"] = _reactionWheelStateEffector.RWConfigSimMsg_fCoulomb_get
    if _newclass:
        fCoulomb = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_fCoulomb_get, _reactionWheelStateEffector.RWConfigSimMsg_fCoulomb_set)
    __swig_setmethods__["fStatic"] = _reactionWheelStateEffector.RWConfigSimMsg_fStatic_set
    __swig_getmethods__["fStatic"] = _reactionWheelStateEffector.RWConfigSimMsg_fStatic_get
    if _newclass:
        fStatic = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_fStatic_get, _reactionWheelStateEffector.RWConfigSimMsg_fStatic_set)
    __swig_setmethods__["betaStatic"] = _reactionWheelStateEffector.RWConfigSimMsg_betaStatic_set
    __swig_getmethods__["betaStatic"] = _reactionWheelStateEffector.RWConfigSimMsg_betaStatic_get
    if _newclass:
        betaStatic = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_betaStatic_get, _reactionWheelStateEffector.RWConfigSimMsg_betaStatic_set)
    __swig_setmethods__["cViscous"] = _reactionWheelStateEffector.RWConfigSimMsg_cViscous_set
    __swig_getmethods__["cViscous"] = _reactionWheelStateEffector.RWConfigSimMsg_cViscous_get
    if _newclass:
        cViscous = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_cViscous_get, _reactionWheelStateEffector.RWConfigSimMsg_cViscous_set)
    __swig_setmethods__["omegaLimitCycle"] = _reactionWheelStateEffector.RWConfigSimMsg_omegaLimitCycle_set
    __swig_getmethods__["omegaLimitCycle"] = _reactionWheelStateEffector.RWConfigSimMsg_omegaLimitCycle_get
    if _newclass:
        omegaLimitCycle = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_omegaLimitCycle_get, _reactionWheelStateEffector.RWConfigSimMsg_omegaLimitCycle_set)
    __swig_setmethods__["frictionTorque"] = _reactionWheelStateEffector.RWConfigSimMsg_frictionTorque_set
    __swig_getmethods__["frictionTorque"] = _reactionWheelStateEffector.RWConfigSimMsg_frictionTorque_get
    if _newclass:
        frictionTorque = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_frictionTorque_get, _reactionWheelStateEffector.RWConfigSimMsg_frictionTorque_set)
    __swig_setmethods__["omegaBefore"] = _reactionWheelStateEffector.RWConfigSimMsg_omegaBefore_set
    __swig_getmethods__["omegaBefore"] = _reactionWheelStateEffector.RWConfigSimMsg_omegaBefore_get
    if _newclass:
        omegaBefore = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_omegaBefore_get, _reactionWheelStateEffector.RWConfigSimMsg_omegaBefore_set)
    __swig_setmethods__["frictionStribeck"] = _reactionWheelStateEffector.RWConfigSimMsg_frictionStribeck_set
    __swig_getmethods__["frictionStribeck"] = _reactionWheelStateEffector.RWConfigSimMsg_frictionStribeck_get
    if _newclass:
        frictionStribeck = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_frictionStribeck_get, _reactionWheelStateEffector.RWConfigSimMsg_frictionStribeck_set)
    __swig_setmethods__["Omega_max"] = _reactionWheelStateEffector.RWConfigSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _reactionWheelStateEffector.RWConfigSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_Omega_max_get, _reactionWheelStateEffector.RWConfigSimMsg_Omega_max_set)
    __swig_setmethods__["RWModel"] = _reactionWheelStateEffector.RWConfigSimMsg_RWModel_set
    __swig_getmethods__["RWModel"] = _reactionWheelStateEffector.RWConfigSimMsg_RWModel_get
    if _newclass:
        RWModel = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_RWModel_get, _reactionWheelStateEffector.RWConfigSimMsg_RWModel_set)
    __swig_setmethods__["aOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_aOmega_set
    __swig_getmethods__["aOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_aOmega_get
    if _newclass:
        aOmega = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_aOmega_get, _reactionWheelStateEffector.RWConfigSimMsg_aOmega_set)
    __swig_setmethods__["bOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_bOmega_set
    __swig_getmethods__["bOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_bOmega_get
    if _newclass:
        bOmega = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_bOmega_get, _reactionWheelStateEffector.RWConfigSimMsg_bOmega_set)
    __swig_setmethods__["cOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_cOmega_set
    __swig_getmethods__["cOmega"] = _reactionWheelStateEffector.RWConfigSimMsg_cOmega_get
    if _newclass:
        cOmega = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_cOmega_get, _reactionWheelStateEffector.RWConfigSimMsg_cOmega_set)
    __swig_setmethods__["IRWPntWc_B"] = _reactionWheelStateEffector.RWConfigSimMsg_IRWPntWc_B_set
    __swig_getmethods__["IRWPntWc_B"] = _reactionWheelStateEffector.RWConfigSimMsg_IRWPntWc_B_get
    if _newclass:
        IRWPntWc_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_IRWPntWc_B_get, _reactionWheelStateEffector.RWConfigSimMsg_IRWPntWc_B_set)
    __swig_setmethods__["IPrimeRWPntWc_B"] = _reactionWheelStateEffector.RWConfigSimMsg_IPrimeRWPntWc_B_set
    __swig_getmethods__["IPrimeRWPntWc_B"] = _reactionWheelStateEffector.RWConfigSimMsg_IPrimeRWPntWc_B_get
    if _newclass:
        IPrimeRWPntWc_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_IPrimeRWPntWc_B_get, _reactionWheelStateEffector.RWConfigSimMsg_IPrimeRWPntWc_B_set)
    __swig_setmethods__["rWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rWcB_B_set
    __swig_getmethods__["rWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rWcB_B_get
    if _newclass:
        rWcB_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_rWcB_B_get, _reactionWheelStateEffector.RWConfigSimMsg_rWcB_B_set)
    __swig_setmethods__["rTildeWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rTildeWcB_B_set
    __swig_getmethods__["rTildeWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rTildeWcB_B_get
    if _newclass:
        rTildeWcB_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_rTildeWcB_B_get, _reactionWheelStateEffector.RWConfigSimMsg_rTildeWcB_B_set)
    __swig_setmethods__["rPrimeWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rPrimeWcB_B_set
    __swig_getmethods__["rPrimeWcB_B"] = _reactionWheelStateEffector.RWConfigSimMsg_rPrimeWcB_B_get
    if _newclass:
        rPrimeWcB_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_rPrimeWcB_B_get, _reactionWheelStateEffector.RWConfigSimMsg_rPrimeWcB_B_set)
    __swig_setmethods__["w2Hat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w2Hat_B_set
    __swig_getmethods__["w2Hat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w2Hat_B_get
    if _newclass:
        w2Hat_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_w2Hat_B_get, _reactionWheelStateEffector.RWConfigSimMsg_w2Hat_B_set)
    __swig_setmethods__["w3Hat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w3Hat_B_set
    __swig_getmethods__["w3Hat_B"] = _reactionWheelStateEffector.RWConfigSimMsg_w3Hat_B_get
    if _newclass:
        w3Hat_B = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_w3Hat_B_get, _reactionWheelStateEffector.RWConfigSimMsg_w3Hat_B_set)
    __swig_setmethods__["label"] = _reactionWheelStateEffector.RWConfigSimMsg_label_set
    __swig_getmethods__["label"] = _reactionWheelStateEffector.RWConfigSimMsg_label_get
    if _newclass:
        label = _swig_property(_reactionWheelStateEffector.RWConfigSimMsg_label_get, _reactionWheelStateEffector.RWConfigSimMsg_label_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigSimMsg
    __del__ = lambda self: None
RWConfigSimMsg_swigregister = _reactionWheelStateEffector.RWConfigSimMsg_swigregister
RWConfigSimMsg_swigregister(RWConfigSimMsg)

class RWConfigLogSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigLogSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigLogSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rWB_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_rWB_B_set
    __swig_getmethods__["rWB_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_rWB_B_get
    if _newclass:
        rWB_B = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_rWB_B_get, _reactionWheelStateEffector.RWConfigLogSimMsg_rWB_B_set)
    __swig_setmethods__["gsHat_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_gsHat_B_get, _reactionWheelStateEffector.RWConfigLogSimMsg_gsHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_w2Hat0_B_get, _reactionWheelStateEffector.RWConfigLogSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w3Hat0_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _reactionWheelStateEffector.RWConfigLogSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_w3Hat0_B_get, _reactionWheelStateEffector.RWConfigLogSimMsg_w3Hat0_B_set)
    __swig_setmethods__["mass"] = _reactionWheelStateEffector.RWConfigLogSimMsg_mass_set
    __swig_getmethods__["mass"] = _reactionWheelStateEffector.RWConfigLogSimMsg_mass_get
    if _newclass:
        mass = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_mass_get, _reactionWheelStateEffector.RWConfigLogSimMsg_mass_set)
    __swig_setmethods__["theta"] = _reactionWheelStateEffector.RWConfigLogSimMsg_theta_set
    __swig_getmethods__["theta"] = _reactionWheelStateEffector.RWConfigLogSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_theta_get, _reactionWheelStateEffector.RWConfigLogSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_Omega_get, _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_set)
    __swig_setmethods__["Js"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Js_set
    __swig_getmethods__["Js"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Js_get
    if _newclass:
        Js = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_Js_get, _reactionWheelStateEffector.RWConfigLogSimMsg_Js_set)
    __swig_setmethods__["Jt"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Jt_set
    __swig_getmethods__["Jt"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Jt_get
    if _newclass:
        Jt = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_Jt_get, _reactionWheelStateEffector.RWConfigLogSimMsg_Jt_set)
    __swig_setmethods__["Jg"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Jg_set
    __swig_getmethods__["Jg"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Jg_get
    if _newclass:
        Jg = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_Jg_get, _reactionWheelStateEffector.RWConfigLogSimMsg_Jg_set)
    __swig_setmethods__["U_s"] = _reactionWheelStateEffector.RWConfigLogSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _reactionWheelStateEffector.RWConfigLogSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_U_s_get, _reactionWheelStateEffector.RWConfigLogSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _reactionWheelStateEffector.RWConfigLogSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _reactionWheelStateEffector.RWConfigLogSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_U_d_get, _reactionWheelStateEffector.RWConfigLogSimMsg_U_d_set)
    __swig_setmethods__["d"] = _reactionWheelStateEffector.RWConfigLogSimMsg_d_set
    __swig_getmethods__["d"] = _reactionWheelStateEffector.RWConfigLogSimMsg_d_get
    if _newclass:
        d = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_d_get, _reactionWheelStateEffector.RWConfigLogSimMsg_d_set)
    __swig_setmethods__["J13"] = _reactionWheelStateEffector.RWConfigLogSimMsg_J13_set
    __swig_getmethods__["J13"] = _reactionWheelStateEffector.RWConfigLogSimMsg_J13_get
    if _newclass:
        J13 = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_J13_get, _reactionWheelStateEffector.RWConfigLogSimMsg_J13_set)
    __swig_setmethods__["u_current"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_current_set
    __swig_getmethods__["u_current"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_current_get
    if _newclass:
        u_current = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_u_current_get, _reactionWheelStateEffector.RWConfigLogSimMsg_u_current_set)
    __swig_setmethods__["frictionTorque"] = _reactionWheelStateEffector.RWConfigLogSimMsg_frictionTorque_set
    __swig_getmethods__["frictionTorque"] = _reactionWheelStateEffector.RWConfigLogSimMsg_frictionTorque_get
    if _newclass:
        frictionTorque = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_frictionTorque_get, _reactionWheelStateEffector.RWConfigLogSimMsg_frictionTorque_set)
    __swig_setmethods__["u_max"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_max_set
    __swig_getmethods__["u_max"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_max_get
    if _newclass:
        u_max = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_u_max_get, _reactionWheelStateEffector.RWConfigLogSimMsg_u_max_set)
    __swig_setmethods__["u_min"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_min_set
    __swig_getmethods__["u_min"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_min_get
    if _newclass:
        u_min = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_u_min_get, _reactionWheelStateEffector.RWConfigLogSimMsg_u_min_set)
    __swig_setmethods__["u_f"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_f_set
    __swig_getmethods__["u_f"] = _reactionWheelStateEffector.RWConfigLogSimMsg_u_f_get
    if _newclass:
        u_f = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_u_f_get, _reactionWheelStateEffector.RWConfigLogSimMsg_u_f_set)
    __swig_setmethods__["Omega_max"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_Omega_max_get, _reactionWheelStateEffector.RWConfigLogSimMsg_Omega_max_set)
    __swig_setmethods__["linearFrictionRatio"] = _reactionWheelStateEffector.RWConfigLogSimMsg_linearFrictionRatio_set
    __swig_getmethods__["linearFrictionRatio"] = _reactionWheelStateEffector.RWConfigLogSimMsg_linearFrictionRatio_get
    if _newclass:
        linearFrictionRatio = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_linearFrictionRatio_get, _reactionWheelStateEffector.RWConfigLogSimMsg_linearFrictionRatio_set)
    __swig_setmethods__["RWModel"] = _reactionWheelStateEffector.RWConfigLogSimMsg_RWModel_set
    __swig_getmethods__["RWModel"] = _reactionWheelStateEffector.RWConfigLogSimMsg_RWModel_get
    if _newclass:
        RWModel = _swig_property(_reactionWheelStateEffector.RWConfigLogSimMsg_RWModel_get, _reactionWheelStateEffector.RWConfigLogSimMsg_RWModel_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWConfigLogSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigLogSimMsg
    __del__ = lambda self: None
RWConfigLogSimMsg_swigregister = _reactionWheelStateEffector.RWConfigLogSimMsg_swigregister
RWConfigLogSimMsg_swigregister(RWConfigLogSimMsg)

MAX_EFF_CNT = _reactionWheelStateEffector.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _reactionWheelStateEffector.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _reactionWheelStateEffector.MAX_ST_VEH_COUNT
NANO2SEC = _reactionWheelStateEffector.NANO2SEC
class RWArrayTorqueIntMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWArrayTorqueIntMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWArrayTorqueIntMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["motorTorque"] = _reactionWheelStateEffector.RWArrayTorqueIntMsg_motorTorque_set
    __swig_getmethods__["motorTorque"] = _reactionWheelStateEffector.RWArrayTorqueIntMsg_motorTorque_get
    if _newclass:
        motorTorque = _swig_property(_reactionWheelStateEffector.RWArrayTorqueIntMsg_motorTorque_get, _reactionWheelStateEffector.RWArrayTorqueIntMsg_motorTorque_set)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWArrayTorqueIntMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWArrayTorqueIntMsg
    __del__ = lambda self: None
RWArrayTorqueIntMsg_swigregister = _reactionWheelStateEffector.RWArrayTorqueIntMsg_swigregister
RWArrayTorqueIntMsg_swigregister(RWArrayTorqueIntMsg)

class RWConfigVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.RWConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.RWConfigVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.RWConfigVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.RWConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.RWConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.RWConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.RWConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.RWConfigVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.RWConfigVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.RWConfigVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.RWConfigVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.RWConfigVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.RWConfigVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.RWConfigVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.RWConfigVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.RWConfigVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.RWConfigVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.RWConfigVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.RWConfigVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.RWConfigVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.RWConfigVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWConfigVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.RWConfigVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.RWConfigVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.RWConfigVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.RWConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.RWConfigVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.RWConfigVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.RWConfigVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.RWConfigVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWConfigVector
    __del__ = lambda self: None
RWConfigVector_swigregister = _reactionWheelStateEffector.RWConfigVector_swigregister
RWConfigVector_swigregister(RWConfigVector)

class RWCmdVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWCmdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWCmdVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _reactionWheelStateEffector.RWCmdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _reactionWheelStateEffector.RWCmdVector___nonzero__(self)

    def __bool__(self):
        return _reactionWheelStateEffector.RWCmdVector___bool__(self)

    def __len__(self):
        return _reactionWheelStateEffector.RWCmdVector___len__(self)

    def __getslice__(self, i, j):
        return _reactionWheelStateEffector.RWCmdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _reactionWheelStateEffector.RWCmdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _reactionWheelStateEffector.RWCmdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _reactionWheelStateEffector.RWCmdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _reactionWheelStateEffector.RWCmdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _reactionWheelStateEffector.RWCmdVector___setitem__(self, *args)

    def pop(self):
        return _reactionWheelStateEffector.RWCmdVector_pop(self)

    def append(self, x):
        return _reactionWheelStateEffector.RWCmdVector_append(self, x)

    def empty(self):
        return _reactionWheelStateEffector.RWCmdVector_empty(self)

    def size(self):
        return _reactionWheelStateEffector.RWCmdVector_size(self)

    def swap(self, v):
        return _reactionWheelStateEffector.RWCmdVector_swap(self, v)

    def begin(self):
        return _reactionWheelStateEffector.RWCmdVector_begin(self)

    def end(self):
        return _reactionWheelStateEffector.RWCmdVector_end(self)

    def rbegin(self):
        return _reactionWheelStateEffector.RWCmdVector_rbegin(self)

    def rend(self):
        return _reactionWheelStateEffector.RWCmdVector_rend(self)

    def clear(self):
        return _reactionWheelStateEffector.RWCmdVector_clear(self)

    def get_allocator(self):
        return _reactionWheelStateEffector.RWCmdVector_get_allocator(self)

    def pop_back(self):
        return _reactionWheelStateEffector.RWCmdVector_pop_back(self)

    def erase(self, *args):
        return _reactionWheelStateEffector.RWCmdVector_erase(self, *args)

    def __init__(self, *args):
        this = _reactionWheelStateEffector.new_RWCmdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _reactionWheelStateEffector.RWCmdVector_push_back(self, x)

    def front(self):
        return _reactionWheelStateEffector.RWCmdVector_front(self)

    def back(self):
        return _reactionWheelStateEffector.RWCmdVector_back(self)

    def assign(self, n, x):
        return _reactionWheelStateEffector.RWCmdVector_assign(self, n, x)

    def resize(self, *args):
        return _reactionWheelStateEffector.RWCmdVector_resize(self, *args)

    def insert(self, *args):
        return _reactionWheelStateEffector.RWCmdVector_insert(self, *args)

    def reserve(self, n):
        return _reactionWheelStateEffector.RWCmdVector_reserve(self, n)

    def capacity(self):
        return _reactionWheelStateEffector.RWCmdVector_capacity(self)
    __swig_destroy__ = _reactionWheelStateEffector.delete_RWCmdVector
    __del__ = lambda self: None
RWCmdVector_swigregister = _reactionWheelStateEffector.RWCmdVector_swigregister
RWCmdVector_swigregister(RWCmdVector)

sizeof_RWArrayTorqueIntMsg = _reactionWheelStateEffector.sizeof_RWArrayTorqueIntMsg
sizeof_RWConfigLogSimMsg = _reactionWheelStateEffector.sizeof_RWConfigLogSimMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


