# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simMessages')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simMessages')
    _simMessages = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simMessages', [dirname(__file__)])
        except ImportError:
            import _simMessages
            return _simMessages
        try:
            _mod = imp.load_module('_simMessages', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simMessages = swig_import_helper()
    del swig_import_helper
else:
    import _simMessages
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _simMessages.new_doubleArray(nelements)
new_doubleArray = _simMessages.new_doubleArray

def delete_doubleArray(ary):
    return _simMessages.delete_doubleArray(ary)
delete_doubleArray = _simMessages.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _simMessages.doubleArray_getitem(ary, index)
doubleArray_getitem = _simMessages.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _simMessages.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _simMessages.doubleArray_setitem

def new_longArray(nelements):
    return _simMessages.new_longArray(nelements)
new_longArray = _simMessages.new_longArray

def delete_longArray(ary):
    return _simMessages.delete_longArray(ary)
delete_longArray = _simMessages.delete_longArray

def longArray_getitem(ary, index):
    return _simMessages.longArray_getitem(ary, index)
longArray_getitem = _simMessages.longArray_getitem

def longArray_setitem(ary, index, value):
    return _simMessages.longArray_setitem(ary, index, value)
longArray_setitem = _simMessages.longArray_setitem

def new_intArray(nelements):
    return _simMessages.new_intArray(nelements)
new_intArray = _simMessages.new_intArray

def delete_intArray(ary):
    return _simMessages.delete_intArray(ary)
delete_intArray = _simMessages.delete_intArray

def intArray_getitem(ary, index):
    return _simMessages.intArray_getitem(ary, index)
intArray_getitem = _simMessages.intArray_getitem

def intArray_setitem(ary, index, value):
    return _simMessages.intArray_setitem(ary, index, value)
intArray_setitem = _simMessages.intArray_setitem

def new_shortArray(nelements):
    return _simMessages.new_shortArray(nelements)
new_shortArray = _simMessages.new_shortArray

def delete_shortArray(ary):
    return _simMessages.delete_shortArray(ary)
delete_shortArray = _simMessages.delete_shortArray

def shortArray_getitem(ary, index):
    return _simMessages.shortArray_getitem(ary, index)
shortArray_getitem = _simMessages.shortArray_getitem

def shortArray_setitem(ary, index, value):
    return _simMessages.shortArray_setitem(ary, index, value)
shortArray_setitem = _simMessages.shortArray_setitem


def getStructSize(self):
    try:
        return eval('sizeof_' + repr(self).split(';')[0].split('.')[-1])
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString + 
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +  
            ' SWIG macro against the class/struct in your SWIG file if you want to ' + 
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this'):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' + 
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect
    clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for member in clsmembers:
        try:
            exec(str(member[0]) + '.__setattr__ = protectSetAttr')
            exec(str(member[0]) + '.getStructSize = getStructSize') 
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simMessages.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _simMessages.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _simMessages.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _simMessages.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _simMessages.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _simMessages.SwigPyIterator_equal(self, x)

    def copy(self):
        return _simMessages.SwigPyIterator_copy(self)

    def next(self):
        return _simMessages.SwigPyIterator_next(self)

    def __next__(self):
        return _simMessages.SwigPyIterator___next__(self)

    def previous(self):
        return _simMessages.SwigPyIterator_previous(self)

    def advance(self, n):
        return _simMessages.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _simMessages.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _simMessages.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _simMessages.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _simMessages.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _simMessages.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _simMessages.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _simMessages.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_boolArray(nelements):
    return _simMessages.new_boolArray(nelements)
new_boolArray = _simMessages.new_boolArray

def delete_boolArray(ary):
    return _simMessages.delete_boolArray(ary)
delete_boolArray = _simMessages.delete_boolArray

def boolArray_getitem(ary, index):
    return _simMessages.boolArray_getitem(ary, index)
boolArray_getitem = _simMessages.boolArray_getitem

def boolArray_setitem(ary, index, value):
    return _simMessages.boolArray_setitem(ary, index, value)
boolArray_setitem = _simMessages.boolArray_setitem
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.IntVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.IntVector___bool__(self)

    def __len__(self):
        return _simMessages.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.IntVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.IntVector_pop(self)

    def append(self, x):
        return _simMessages.IntVector_append(self, x)

    def empty(self):
        return _simMessages.IntVector_empty(self)

    def size(self):
        return _simMessages.IntVector_size(self)

    def swap(self, v):
        return _simMessages.IntVector_swap(self, v)

    def begin(self):
        return _simMessages.IntVector_begin(self)

    def end(self):
        return _simMessages.IntVector_end(self)

    def rbegin(self):
        return _simMessages.IntVector_rbegin(self)

    def rend(self):
        return _simMessages.IntVector_rend(self)

    def clear(self):
        return _simMessages.IntVector_clear(self)

    def get_allocator(self):
        return _simMessages.IntVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.IntVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.IntVector_push_back(self, x)

    def front(self):
        return _simMessages.IntVector_front(self)

    def back(self):
        return _simMessages.IntVector_back(self)

    def assign(self, n, x):
        return _simMessages.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.IntVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.IntVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.IntVector_reserve(self, n)

    def capacity(self):
        return _simMessages.IntVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _simMessages.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.DoubleVector___bool__(self)

    def __len__(self):
        return _simMessages.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.DoubleVector_pop(self)

    def append(self, x):
        return _simMessages.DoubleVector_append(self, x)

    def empty(self):
        return _simMessages.DoubleVector_empty(self)

    def size(self):
        return _simMessages.DoubleVector_size(self)

    def swap(self, v):
        return _simMessages.DoubleVector_swap(self, v)

    def begin(self):
        return _simMessages.DoubleVector_begin(self)

    def end(self):
        return _simMessages.DoubleVector_end(self)

    def rbegin(self):
        return _simMessages.DoubleVector_rbegin(self)

    def rend(self):
        return _simMessages.DoubleVector_rend(self)

    def clear(self):
        return _simMessages.DoubleVector_clear(self)

    def get_allocator(self):
        return _simMessages.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.DoubleVector_push_back(self, x)

    def front(self):
        return _simMessages.DoubleVector_front(self)

    def back(self):
        return _simMessages.DoubleVector_back(self)

    def assign(self, n, x):
        return _simMessages.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.DoubleVector_reserve(self, n)

    def capacity(self):
        return _simMessages.DoubleVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _simMessages.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.StringVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.StringVector___bool__(self)

    def __len__(self):
        return _simMessages.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.StringVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.StringVector_pop(self)

    def append(self, x):
        return _simMessages.StringVector_append(self, x)

    def empty(self):
        return _simMessages.StringVector_empty(self)

    def size(self):
        return _simMessages.StringVector_size(self)

    def swap(self, v):
        return _simMessages.StringVector_swap(self, v)

    def begin(self):
        return _simMessages.StringVector_begin(self)

    def end(self):
        return _simMessages.StringVector_end(self)

    def rbegin(self):
        return _simMessages.StringVector_rbegin(self)

    def rend(self):
        return _simMessages.StringVector_rend(self)

    def clear(self):
        return _simMessages.StringVector_clear(self)

    def get_allocator(self):
        return _simMessages.StringVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.StringVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.StringVector_push_back(self, x)

    def front(self):
        return _simMessages.StringVector_front(self)

    def back(self):
        return _simMessages.StringVector_back(self)

    def assign(self, n, x):
        return _simMessages.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.StringVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.StringVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.StringVector_reserve(self, n)

    def capacity(self):
        return _simMessages.StringVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _simMessages.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.StringSet___nonzero__(self)

    def __bool__(self):
        return _simMessages.StringSet___bool__(self)

    def __len__(self):
        return _simMessages.StringSet___len__(self)

    def append(self, x):
        return _simMessages.StringSet_append(self, x)

    def __contains__(self, x):
        return _simMessages.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _simMessages.StringSet___getitem__(self, i)

    def add(self, x):
        return _simMessages.StringSet_add(self, x)

    def discard(self, x):
        return _simMessages.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _simMessages.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _simMessages.StringSet_empty(self)

    def size(self):
        return _simMessages.StringSet_size(self)

    def clear(self):
        return _simMessages.StringSet_clear(self)

    def swap(self, v):
        return _simMessages.StringSet_swap(self, v)

    def count(self, x):
        return _simMessages.StringSet_count(self, x)

    def begin(self):
        return _simMessages.StringSet_begin(self)

    def end(self):
        return _simMessages.StringSet_end(self)

    def rbegin(self):
        return _simMessages.StringSet_rbegin(self)

    def rend(self):
        return _simMessages.StringSet_rend(self)

    def erase(self, *args):
        return _simMessages.StringSet_erase(self, *args)

    def find(self, x):
        return _simMessages.StringSet_find(self, x)

    def lower_bound(self, x):
        return _simMessages.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _simMessages.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _simMessages.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _simMessages.StringSet_insert(self, __x)
    __swig_destroy__ = _simMessages.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _simMessages.StringSet_swigregister
StringSet_swigregister(StringSet)

class intSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.intSet___nonzero__(self)

    def __bool__(self):
        return _simMessages.intSet___bool__(self)

    def __len__(self):
        return _simMessages.intSet___len__(self)

    def append(self, x):
        return _simMessages.intSet_append(self, x)

    def __contains__(self, x):
        return _simMessages.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _simMessages.intSet___getitem__(self, i)

    def add(self, x):
        return _simMessages.intSet_add(self, x)

    def discard(self, x):
        return _simMessages.intSet_discard(self, x)

    def __init__(self, *args):
        this = _simMessages.new_intSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _simMessages.intSet_empty(self)

    def size(self):
        return _simMessages.intSet_size(self)

    def clear(self):
        return _simMessages.intSet_clear(self)

    def swap(self, v):
        return _simMessages.intSet_swap(self, v)

    def count(self, x):
        return _simMessages.intSet_count(self, x)

    def begin(self):
        return _simMessages.intSet_begin(self)

    def end(self):
        return _simMessages.intSet_end(self)

    def rbegin(self):
        return _simMessages.intSet_rbegin(self)

    def rend(self):
        return _simMessages.intSet_rend(self)

    def erase(self, *args):
        return _simMessages.intSet_erase(self, *args)

    def find(self, x):
        return _simMessages.intSet_find(self, x)

    def lower_bound(self, x):
        return _simMessages.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _simMessages.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _simMessages.intSet_equal_range(self, x)

    def insert(self, __x):
        return _simMessages.intSet_insert(self, __x)
    __swig_destroy__ = _simMessages.delete_intSet
    __del__ = lambda self: None
intSet_swigregister = _simMessages.intSet_swigregister
intSet_swigregister(intSet)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.ConstCharVector___bool__(self)

    def __len__(self):
        return _simMessages.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.ConstCharVector_pop(self)

    def append(self, x):
        return _simMessages.ConstCharVector_append(self, x)

    def empty(self):
        return _simMessages.ConstCharVector_empty(self)

    def size(self):
        return _simMessages.ConstCharVector_size(self)

    def swap(self, v):
        return _simMessages.ConstCharVector_swap(self, v)

    def begin(self):
        return _simMessages.ConstCharVector_begin(self)

    def end(self):
        return _simMessages.ConstCharVector_end(self)

    def rbegin(self):
        return _simMessages.ConstCharVector_rbegin(self)

    def rend(self):
        return _simMessages.ConstCharVector_rend(self)

    def clear(self):
        return _simMessages.ConstCharVector_clear(self)

    def get_allocator(self):
        return _simMessages.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.ConstCharVector_push_back(self, x)

    def front(self):
        return _simMessages.ConstCharVector_front(self)

    def back(self):
        return _simMessages.ConstCharVector_back(self)

    def assign(self, n, x):
        return _simMessages.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _simMessages.ConstCharVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _simMessages.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class MultiArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.MultiArray___nonzero__(self)

    def __bool__(self):
        return _simMessages.MultiArray___bool__(self)

    def __len__(self):
        return _simMessages.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.MultiArray___setitem__(self, *args)

    def pop(self):
        return _simMessages.MultiArray_pop(self)

    def append(self, x):
        return _simMessages.MultiArray_append(self, x)

    def empty(self):
        return _simMessages.MultiArray_empty(self)

    def size(self):
        return _simMessages.MultiArray_size(self)

    def swap(self, v):
        return _simMessages.MultiArray_swap(self, v)

    def begin(self):
        return _simMessages.MultiArray_begin(self)

    def end(self):
        return _simMessages.MultiArray_end(self)

    def rbegin(self):
        return _simMessages.MultiArray_rbegin(self)

    def rend(self):
        return _simMessages.MultiArray_rend(self)

    def clear(self):
        return _simMessages.MultiArray_clear(self)

    def get_allocator(self):
        return _simMessages.MultiArray_get_allocator(self)

    def pop_back(self):
        return _simMessages.MultiArray_pop_back(self)

    def erase(self, *args):
        return _simMessages.MultiArray_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_MultiArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.MultiArray_push_back(self, x)

    def front(self):
        return _simMessages.MultiArray_front(self)

    def back(self):
        return _simMessages.MultiArray_back(self)

    def assign(self, n, x):
        return _simMessages.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _simMessages.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _simMessages.MultiArray_reserve(self, n)

    def capacity(self):
        return _simMessages.MultiArray_capacity(self)
    __swig_destroy__ = _simMessages.delete_MultiArray
    __del__ = lambda self: None
MultiArray_swigregister = _simMessages.MultiArray_swigregister
MultiArray_swigregister(MultiArray)

class ThrusterTimeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrusterTimeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThrusterTimeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.ThrusterTimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.ThrusterTimeVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.ThrusterTimeVector___bool__(self)

    def __len__(self):
        return _simMessages.ThrusterTimeVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.ThrusterTimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.ThrusterTimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.ThrusterTimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.ThrusterTimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.ThrusterTimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.ThrusterTimeVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.ThrusterTimeVector_pop(self)

    def append(self, x):
        return _simMessages.ThrusterTimeVector_append(self, x)

    def empty(self):
        return _simMessages.ThrusterTimeVector_empty(self)

    def size(self):
        return _simMessages.ThrusterTimeVector_size(self)

    def swap(self, v):
        return _simMessages.ThrusterTimeVector_swap(self, v)

    def begin(self):
        return _simMessages.ThrusterTimeVector_begin(self)

    def end(self):
        return _simMessages.ThrusterTimeVector_end(self)

    def rbegin(self):
        return _simMessages.ThrusterTimeVector_rbegin(self)

    def rend(self):
        return _simMessages.ThrusterTimeVector_rend(self)

    def clear(self):
        return _simMessages.ThrusterTimeVector_clear(self)

    def get_allocator(self):
        return _simMessages.ThrusterTimeVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.ThrusterTimeVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.ThrusterTimeVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_ThrusterTimeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.ThrusterTimeVector_push_back(self, x)

    def front(self):
        return _simMessages.ThrusterTimeVector_front(self)

    def back(self):
        return _simMessages.ThrusterTimeVector_back(self)

    def assign(self, n, x):
        return _simMessages.ThrusterTimeVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.ThrusterTimeVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.ThrusterTimeVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.ThrusterTimeVector_reserve(self, n)

    def capacity(self):
        return _simMessages.ThrusterTimeVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_ThrusterTimeVector
    __del__ = lambda self: None
ThrusterTimeVector_swigregister = _simMessages.ThrusterTimeVector_swigregister
ThrusterTimeVector_swigregister(ThrusterTimeVector)

class ThrusterConfigVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThrusterConfigVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThrusterConfigVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _simMessages.ThrusterConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _simMessages.ThrusterConfigVector___nonzero__(self)

    def __bool__(self):
        return _simMessages.ThrusterConfigVector___bool__(self)

    def __len__(self):
        return _simMessages.ThrusterConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _simMessages.ThrusterConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _simMessages.ThrusterConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _simMessages.ThrusterConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _simMessages.ThrusterConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _simMessages.ThrusterConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _simMessages.ThrusterConfigVector___setitem__(self, *args)

    def pop(self):
        return _simMessages.ThrusterConfigVector_pop(self)

    def append(self, x):
        return _simMessages.ThrusterConfigVector_append(self, x)

    def empty(self):
        return _simMessages.ThrusterConfigVector_empty(self)

    def size(self):
        return _simMessages.ThrusterConfigVector_size(self)

    def swap(self, v):
        return _simMessages.ThrusterConfigVector_swap(self, v)

    def begin(self):
        return _simMessages.ThrusterConfigVector_begin(self)

    def end(self):
        return _simMessages.ThrusterConfigVector_end(self)

    def rbegin(self):
        return _simMessages.ThrusterConfigVector_rbegin(self)

    def rend(self):
        return _simMessages.ThrusterConfigVector_rend(self)

    def clear(self):
        return _simMessages.ThrusterConfigVector_clear(self)

    def get_allocator(self):
        return _simMessages.ThrusterConfigVector_get_allocator(self)

    def pop_back(self):
        return _simMessages.ThrusterConfigVector_pop_back(self)

    def erase(self, *args):
        return _simMessages.ThrusterConfigVector_erase(self, *args)

    def __init__(self, *args):
        this = _simMessages.new_ThrusterConfigVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _simMessages.ThrusterConfigVector_push_back(self, x)

    def front(self):
        return _simMessages.ThrusterConfigVector_front(self)

    def back(self):
        return _simMessages.ThrusterConfigVector_back(self)

    def assign(self, n, x):
        return _simMessages.ThrusterConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _simMessages.ThrusterConfigVector_resize(self, *args)

    def insert(self, *args):
        return _simMessages.ThrusterConfigVector_insert(self, *args)

    def reserve(self, n):
        return _simMessages.ThrusterConfigVector_reserve(self, n)

    def capacity(self):
        return _simMessages.ThrusterConfigVector_capacity(self)
    __swig_destroy__ = _simMessages.delete_ThrusterConfigVector
    __del__ = lambda self: None
ThrusterConfigVector_swigregister = _simMessages.ThrusterConfigVector_swigregister
ThrusterConfigVector_swigregister(ThrusterConfigVector)

class AngOffValuesSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngOffValuesSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngOffValuesSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["azimuth"] = _simMessages.AngOffValuesSimMsg_azimuth_set
    __swig_getmethods__["azimuth"] = _simMessages.AngOffValuesSimMsg_azimuth_get
    if _newclass:
        azimuth = _swig_property(_simMessages.AngOffValuesSimMsg_azimuth_get, _simMessages.AngOffValuesSimMsg_azimuth_set)
    __swig_setmethods__["missAngle"] = _simMessages.AngOffValuesSimMsg_missAngle_set
    __swig_getmethods__["missAngle"] = _simMessages.AngOffValuesSimMsg_missAngle_get
    if _newclass:
        missAngle = _swig_property(_simMessages.AngOffValuesSimMsg_missAngle_get, _simMessages.AngOffValuesSimMsg_missAngle_set)

    def __init__(self, *args):
        this = _simMessages.new_AngOffValuesSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_AngOffValuesSimMsg
    __del__ = lambda self: None
AngOffValuesSimMsg_swigregister = _simMessages.AngOffValuesSimMsg_swigregister
AngOffValuesSimMsg_swigregister(AngOffValuesSimMsg)

sizeof_AngOffValuesSimMsg = _simMessages.sizeof_AngOffValuesSimMsg
class CSSRawDataSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSSRawDataSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSSRawDataSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OutputData"] = _simMessages.CSSRawDataSimMsg_OutputData_set
    __swig_getmethods__["OutputData"] = _simMessages.CSSRawDataSimMsg_OutputData_get
    if _newclass:
        OutputData = _swig_property(_simMessages.CSSRawDataSimMsg_OutputData_get, _simMessages.CSSRawDataSimMsg_OutputData_set)

    def __init__(self, *args):
        this = _simMessages.new_CSSRawDataSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_CSSRawDataSimMsg
    __del__ = lambda self: None
CSSRawDataSimMsg_swigregister = _simMessages.CSSRawDataSimMsg_swigregister
CSSRawDataSimMsg_swigregister(CSSRawDataSimMsg)

sizeof_CSSRawDataSimMsg = _simMessages.sizeof_CSSRawDataSimMsg
class EclipseSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EclipseSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EclipseSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shadowFactor"] = _simMessages.EclipseSimMsg_shadowFactor_set
    __swig_getmethods__["shadowFactor"] = _simMessages.EclipseSimMsg_shadowFactor_get
    if _newclass:
        shadowFactor = _swig_property(_simMessages.EclipseSimMsg_shadowFactor_get, _simMessages.EclipseSimMsg_shadowFactor_set)

    def __init__(self, *args):
        this = _simMessages.new_EclipseSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_EclipseSimMsg
    __del__ = lambda self: None
EclipseSimMsg_swigregister = _simMessages.EclipseSimMsg_swigregister
EclipseSimMsg_swigregister(EclipseSimMsg)

sizeof_EclipseSimMsg = _simMessages.sizeof_EclipseSimMsg
class IDEphemerisSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDEphemerisSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDEphemerisSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputID"] = _simMessages.IDEphemerisSimMsg_inputID_set
    __swig_getmethods__["inputID"] = _simMessages.IDEphemerisSimMsg_inputID_get
    if _newclass:
        inputID = _swig_property(_simMessages.IDEphemerisSimMsg_inputID_get, _simMessages.IDEphemerisSimMsg_inputID_set)
    __swig_setmethods__["clockTime"] = _simMessages.IDEphemerisSimMsg_clockTime_set
    __swig_getmethods__["clockTime"] = _simMessages.IDEphemerisSimMsg_clockTime_get
    if _newclass:
        clockTime = _swig_property(_simMessages.IDEphemerisSimMsg_clockTime_get, _simMessages.IDEphemerisSimMsg_clockTime_set)
    __swig_setmethods__["messageData"] = _simMessages.IDEphemerisSimMsg_messageData_set
    __swig_getmethods__["messageData"] = _simMessages.IDEphemerisSimMsg_messageData_get
    if _newclass:
        messageData = _swig_property(_simMessages.IDEphemerisSimMsg_messageData_get, _simMessages.IDEphemerisSimMsg_messageData_set)
    __swig_setmethods__["outputData"] = _simMessages.IDEphemerisSimMsg_outputData_set
    __swig_getmethods__["outputData"] = _simMessages.IDEphemerisSimMsg_outputData_get
    if _newclass:
        outputData = _swig_property(_simMessages.IDEphemerisSimMsg_outputData_get, _simMessages.IDEphemerisSimMsg_outputData_set)

    def __init__(self, *args):
        this = _simMessages.new_IDEphemerisSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_IDEphemerisSimMsg
    __del__ = lambda self: None
IDEphemerisSimMsg_swigregister = _simMessages.IDEphemerisSimMsg_swigregister
IDEphemerisSimMsg_swigregister(IDEphemerisSimMsg)

sizeof_IDEphemerisSimMsg = _simMessages.sizeof_IDEphemerisSimMsg
vscmgBalancedWheels = _simMessages.vscmgBalancedWheels
vscmgJitterSimple = _simMessages.vscmgJitterSimple
vscmgJitterFullyCoupled = _simMessages.vscmgJitterFullyCoupled
class VSCMGConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VSCMGModel"] = _simMessages.VSCMGConfigSimMsg_VSCMGModel_set
    __swig_getmethods__["VSCMGModel"] = _simMessages.VSCMGConfigSimMsg_VSCMGModel_get
    if _newclass:
        VSCMGModel = _swig_property(_simMessages.VSCMGConfigSimMsg_VSCMGModel_get, _simMessages.VSCMGConfigSimMsg_VSCMGModel_set)
    __swig_setmethods__["rGB_B"] = _simMessages.VSCMGConfigSimMsg_rGB_B_set
    __swig_getmethods__["rGB_B"] = _simMessages.VSCMGConfigSimMsg_rGB_B_get
    if _newclass:
        rGB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rGB_B_get, _simMessages.VSCMGConfigSimMsg_rGB_B_set)
    __swig_setmethods__["gsHat0_B"] = _simMessages.VSCMGConfigSimMsg_gsHat0_B_set
    __swig_getmethods__["gsHat0_B"] = _simMessages.VSCMGConfigSimMsg_gsHat0_B_get
    if _newclass:
        gsHat0_B = _swig_property(_simMessages.VSCMGConfigSimMsg_gsHat0_B_get, _simMessages.VSCMGConfigSimMsg_gsHat0_B_set)
    __swig_setmethods__["gsHat_B"] = _simMessages.VSCMGConfigSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _simMessages.VSCMGConfigSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_simMessages.VSCMGConfigSimMsg_gsHat_B_get, _simMessages.VSCMGConfigSimMsg_gsHat_B_set)
    __swig_setmethods__["gtHat0_B"] = _simMessages.VSCMGConfigSimMsg_gtHat0_B_set
    __swig_getmethods__["gtHat0_B"] = _simMessages.VSCMGConfigSimMsg_gtHat0_B_get
    if _newclass:
        gtHat0_B = _swig_property(_simMessages.VSCMGConfigSimMsg_gtHat0_B_get, _simMessages.VSCMGConfigSimMsg_gtHat0_B_set)
    __swig_setmethods__["gtHat_B"] = _simMessages.VSCMGConfigSimMsg_gtHat_B_set
    __swig_getmethods__["gtHat_B"] = _simMessages.VSCMGConfigSimMsg_gtHat_B_get
    if _newclass:
        gtHat_B = _swig_property(_simMessages.VSCMGConfigSimMsg_gtHat_B_get, _simMessages.VSCMGConfigSimMsg_gtHat_B_set)
    __swig_setmethods__["ggHat_B"] = _simMessages.VSCMGConfigSimMsg_ggHat_B_set
    __swig_getmethods__["ggHat_B"] = _simMessages.VSCMGConfigSimMsg_ggHat_B_get
    if _newclass:
        ggHat_B = _swig_property(_simMessages.VSCMGConfigSimMsg_ggHat_B_get, _simMessages.VSCMGConfigSimMsg_ggHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _simMessages.VSCMGConfigSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _simMessages.VSCMGConfigSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_simMessages.VSCMGConfigSimMsg_w2Hat0_B_get, _simMessages.VSCMGConfigSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w2Hat_B"] = _simMessages.VSCMGConfigSimMsg_w2Hat_B_set
    __swig_getmethods__["w2Hat_B"] = _simMessages.VSCMGConfigSimMsg_w2Hat_B_get
    if _newclass:
        w2Hat_B = _swig_property(_simMessages.VSCMGConfigSimMsg_w2Hat_B_get, _simMessages.VSCMGConfigSimMsg_w2Hat_B_set)
    __swig_setmethods__["w3Hat0_B"] = _simMessages.VSCMGConfigSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _simMessages.VSCMGConfigSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_simMessages.VSCMGConfigSimMsg_w3Hat0_B_get, _simMessages.VSCMGConfigSimMsg_w3Hat0_B_set)
    __swig_setmethods__["w3Hat_B"] = _simMessages.VSCMGConfigSimMsg_w3Hat_B_set
    __swig_getmethods__["w3Hat_B"] = _simMessages.VSCMGConfigSimMsg_w3Hat_B_get
    if _newclass:
        w3Hat_B = _swig_property(_simMessages.VSCMGConfigSimMsg_w3Hat_B_get, _simMessages.VSCMGConfigSimMsg_w3Hat_B_set)
    __swig_setmethods__["massV"] = _simMessages.VSCMGConfigSimMsg_massV_set
    __swig_getmethods__["massV"] = _simMessages.VSCMGConfigSimMsg_massV_get
    if _newclass:
        massV = _swig_property(_simMessages.VSCMGConfigSimMsg_massV_get, _simMessages.VSCMGConfigSimMsg_massV_set)
    __swig_setmethods__["massG"] = _simMessages.VSCMGConfigSimMsg_massG_set
    __swig_getmethods__["massG"] = _simMessages.VSCMGConfigSimMsg_massG_get
    if _newclass:
        massG = _swig_property(_simMessages.VSCMGConfigSimMsg_massG_get, _simMessages.VSCMGConfigSimMsg_massG_set)
    __swig_setmethods__["massW"] = _simMessages.VSCMGConfigSimMsg_massW_set
    __swig_getmethods__["massW"] = _simMessages.VSCMGConfigSimMsg_massW_get
    if _newclass:
        massW = _swig_property(_simMessages.VSCMGConfigSimMsg_massW_get, _simMessages.VSCMGConfigSimMsg_massW_set)
    __swig_setmethods__["theta"] = _simMessages.VSCMGConfigSimMsg_theta_set
    __swig_getmethods__["theta"] = _simMessages.VSCMGConfigSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_simMessages.VSCMGConfigSimMsg_theta_get, _simMessages.VSCMGConfigSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _simMessages.VSCMGConfigSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _simMessages.VSCMGConfigSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_simMessages.VSCMGConfigSimMsg_Omega_get, _simMessages.VSCMGConfigSimMsg_Omega_set)
    __swig_setmethods__["gamma"] = _simMessages.VSCMGConfigSimMsg_gamma_set
    __swig_getmethods__["gamma"] = _simMessages.VSCMGConfigSimMsg_gamma_get
    if _newclass:
        gamma = _swig_property(_simMessages.VSCMGConfigSimMsg_gamma_get, _simMessages.VSCMGConfigSimMsg_gamma_set)
    __swig_setmethods__["gammaDot"] = _simMessages.VSCMGConfigSimMsg_gammaDot_set
    __swig_getmethods__["gammaDot"] = _simMessages.VSCMGConfigSimMsg_gammaDot_get
    if _newclass:
        gammaDot = _swig_property(_simMessages.VSCMGConfigSimMsg_gammaDot_get, _simMessages.VSCMGConfigSimMsg_gammaDot_set)
    __swig_setmethods__["IW1"] = _simMessages.VSCMGConfigSimMsg_IW1_set
    __swig_getmethods__["IW1"] = _simMessages.VSCMGConfigSimMsg_IW1_get
    if _newclass:
        IW1 = _swig_property(_simMessages.VSCMGConfigSimMsg_IW1_get, _simMessages.VSCMGConfigSimMsg_IW1_set)
    __swig_setmethods__["IW2"] = _simMessages.VSCMGConfigSimMsg_IW2_set
    __swig_getmethods__["IW2"] = _simMessages.VSCMGConfigSimMsg_IW2_get
    if _newclass:
        IW2 = _swig_property(_simMessages.VSCMGConfigSimMsg_IW2_get, _simMessages.VSCMGConfigSimMsg_IW2_set)
    __swig_setmethods__["IW3"] = _simMessages.VSCMGConfigSimMsg_IW3_set
    __swig_getmethods__["IW3"] = _simMessages.VSCMGConfigSimMsg_IW3_get
    if _newclass:
        IW3 = _swig_property(_simMessages.VSCMGConfigSimMsg_IW3_get, _simMessages.VSCMGConfigSimMsg_IW3_set)
    __swig_setmethods__["IW13"] = _simMessages.VSCMGConfigSimMsg_IW13_set
    __swig_getmethods__["IW13"] = _simMessages.VSCMGConfigSimMsg_IW13_get
    if _newclass:
        IW13 = _swig_property(_simMessages.VSCMGConfigSimMsg_IW13_get, _simMessages.VSCMGConfigSimMsg_IW13_set)
    __swig_setmethods__["IG1"] = _simMessages.VSCMGConfigSimMsg_IG1_set
    __swig_getmethods__["IG1"] = _simMessages.VSCMGConfigSimMsg_IG1_get
    if _newclass:
        IG1 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG1_get, _simMessages.VSCMGConfigSimMsg_IG1_set)
    __swig_setmethods__["IG2"] = _simMessages.VSCMGConfigSimMsg_IG2_set
    __swig_getmethods__["IG2"] = _simMessages.VSCMGConfigSimMsg_IG2_get
    if _newclass:
        IG2 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG2_get, _simMessages.VSCMGConfigSimMsg_IG2_set)
    __swig_setmethods__["IG3"] = _simMessages.VSCMGConfigSimMsg_IG3_set
    __swig_getmethods__["IG3"] = _simMessages.VSCMGConfigSimMsg_IG3_get
    if _newclass:
        IG3 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG3_get, _simMessages.VSCMGConfigSimMsg_IG3_set)
    __swig_setmethods__["IG12"] = _simMessages.VSCMGConfigSimMsg_IG12_set
    __swig_getmethods__["IG12"] = _simMessages.VSCMGConfigSimMsg_IG12_get
    if _newclass:
        IG12 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG12_get, _simMessages.VSCMGConfigSimMsg_IG12_set)
    __swig_setmethods__["IG13"] = _simMessages.VSCMGConfigSimMsg_IG13_set
    __swig_getmethods__["IG13"] = _simMessages.VSCMGConfigSimMsg_IG13_get
    if _newclass:
        IG13 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG13_get, _simMessages.VSCMGConfigSimMsg_IG13_set)
    __swig_setmethods__["IG23"] = _simMessages.VSCMGConfigSimMsg_IG23_set
    __swig_getmethods__["IG23"] = _simMessages.VSCMGConfigSimMsg_IG23_get
    if _newclass:
        IG23 = _swig_property(_simMessages.VSCMGConfigSimMsg_IG23_get, _simMessages.VSCMGConfigSimMsg_IG23_set)
    __swig_setmethods__["IV1"] = _simMessages.VSCMGConfigSimMsg_IV1_set
    __swig_getmethods__["IV1"] = _simMessages.VSCMGConfigSimMsg_IV1_get
    if _newclass:
        IV1 = _swig_property(_simMessages.VSCMGConfigSimMsg_IV1_get, _simMessages.VSCMGConfigSimMsg_IV1_set)
    __swig_setmethods__["IV2"] = _simMessages.VSCMGConfigSimMsg_IV2_set
    __swig_getmethods__["IV2"] = _simMessages.VSCMGConfigSimMsg_IV2_get
    if _newclass:
        IV2 = _swig_property(_simMessages.VSCMGConfigSimMsg_IV2_get, _simMessages.VSCMGConfigSimMsg_IV2_set)
    __swig_setmethods__["IV3"] = _simMessages.VSCMGConfigSimMsg_IV3_set
    __swig_getmethods__["IV3"] = _simMessages.VSCMGConfigSimMsg_IV3_get
    if _newclass:
        IV3 = _swig_property(_simMessages.VSCMGConfigSimMsg_IV3_get, _simMessages.VSCMGConfigSimMsg_IV3_set)
    __swig_setmethods__["rhoG"] = _simMessages.VSCMGConfigSimMsg_rhoG_set
    __swig_getmethods__["rhoG"] = _simMessages.VSCMGConfigSimMsg_rhoG_get
    if _newclass:
        rhoG = _swig_property(_simMessages.VSCMGConfigSimMsg_rhoG_get, _simMessages.VSCMGConfigSimMsg_rhoG_set)
    __swig_setmethods__["rhoW"] = _simMessages.VSCMGConfigSimMsg_rhoW_set
    __swig_getmethods__["rhoW"] = _simMessages.VSCMGConfigSimMsg_rhoW_get
    if _newclass:
        rhoW = _swig_property(_simMessages.VSCMGConfigSimMsg_rhoW_get, _simMessages.VSCMGConfigSimMsg_rhoW_set)
    __swig_setmethods__["U_s"] = _simMessages.VSCMGConfigSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _simMessages.VSCMGConfigSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_simMessages.VSCMGConfigSimMsg_U_s_get, _simMessages.VSCMGConfigSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _simMessages.VSCMGConfigSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _simMessages.VSCMGConfigSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_simMessages.VSCMGConfigSimMsg_U_d_get, _simMessages.VSCMGConfigSimMsg_U_d_set)
    __swig_setmethods__["rGcG_G"] = _simMessages.VSCMGConfigSimMsg_rGcG_G_set
    __swig_getmethods__["rGcG_G"] = _simMessages.VSCMGConfigSimMsg_rGcG_G_get
    if _newclass:
        rGcG_G = _swig_property(_simMessages.VSCMGConfigSimMsg_rGcG_G_get, _simMessages.VSCMGConfigSimMsg_rGcG_G_set)
    __swig_setmethods__["d"] = _simMessages.VSCMGConfigSimMsg_d_set
    __swig_getmethods__["d"] = _simMessages.VSCMGConfigSimMsg_d_get
    if _newclass:
        d = _swig_property(_simMessages.VSCMGConfigSimMsg_d_get, _simMessages.VSCMGConfigSimMsg_d_set)
    __swig_setmethods__["l"] = _simMessages.VSCMGConfigSimMsg_l_set
    __swig_getmethods__["l"] = _simMessages.VSCMGConfigSimMsg_l_get
    if _newclass:
        l = _swig_property(_simMessages.VSCMGConfigSimMsg_l_get, _simMessages.VSCMGConfigSimMsg_l_set)
    __swig_setmethods__["L"] = _simMessages.VSCMGConfigSimMsg_L_set
    __swig_getmethods__["L"] = _simMessages.VSCMGConfigSimMsg_L_get
    if _newclass:
        L = _swig_property(_simMessages.VSCMGConfigSimMsg_L_get, _simMessages.VSCMGConfigSimMsg_L_set)
    __swig_setmethods__["u_s_current"] = _simMessages.VSCMGConfigSimMsg_u_s_current_set
    __swig_getmethods__["u_s_current"] = _simMessages.VSCMGConfigSimMsg_u_s_current_get
    if _newclass:
        u_s_current = _swig_property(_simMessages.VSCMGConfigSimMsg_u_s_current_get, _simMessages.VSCMGConfigSimMsg_u_s_current_set)
    __swig_setmethods__["u_s_max"] = _simMessages.VSCMGConfigSimMsg_u_s_max_set
    __swig_getmethods__["u_s_max"] = _simMessages.VSCMGConfigSimMsg_u_s_max_get
    if _newclass:
        u_s_max = _swig_property(_simMessages.VSCMGConfigSimMsg_u_s_max_get, _simMessages.VSCMGConfigSimMsg_u_s_max_set)
    __swig_setmethods__["u_s_min"] = _simMessages.VSCMGConfigSimMsg_u_s_min_set
    __swig_getmethods__["u_s_min"] = _simMessages.VSCMGConfigSimMsg_u_s_min_get
    if _newclass:
        u_s_min = _swig_property(_simMessages.VSCMGConfigSimMsg_u_s_min_get, _simMessages.VSCMGConfigSimMsg_u_s_min_set)
    __swig_setmethods__["u_s_f"] = _simMessages.VSCMGConfigSimMsg_u_s_f_set
    __swig_getmethods__["u_s_f"] = _simMessages.VSCMGConfigSimMsg_u_s_f_get
    if _newclass:
        u_s_f = _swig_property(_simMessages.VSCMGConfigSimMsg_u_s_f_get, _simMessages.VSCMGConfigSimMsg_u_s_f_set)
    __swig_setmethods__["Omega_max"] = _simMessages.VSCMGConfigSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _simMessages.VSCMGConfigSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_simMessages.VSCMGConfigSimMsg_Omega_max_get, _simMessages.VSCMGConfigSimMsg_Omega_max_set)
    __swig_setmethods__["wheelLinearFrictionRatio"] = _simMessages.VSCMGConfigSimMsg_wheelLinearFrictionRatio_set
    __swig_getmethods__["wheelLinearFrictionRatio"] = _simMessages.VSCMGConfigSimMsg_wheelLinearFrictionRatio_get
    if _newclass:
        wheelLinearFrictionRatio = _swig_property(_simMessages.VSCMGConfigSimMsg_wheelLinearFrictionRatio_get, _simMessages.VSCMGConfigSimMsg_wheelLinearFrictionRatio_set)
    __swig_setmethods__["u_g_current"] = _simMessages.VSCMGConfigSimMsg_u_g_current_set
    __swig_getmethods__["u_g_current"] = _simMessages.VSCMGConfigSimMsg_u_g_current_get
    if _newclass:
        u_g_current = _swig_property(_simMessages.VSCMGConfigSimMsg_u_g_current_get, _simMessages.VSCMGConfigSimMsg_u_g_current_set)
    __swig_setmethods__["u_g_max"] = _simMessages.VSCMGConfigSimMsg_u_g_max_set
    __swig_getmethods__["u_g_max"] = _simMessages.VSCMGConfigSimMsg_u_g_max_get
    if _newclass:
        u_g_max = _swig_property(_simMessages.VSCMGConfigSimMsg_u_g_max_get, _simMessages.VSCMGConfigSimMsg_u_g_max_set)
    __swig_setmethods__["u_g_min"] = _simMessages.VSCMGConfigSimMsg_u_g_min_set
    __swig_getmethods__["u_g_min"] = _simMessages.VSCMGConfigSimMsg_u_g_min_get
    if _newclass:
        u_g_min = _swig_property(_simMessages.VSCMGConfigSimMsg_u_g_min_get, _simMessages.VSCMGConfigSimMsg_u_g_min_set)
    __swig_setmethods__["u_g_f"] = _simMessages.VSCMGConfigSimMsg_u_g_f_set
    __swig_getmethods__["u_g_f"] = _simMessages.VSCMGConfigSimMsg_u_g_f_get
    if _newclass:
        u_g_f = _swig_property(_simMessages.VSCMGConfigSimMsg_u_g_f_get, _simMessages.VSCMGConfigSimMsg_u_g_f_set)
    __swig_setmethods__["gammaDot_max"] = _simMessages.VSCMGConfigSimMsg_gammaDot_max_set
    __swig_getmethods__["gammaDot_max"] = _simMessages.VSCMGConfigSimMsg_gammaDot_max_get
    if _newclass:
        gammaDot_max = _swig_property(_simMessages.VSCMGConfigSimMsg_gammaDot_max_get, _simMessages.VSCMGConfigSimMsg_gammaDot_max_set)
    __swig_setmethods__["gimbalLinearFrictionRatio"] = _simMessages.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_set
    __swig_getmethods__["gimbalLinearFrictionRatio"] = _simMessages.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_get
    if _newclass:
        gimbalLinearFrictionRatio = _swig_property(_simMessages.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_get, _simMessages.VSCMGConfigSimMsg_gimbalLinearFrictionRatio_set)
    __swig_setmethods__["IGPntGc_B"] = _simMessages.VSCMGConfigSimMsg_IGPntGc_B_set
    __swig_getmethods__["IGPntGc_B"] = _simMessages.VSCMGConfigSimMsg_IGPntGc_B_get
    if _newclass:
        IGPntGc_B = _swig_property(_simMessages.VSCMGConfigSimMsg_IGPntGc_B_get, _simMessages.VSCMGConfigSimMsg_IGPntGc_B_set)
    __swig_setmethods__["IWPntWc_B"] = _simMessages.VSCMGConfigSimMsg_IWPntWc_B_set
    __swig_getmethods__["IWPntWc_B"] = _simMessages.VSCMGConfigSimMsg_IWPntWc_B_get
    if _newclass:
        IWPntWc_B = _swig_property(_simMessages.VSCMGConfigSimMsg_IWPntWc_B_get, _simMessages.VSCMGConfigSimMsg_IWPntWc_B_set)
    __swig_setmethods__["IPrimeGPntGc_B"] = _simMessages.VSCMGConfigSimMsg_IPrimeGPntGc_B_set
    __swig_getmethods__["IPrimeGPntGc_B"] = _simMessages.VSCMGConfigSimMsg_IPrimeGPntGc_B_get
    if _newclass:
        IPrimeGPntGc_B = _swig_property(_simMessages.VSCMGConfigSimMsg_IPrimeGPntGc_B_get, _simMessages.VSCMGConfigSimMsg_IPrimeGPntGc_B_set)
    __swig_setmethods__["IPrimeWPntWc_B"] = _simMessages.VSCMGConfigSimMsg_IPrimeWPntWc_B_set
    __swig_getmethods__["IPrimeWPntWc_B"] = _simMessages.VSCMGConfigSimMsg_IPrimeWPntWc_B_get
    if _newclass:
        IPrimeWPntWc_B = _swig_property(_simMessages.VSCMGConfigSimMsg_IPrimeWPntWc_B_get, _simMessages.VSCMGConfigSimMsg_IPrimeWPntWc_B_set)
    __swig_setmethods__["rGcG_B"] = _simMessages.VSCMGConfigSimMsg_rGcG_B_set
    __swig_getmethods__["rGcG_B"] = _simMessages.VSCMGConfigSimMsg_rGcG_B_get
    if _newclass:
        rGcG_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rGcG_B_get, _simMessages.VSCMGConfigSimMsg_rGcG_B_set)
    __swig_setmethods__["rGcB_B"] = _simMessages.VSCMGConfigSimMsg_rGcB_B_set
    __swig_getmethods__["rGcB_B"] = _simMessages.VSCMGConfigSimMsg_rGcB_B_get
    if _newclass:
        rGcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rGcB_B_get, _simMessages.VSCMGConfigSimMsg_rGcB_B_set)
    __swig_setmethods__["rWcB_B"] = _simMessages.VSCMGConfigSimMsg_rWcB_B_set
    __swig_getmethods__["rWcB_B"] = _simMessages.VSCMGConfigSimMsg_rWcB_B_get
    if _newclass:
        rWcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rWcB_B_get, _simMessages.VSCMGConfigSimMsg_rWcB_B_set)
    __swig_setmethods__["rWcG_B"] = _simMessages.VSCMGConfigSimMsg_rWcG_B_set
    __swig_getmethods__["rWcG_B"] = _simMessages.VSCMGConfigSimMsg_rWcG_B_get
    if _newclass:
        rWcG_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rWcG_B_get, _simMessages.VSCMGConfigSimMsg_rWcG_B_set)
    __swig_setmethods__["rTildeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rTildeGcB_B_set
    __swig_getmethods__["rTildeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rTildeGcB_B_get
    if _newclass:
        rTildeGcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rTildeGcB_B_get, _simMessages.VSCMGConfigSimMsg_rTildeGcB_B_set)
    __swig_setmethods__["rTildeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rTildeWcB_B_set
    __swig_getmethods__["rTildeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rTildeWcB_B_get
    if _newclass:
        rTildeWcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rTildeWcB_B_get, _simMessages.VSCMGConfigSimMsg_rTildeWcB_B_set)
    __swig_setmethods__["rPrimeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeGcB_B_set
    __swig_getmethods__["rPrimeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeGcB_B_get
    if _newclass:
        rPrimeGcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rPrimeGcB_B_get, _simMessages.VSCMGConfigSimMsg_rPrimeGcB_B_set)
    __swig_setmethods__["rPrimeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeWcB_B_set
    __swig_getmethods__["rPrimeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeWcB_B_get
    if _newclass:
        rPrimeWcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rPrimeWcB_B_get, _simMessages.VSCMGConfigSimMsg_rPrimeWcB_B_set)
    __swig_setmethods__["rPrimeTildeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeTildeGcB_B_set
    __swig_getmethods__["rPrimeTildeGcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeTildeGcB_B_get
    if _newclass:
        rPrimeTildeGcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rPrimeTildeGcB_B_get, _simMessages.VSCMGConfigSimMsg_rPrimeTildeGcB_B_set)
    __swig_setmethods__["rPrimeTildeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeTildeWcB_B_set
    __swig_getmethods__["rPrimeTildeWcB_B"] = _simMessages.VSCMGConfigSimMsg_rPrimeTildeWcB_B_get
    if _newclass:
        rPrimeTildeWcB_B = _swig_property(_simMessages.VSCMGConfigSimMsg_rPrimeTildeWcB_B_get, _simMessages.VSCMGConfigSimMsg_rPrimeTildeWcB_B_set)
    __swig_setmethods__["aOmega"] = _simMessages.VSCMGConfigSimMsg_aOmega_set
    __swig_getmethods__["aOmega"] = _simMessages.VSCMGConfigSimMsg_aOmega_get
    if _newclass:
        aOmega = _swig_property(_simMessages.VSCMGConfigSimMsg_aOmega_get, _simMessages.VSCMGConfigSimMsg_aOmega_set)
    __swig_setmethods__["bOmega"] = _simMessages.VSCMGConfigSimMsg_bOmega_set
    __swig_getmethods__["bOmega"] = _simMessages.VSCMGConfigSimMsg_bOmega_get
    if _newclass:
        bOmega = _swig_property(_simMessages.VSCMGConfigSimMsg_bOmega_get, _simMessages.VSCMGConfigSimMsg_bOmega_set)
    __swig_setmethods__["cOmega"] = _simMessages.VSCMGConfigSimMsg_cOmega_set
    __swig_getmethods__["cOmega"] = _simMessages.VSCMGConfigSimMsg_cOmega_get
    if _newclass:
        cOmega = _swig_property(_simMessages.VSCMGConfigSimMsg_cOmega_get, _simMessages.VSCMGConfigSimMsg_cOmega_set)
    __swig_setmethods__["dOmega"] = _simMessages.VSCMGConfigSimMsg_dOmega_set
    __swig_getmethods__["dOmega"] = _simMessages.VSCMGConfigSimMsg_dOmega_get
    if _newclass:
        dOmega = _swig_property(_simMessages.VSCMGConfigSimMsg_dOmega_get, _simMessages.VSCMGConfigSimMsg_dOmega_set)
    __swig_setmethods__["eOmega"] = _simMessages.VSCMGConfigSimMsg_eOmega_set
    __swig_getmethods__["eOmega"] = _simMessages.VSCMGConfigSimMsg_eOmega_get
    if _newclass:
        eOmega = _swig_property(_simMessages.VSCMGConfigSimMsg_eOmega_get, _simMessages.VSCMGConfigSimMsg_eOmega_set)
    __swig_setmethods__["agamma"] = _simMessages.VSCMGConfigSimMsg_agamma_set
    __swig_getmethods__["agamma"] = _simMessages.VSCMGConfigSimMsg_agamma_get
    if _newclass:
        agamma = _swig_property(_simMessages.VSCMGConfigSimMsg_agamma_get, _simMessages.VSCMGConfigSimMsg_agamma_set)
    __swig_setmethods__["bgamma"] = _simMessages.VSCMGConfigSimMsg_bgamma_set
    __swig_getmethods__["bgamma"] = _simMessages.VSCMGConfigSimMsg_bgamma_get
    if _newclass:
        bgamma = _swig_property(_simMessages.VSCMGConfigSimMsg_bgamma_get, _simMessages.VSCMGConfigSimMsg_bgamma_set)
    __swig_setmethods__["cgamma"] = _simMessages.VSCMGConfigSimMsg_cgamma_set
    __swig_getmethods__["cgamma"] = _simMessages.VSCMGConfigSimMsg_cgamma_get
    if _newclass:
        cgamma = _swig_property(_simMessages.VSCMGConfigSimMsg_cgamma_get, _simMessages.VSCMGConfigSimMsg_cgamma_set)
    __swig_setmethods__["dgamma"] = _simMessages.VSCMGConfigSimMsg_dgamma_set
    __swig_getmethods__["dgamma"] = _simMessages.VSCMGConfigSimMsg_dgamma_get
    if _newclass:
        dgamma = _swig_property(_simMessages.VSCMGConfigSimMsg_dgamma_get, _simMessages.VSCMGConfigSimMsg_dgamma_set)
    __swig_setmethods__["egamma"] = _simMessages.VSCMGConfigSimMsg_egamma_set
    __swig_getmethods__["egamma"] = _simMessages.VSCMGConfigSimMsg_egamma_get
    if _newclass:
        egamma = _swig_property(_simMessages.VSCMGConfigSimMsg_egamma_get, _simMessages.VSCMGConfigSimMsg_egamma_set)
    __swig_setmethods__["p"] = _simMessages.VSCMGConfigSimMsg_p_set
    __swig_getmethods__["p"] = _simMessages.VSCMGConfigSimMsg_p_get
    if _newclass:
        p = _swig_property(_simMessages.VSCMGConfigSimMsg_p_get, _simMessages.VSCMGConfigSimMsg_p_set)
    __swig_setmethods__["q"] = _simMessages.VSCMGConfigSimMsg_q_set
    __swig_getmethods__["q"] = _simMessages.VSCMGConfigSimMsg_q_get
    if _newclass:
        q = _swig_property(_simMessages.VSCMGConfigSimMsg_q_get, _simMessages.VSCMGConfigSimMsg_q_set)
    __swig_setmethods__["s"] = _simMessages.VSCMGConfigSimMsg_s_set
    __swig_getmethods__["s"] = _simMessages.VSCMGConfigSimMsg_s_get
    if _newclass:
        s = _swig_property(_simMessages.VSCMGConfigSimMsg_s_get, _simMessages.VSCMGConfigSimMsg_s_set)
    __swig_setmethods__["gravityTorqueWheel_s"] = _simMessages.VSCMGConfigSimMsg_gravityTorqueWheel_s_set
    __swig_getmethods__["gravityTorqueWheel_s"] = _simMessages.VSCMGConfigSimMsg_gravityTorqueWheel_s_get
    if _newclass:
        gravityTorqueWheel_s = _swig_property(_simMessages.VSCMGConfigSimMsg_gravityTorqueWheel_s_get, _simMessages.VSCMGConfigSimMsg_gravityTorqueWheel_s_set)
    __swig_setmethods__["gravityTorqueGimbal_g"] = _simMessages.VSCMGConfigSimMsg_gravityTorqueGimbal_g_set
    __swig_getmethods__["gravityTorqueGimbal_g"] = _simMessages.VSCMGConfigSimMsg_gravityTorqueGimbal_g_get
    if _newclass:
        gravityTorqueGimbal_g = _swig_property(_simMessages.VSCMGConfigSimMsg_gravityTorqueGimbal_g_get, _simMessages.VSCMGConfigSimMsg_gravityTorqueGimbal_g_set)

    def __init__(self, *args):
        this = _simMessages.new_VSCMGConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_VSCMGConfigSimMsg
    __del__ = lambda self: None
VSCMGConfigSimMsg_swigregister = _simMessages.VSCMGConfigSimMsg_swigregister
VSCMGConfigSimMsg_swigregister(VSCMGConfigSimMsg)

sizeof_VSCMGConfigSimMsg = _simMessages.sizeof_VSCMGConfigSimMsg
class VSCMGCmdSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSCMGCmdSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSCMGCmdSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u_s_cmd"] = _simMessages.VSCMGCmdSimMsg_u_s_cmd_set
    __swig_getmethods__["u_s_cmd"] = _simMessages.VSCMGCmdSimMsg_u_s_cmd_get
    if _newclass:
        u_s_cmd = _swig_property(_simMessages.VSCMGCmdSimMsg_u_s_cmd_get, _simMessages.VSCMGCmdSimMsg_u_s_cmd_set)
    __swig_setmethods__["u_g_cmd"] = _simMessages.VSCMGCmdSimMsg_u_g_cmd_set
    __swig_getmethods__["u_g_cmd"] = _simMessages.VSCMGCmdSimMsg_u_g_cmd_get
    if _newclass:
        u_g_cmd = _swig_property(_simMessages.VSCMGCmdSimMsg_u_g_cmd_get, _simMessages.VSCMGCmdSimMsg_u_g_cmd_set)

    def __init__(self, *args):
        this = _simMessages.new_VSCMGCmdSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_VSCMGCmdSimMsg
    __del__ = lambda self: None
VSCMGCmdSimMsg_swigregister = _simMessages.VSCMGCmdSimMsg_swigregister
VSCMGCmdSimMsg_swigregister(VSCMGCmdSimMsg)

sizeof_VSCMGCmdSimMsg = _simMessages.sizeof_VSCMGCmdSimMsg
class RWCmdSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWCmdSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWCmdSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u_cmd"] = _simMessages.RWCmdSimMsg_u_cmd_set
    __swig_getmethods__["u_cmd"] = _simMessages.RWCmdSimMsg_u_cmd_get
    if _newclass:
        u_cmd = _swig_property(_simMessages.RWCmdSimMsg_u_cmd_get, _simMessages.RWCmdSimMsg_u_cmd_set)

    def __init__(self, *args):
        this = _simMessages.new_RWCmdSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_RWCmdSimMsg
    __del__ = lambda self: None
RWCmdSimMsg_swigregister = _simMessages.RWCmdSimMsg_swigregister
RWCmdSimMsg_swigregister(RWCmdSimMsg)

sizeof_RWCmdSimMsg = _simMessages.sizeof_RWCmdSimMsg
BalancedWheels = _simMessages.BalancedWheels
JitterSimple = _simMessages.JitterSimple
JitterFullyCoupled = _simMessages.JitterFullyCoupled
class RWConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rWB_B"] = _simMessages.RWConfigSimMsg_rWB_B_set
    __swig_getmethods__["rWB_B"] = _simMessages.RWConfigSimMsg_rWB_B_get
    if _newclass:
        rWB_B = _swig_property(_simMessages.RWConfigSimMsg_rWB_B_get, _simMessages.RWConfigSimMsg_rWB_B_set)
    __swig_setmethods__["gsHat_B"] = _simMessages.RWConfigSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _simMessages.RWConfigSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_simMessages.RWConfigSimMsg_gsHat_B_get, _simMessages.RWConfigSimMsg_gsHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _simMessages.RWConfigSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _simMessages.RWConfigSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_simMessages.RWConfigSimMsg_w2Hat0_B_get, _simMessages.RWConfigSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w3Hat0_B"] = _simMessages.RWConfigSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _simMessages.RWConfigSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_simMessages.RWConfigSimMsg_w3Hat0_B_get, _simMessages.RWConfigSimMsg_w3Hat0_B_set)
    __swig_setmethods__["mass"] = _simMessages.RWConfigSimMsg_mass_set
    __swig_getmethods__["mass"] = _simMessages.RWConfigSimMsg_mass_get
    if _newclass:
        mass = _swig_property(_simMessages.RWConfigSimMsg_mass_get, _simMessages.RWConfigSimMsg_mass_set)
    __swig_setmethods__["theta"] = _simMessages.RWConfigSimMsg_theta_set
    __swig_getmethods__["theta"] = _simMessages.RWConfigSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_simMessages.RWConfigSimMsg_theta_get, _simMessages.RWConfigSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _simMessages.RWConfigSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _simMessages.RWConfigSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_simMessages.RWConfigSimMsg_Omega_get, _simMessages.RWConfigSimMsg_Omega_set)
    __swig_setmethods__["Js"] = _simMessages.RWConfigSimMsg_Js_set
    __swig_getmethods__["Js"] = _simMessages.RWConfigSimMsg_Js_get
    if _newclass:
        Js = _swig_property(_simMessages.RWConfigSimMsg_Js_get, _simMessages.RWConfigSimMsg_Js_set)
    __swig_setmethods__["Jt"] = _simMessages.RWConfigSimMsg_Jt_set
    __swig_getmethods__["Jt"] = _simMessages.RWConfigSimMsg_Jt_get
    if _newclass:
        Jt = _swig_property(_simMessages.RWConfigSimMsg_Jt_get, _simMessages.RWConfigSimMsg_Jt_set)
    __swig_setmethods__["Jg"] = _simMessages.RWConfigSimMsg_Jg_set
    __swig_getmethods__["Jg"] = _simMessages.RWConfigSimMsg_Jg_get
    if _newclass:
        Jg = _swig_property(_simMessages.RWConfigSimMsg_Jg_get, _simMessages.RWConfigSimMsg_Jg_set)
    __swig_setmethods__["U_s"] = _simMessages.RWConfigSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _simMessages.RWConfigSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_simMessages.RWConfigSimMsg_U_s_get, _simMessages.RWConfigSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _simMessages.RWConfigSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _simMessages.RWConfigSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_simMessages.RWConfigSimMsg_U_d_get, _simMessages.RWConfigSimMsg_U_d_set)
    __swig_setmethods__["d"] = _simMessages.RWConfigSimMsg_d_set
    __swig_getmethods__["d"] = _simMessages.RWConfigSimMsg_d_get
    if _newclass:
        d = _swig_property(_simMessages.RWConfigSimMsg_d_get, _simMessages.RWConfigSimMsg_d_set)
    __swig_setmethods__["J13"] = _simMessages.RWConfigSimMsg_J13_set
    __swig_getmethods__["J13"] = _simMessages.RWConfigSimMsg_J13_get
    if _newclass:
        J13 = _swig_property(_simMessages.RWConfigSimMsg_J13_get, _simMessages.RWConfigSimMsg_J13_set)
    __swig_setmethods__["u_current"] = _simMessages.RWConfigSimMsg_u_current_set
    __swig_getmethods__["u_current"] = _simMessages.RWConfigSimMsg_u_current_get
    if _newclass:
        u_current = _swig_property(_simMessages.RWConfigSimMsg_u_current_get, _simMessages.RWConfigSimMsg_u_current_set)
    __swig_setmethods__["u_max"] = _simMessages.RWConfigSimMsg_u_max_set
    __swig_getmethods__["u_max"] = _simMessages.RWConfigSimMsg_u_max_get
    if _newclass:
        u_max = _swig_property(_simMessages.RWConfigSimMsg_u_max_get, _simMessages.RWConfigSimMsg_u_max_set)
    __swig_setmethods__["u_min"] = _simMessages.RWConfigSimMsg_u_min_set
    __swig_getmethods__["u_min"] = _simMessages.RWConfigSimMsg_u_min_get
    if _newclass:
        u_min = _swig_property(_simMessages.RWConfigSimMsg_u_min_get, _simMessages.RWConfigSimMsg_u_min_set)
    __swig_setmethods__["fCoulomb"] = _simMessages.RWConfigSimMsg_fCoulomb_set
    __swig_getmethods__["fCoulomb"] = _simMessages.RWConfigSimMsg_fCoulomb_get
    if _newclass:
        fCoulomb = _swig_property(_simMessages.RWConfigSimMsg_fCoulomb_get, _simMessages.RWConfigSimMsg_fCoulomb_set)
    __swig_setmethods__["fStatic"] = _simMessages.RWConfigSimMsg_fStatic_set
    __swig_getmethods__["fStatic"] = _simMessages.RWConfigSimMsg_fStatic_get
    if _newclass:
        fStatic = _swig_property(_simMessages.RWConfigSimMsg_fStatic_get, _simMessages.RWConfigSimMsg_fStatic_set)
    __swig_setmethods__["betaStatic"] = _simMessages.RWConfigSimMsg_betaStatic_set
    __swig_getmethods__["betaStatic"] = _simMessages.RWConfigSimMsg_betaStatic_get
    if _newclass:
        betaStatic = _swig_property(_simMessages.RWConfigSimMsg_betaStatic_get, _simMessages.RWConfigSimMsg_betaStatic_set)
    __swig_setmethods__["cViscous"] = _simMessages.RWConfigSimMsg_cViscous_set
    __swig_getmethods__["cViscous"] = _simMessages.RWConfigSimMsg_cViscous_get
    if _newclass:
        cViscous = _swig_property(_simMessages.RWConfigSimMsg_cViscous_get, _simMessages.RWConfigSimMsg_cViscous_set)
    __swig_setmethods__["omegaLimitCycle"] = _simMessages.RWConfigSimMsg_omegaLimitCycle_set
    __swig_getmethods__["omegaLimitCycle"] = _simMessages.RWConfigSimMsg_omegaLimitCycle_get
    if _newclass:
        omegaLimitCycle = _swig_property(_simMessages.RWConfigSimMsg_omegaLimitCycle_get, _simMessages.RWConfigSimMsg_omegaLimitCycle_set)
    __swig_setmethods__["frictionTorque"] = _simMessages.RWConfigSimMsg_frictionTorque_set
    __swig_getmethods__["frictionTorque"] = _simMessages.RWConfigSimMsg_frictionTorque_get
    if _newclass:
        frictionTorque = _swig_property(_simMessages.RWConfigSimMsg_frictionTorque_get, _simMessages.RWConfigSimMsg_frictionTorque_set)
    __swig_setmethods__["omegaBefore"] = _simMessages.RWConfigSimMsg_omegaBefore_set
    __swig_getmethods__["omegaBefore"] = _simMessages.RWConfigSimMsg_omegaBefore_get
    if _newclass:
        omegaBefore = _swig_property(_simMessages.RWConfigSimMsg_omegaBefore_get, _simMessages.RWConfigSimMsg_omegaBefore_set)
    __swig_setmethods__["frictionStribeck"] = _simMessages.RWConfigSimMsg_frictionStribeck_set
    __swig_getmethods__["frictionStribeck"] = _simMessages.RWConfigSimMsg_frictionStribeck_get
    if _newclass:
        frictionStribeck = _swig_property(_simMessages.RWConfigSimMsg_frictionStribeck_get, _simMessages.RWConfigSimMsg_frictionStribeck_set)
    __swig_setmethods__["Omega_max"] = _simMessages.RWConfigSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _simMessages.RWConfigSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_simMessages.RWConfigSimMsg_Omega_max_get, _simMessages.RWConfigSimMsg_Omega_max_set)
    __swig_setmethods__["RWModel"] = _simMessages.RWConfigSimMsg_RWModel_set
    __swig_getmethods__["RWModel"] = _simMessages.RWConfigSimMsg_RWModel_get
    if _newclass:
        RWModel = _swig_property(_simMessages.RWConfigSimMsg_RWModel_get, _simMessages.RWConfigSimMsg_RWModel_set)
    __swig_setmethods__["aOmega"] = _simMessages.RWConfigSimMsg_aOmega_set
    __swig_getmethods__["aOmega"] = _simMessages.RWConfigSimMsg_aOmega_get
    if _newclass:
        aOmega = _swig_property(_simMessages.RWConfigSimMsg_aOmega_get, _simMessages.RWConfigSimMsg_aOmega_set)
    __swig_setmethods__["bOmega"] = _simMessages.RWConfigSimMsg_bOmega_set
    __swig_getmethods__["bOmega"] = _simMessages.RWConfigSimMsg_bOmega_get
    if _newclass:
        bOmega = _swig_property(_simMessages.RWConfigSimMsg_bOmega_get, _simMessages.RWConfigSimMsg_bOmega_set)
    __swig_setmethods__["cOmega"] = _simMessages.RWConfigSimMsg_cOmega_set
    __swig_getmethods__["cOmega"] = _simMessages.RWConfigSimMsg_cOmega_get
    if _newclass:
        cOmega = _swig_property(_simMessages.RWConfigSimMsg_cOmega_get, _simMessages.RWConfigSimMsg_cOmega_set)
    __swig_setmethods__["IRWPntWc_B"] = _simMessages.RWConfigSimMsg_IRWPntWc_B_set
    __swig_getmethods__["IRWPntWc_B"] = _simMessages.RWConfigSimMsg_IRWPntWc_B_get
    if _newclass:
        IRWPntWc_B = _swig_property(_simMessages.RWConfigSimMsg_IRWPntWc_B_get, _simMessages.RWConfigSimMsg_IRWPntWc_B_set)
    __swig_setmethods__["IPrimeRWPntWc_B"] = _simMessages.RWConfigSimMsg_IPrimeRWPntWc_B_set
    __swig_getmethods__["IPrimeRWPntWc_B"] = _simMessages.RWConfigSimMsg_IPrimeRWPntWc_B_get
    if _newclass:
        IPrimeRWPntWc_B = _swig_property(_simMessages.RWConfigSimMsg_IPrimeRWPntWc_B_get, _simMessages.RWConfigSimMsg_IPrimeRWPntWc_B_set)
    __swig_setmethods__["rWcB_B"] = _simMessages.RWConfigSimMsg_rWcB_B_set
    __swig_getmethods__["rWcB_B"] = _simMessages.RWConfigSimMsg_rWcB_B_get
    if _newclass:
        rWcB_B = _swig_property(_simMessages.RWConfigSimMsg_rWcB_B_get, _simMessages.RWConfigSimMsg_rWcB_B_set)
    __swig_setmethods__["rTildeWcB_B"] = _simMessages.RWConfigSimMsg_rTildeWcB_B_set
    __swig_getmethods__["rTildeWcB_B"] = _simMessages.RWConfigSimMsg_rTildeWcB_B_get
    if _newclass:
        rTildeWcB_B = _swig_property(_simMessages.RWConfigSimMsg_rTildeWcB_B_get, _simMessages.RWConfigSimMsg_rTildeWcB_B_set)
    __swig_setmethods__["rPrimeWcB_B"] = _simMessages.RWConfigSimMsg_rPrimeWcB_B_set
    __swig_getmethods__["rPrimeWcB_B"] = _simMessages.RWConfigSimMsg_rPrimeWcB_B_get
    if _newclass:
        rPrimeWcB_B = _swig_property(_simMessages.RWConfigSimMsg_rPrimeWcB_B_get, _simMessages.RWConfigSimMsg_rPrimeWcB_B_set)
    __swig_setmethods__["w2Hat_B"] = _simMessages.RWConfigSimMsg_w2Hat_B_set
    __swig_getmethods__["w2Hat_B"] = _simMessages.RWConfigSimMsg_w2Hat_B_get
    if _newclass:
        w2Hat_B = _swig_property(_simMessages.RWConfigSimMsg_w2Hat_B_get, _simMessages.RWConfigSimMsg_w2Hat_B_set)
    __swig_setmethods__["w3Hat_B"] = _simMessages.RWConfigSimMsg_w3Hat_B_set
    __swig_getmethods__["w3Hat_B"] = _simMessages.RWConfigSimMsg_w3Hat_B_get
    if _newclass:
        w3Hat_B = _swig_property(_simMessages.RWConfigSimMsg_w3Hat_B_get, _simMessages.RWConfigSimMsg_w3Hat_B_set)
    __swig_setmethods__["label"] = _simMessages.RWConfigSimMsg_label_set
    __swig_getmethods__["label"] = _simMessages.RWConfigSimMsg_label_get
    if _newclass:
        label = _swig_property(_simMessages.RWConfigSimMsg_label_get, _simMessages.RWConfigSimMsg_label_set)

    def __init__(self, *args):
        this = _simMessages.new_RWConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_RWConfigSimMsg
    __del__ = lambda self: None
RWConfigSimMsg_swigregister = _simMessages.RWConfigSimMsg_swigregister
RWConfigSimMsg_swigregister(RWConfigSimMsg)

sizeof_RWConfigSimMsg = _simMessages.sizeof_RWConfigSimMsg
class RWConfigLogSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RWConfigLogSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RWConfigLogSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rWB_B"] = _simMessages.RWConfigLogSimMsg_rWB_B_set
    __swig_getmethods__["rWB_B"] = _simMessages.RWConfigLogSimMsg_rWB_B_get
    if _newclass:
        rWB_B = _swig_property(_simMessages.RWConfigLogSimMsg_rWB_B_get, _simMessages.RWConfigLogSimMsg_rWB_B_set)
    __swig_setmethods__["gsHat_B"] = _simMessages.RWConfigLogSimMsg_gsHat_B_set
    __swig_getmethods__["gsHat_B"] = _simMessages.RWConfigLogSimMsg_gsHat_B_get
    if _newclass:
        gsHat_B = _swig_property(_simMessages.RWConfigLogSimMsg_gsHat_B_get, _simMessages.RWConfigLogSimMsg_gsHat_B_set)
    __swig_setmethods__["w2Hat0_B"] = _simMessages.RWConfigLogSimMsg_w2Hat0_B_set
    __swig_getmethods__["w2Hat0_B"] = _simMessages.RWConfigLogSimMsg_w2Hat0_B_get
    if _newclass:
        w2Hat0_B = _swig_property(_simMessages.RWConfigLogSimMsg_w2Hat0_B_get, _simMessages.RWConfigLogSimMsg_w2Hat0_B_set)
    __swig_setmethods__["w3Hat0_B"] = _simMessages.RWConfigLogSimMsg_w3Hat0_B_set
    __swig_getmethods__["w3Hat0_B"] = _simMessages.RWConfigLogSimMsg_w3Hat0_B_get
    if _newclass:
        w3Hat0_B = _swig_property(_simMessages.RWConfigLogSimMsg_w3Hat0_B_get, _simMessages.RWConfigLogSimMsg_w3Hat0_B_set)
    __swig_setmethods__["mass"] = _simMessages.RWConfigLogSimMsg_mass_set
    __swig_getmethods__["mass"] = _simMessages.RWConfigLogSimMsg_mass_get
    if _newclass:
        mass = _swig_property(_simMessages.RWConfigLogSimMsg_mass_get, _simMessages.RWConfigLogSimMsg_mass_set)
    __swig_setmethods__["theta"] = _simMessages.RWConfigLogSimMsg_theta_set
    __swig_getmethods__["theta"] = _simMessages.RWConfigLogSimMsg_theta_get
    if _newclass:
        theta = _swig_property(_simMessages.RWConfigLogSimMsg_theta_get, _simMessages.RWConfigLogSimMsg_theta_set)
    __swig_setmethods__["Omega"] = _simMessages.RWConfigLogSimMsg_Omega_set
    __swig_getmethods__["Omega"] = _simMessages.RWConfigLogSimMsg_Omega_get
    if _newclass:
        Omega = _swig_property(_simMessages.RWConfigLogSimMsg_Omega_get, _simMessages.RWConfigLogSimMsg_Omega_set)
    __swig_setmethods__["Js"] = _simMessages.RWConfigLogSimMsg_Js_set
    __swig_getmethods__["Js"] = _simMessages.RWConfigLogSimMsg_Js_get
    if _newclass:
        Js = _swig_property(_simMessages.RWConfigLogSimMsg_Js_get, _simMessages.RWConfigLogSimMsg_Js_set)
    __swig_setmethods__["Jt"] = _simMessages.RWConfigLogSimMsg_Jt_set
    __swig_getmethods__["Jt"] = _simMessages.RWConfigLogSimMsg_Jt_get
    if _newclass:
        Jt = _swig_property(_simMessages.RWConfigLogSimMsg_Jt_get, _simMessages.RWConfigLogSimMsg_Jt_set)
    __swig_setmethods__["Jg"] = _simMessages.RWConfigLogSimMsg_Jg_set
    __swig_getmethods__["Jg"] = _simMessages.RWConfigLogSimMsg_Jg_get
    if _newclass:
        Jg = _swig_property(_simMessages.RWConfigLogSimMsg_Jg_get, _simMessages.RWConfigLogSimMsg_Jg_set)
    __swig_setmethods__["U_s"] = _simMessages.RWConfigLogSimMsg_U_s_set
    __swig_getmethods__["U_s"] = _simMessages.RWConfigLogSimMsg_U_s_get
    if _newclass:
        U_s = _swig_property(_simMessages.RWConfigLogSimMsg_U_s_get, _simMessages.RWConfigLogSimMsg_U_s_set)
    __swig_setmethods__["U_d"] = _simMessages.RWConfigLogSimMsg_U_d_set
    __swig_getmethods__["U_d"] = _simMessages.RWConfigLogSimMsg_U_d_get
    if _newclass:
        U_d = _swig_property(_simMessages.RWConfigLogSimMsg_U_d_get, _simMessages.RWConfigLogSimMsg_U_d_set)
    __swig_setmethods__["d"] = _simMessages.RWConfigLogSimMsg_d_set
    __swig_getmethods__["d"] = _simMessages.RWConfigLogSimMsg_d_get
    if _newclass:
        d = _swig_property(_simMessages.RWConfigLogSimMsg_d_get, _simMessages.RWConfigLogSimMsg_d_set)
    __swig_setmethods__["J13"] = _simMessages.RWConfigLogSimMsg_J13_set
    __swig_getmethods__["J13"] = _simMessages.RWConfigLogSimMsg_J13_get
    if _newclass:
        J13 = _swig_property(_simMessages.RWConfigLogSimMsg_J13_get, _simMessages.RWConfigLogSimMsg_J13_set)
    __swig_setmethods__["u_current"] = _simMessages.RWConfigLogSimMsg_u_current_set
    __swig_getmethods__["u_current"] = _simMessages.RWConfigLogSimMsg_u_current_get
    if _newclass:
        u_current = _swig_property(_simMessages.RWConfigLogSimMsg_u_current_get, _simMessages.RWConfigLogSimMsg_u_current_set)
    __swig_setmethods__["frictionTorque"] = _simMessages.RWConfigLogSimMsg_frictionTorque_set
    __swig_getmethods__["frictionTorque"] = _simMessages.RWConfigLogSimMsg_frictionTorque_get
    if _newclass:
        frictionTorque = _swig_property(_simMessages.RWConfigLogSimMsg_frictionTorque_get, _simMessages.RWConfigLogSimMsg_frictionTorque_set)
    __swig_setmethods__["u_max"] = _simMessages.RWConfigLogSimMsg_u_max_set
    __swig_getmethods__["u_max"] = _simMessages.RWConfigLogSimMsg_u_max_get
    if _newclass:
        u_max = _swig_property(_simMessages.RWConfigLogSimMsg_u_max_get, _simMessages.RWConfigLogSimMsg_u_max_set)
    __swig_setmethods__["u_min"] = _simMessages.RWConfigLogSimMsg_u_min_set
    __swig_getmethods__["u_min"] = _simMessages.RWConfigLogSimMsg_u_min_get
    if _newclass:
        u_min = _swig_property(_simMessages.RWConfigLogSimMsg_u_min_get, _simMessages.RWConfigLogSimMsg_u_min_set)
    __swig_setmethods__["u_f"] = _simMessages.RWConfigLogSimMsg_u_f_set
    __swig_getmethods__["u_f"] = _simMessages.RWConfigLogSimMsg_u_f_get
    if _newclass:
        u_f = _swig_property(_simMessages.RWConfigLogSimMsg_u_f_get, _simMessages.RWConfigLogSimMsg_u_f_set)
    __swig_setmethods__["Omega_max"] = _simMessages.RWConfigLogSimMsg_Omega_max_set
    __swig_getmethods__["Omega_max"] = _simMessages.RWConfigLogSimMsg_Omega_max_get
    if _newclass:
        Omega_max = _swig_property(_simMessages.RWConfigLogSimMsg_Omega_max_get, _simMessages.RWConfigLogSimMsg_Omega_max_set)
    __swig_setmethods__["linearFrictionRatio"] = _simMessages.RWConfigLogSimMsg_linearFrictionRatio_set
    __swig_getmethods__["linearFrictionRatio"] = _simMessages.RWConfigLogSimMsg_linearFrictionRatio_get
    if _newclass:
        linearFrictionRatio = _swig_property(_simMessages.RWConfigLogSimMsg_linearFrictionRatio_get, _simMessages.RWConfigLogSimMsg_linearFrictionRatio_set)
    __swig_setmethods__["RWModel"] = _simMessages.RWConfigLogSimMsg_RWModel_set
    __swig_getmethods__["RWModel"] = _simMessages.RWConfigLogSimMsg_RWModel_get
    if _newclass:
        RWModel = _swig_property(_simMessages.RWConfigLogSimMsg_RWModel_get, _simMessages.RWConfigLogSimMsg_RWModel_set)

    def __init__(self, *args):
        this = _simMessages.new_RWConfigLogSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_RWConfigLogSimMsg
    __del__ = lambda self: None
RWConfigLogSimMsg_swigregister = _simMessages.RWConfigLogSimMsg_swigregister
RWConfigLogSimMsg_swigregister(RWConfigLogSimMsg)

sizeof_RWConfigLogSimMsg = _simMessages.sizeof_RWConfigLogSimMsg
class SCPlusMassPropsSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPlusMassPropsSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPlusMassPropsSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["massSC"] = _simMessages.SCPlusMassPropsSimMsg_massSC_set
    __swig_getmethods__["massSC"] = _simMessages.SCPlusMassPropsSimMsg_massSC_get
    if _newclass:
        massSC = _swig_property(_simMessages.SCPlusMassPropsSimMsg_massSC_get, _simMessages.SCPlusMassPropsSimMsg_massSC_set)
    __swig_setmethods__["c_B"] = _simMessages.SCPlusMassPropsSimMsg_c_B_set
    __swig_getmethods__["c_B"] = _simMessages.SCPlusMassPropsSimMsg_c_B_get
    if _newclass:
        c_B = _swig_property(_simMessages.SCPlusMassPropsSimMsg_c_B_get, _simMessages.SCPlusMassPropsSimMsg_c_B_set)
    __swig_setmethods__["ISC_PntB_B"] = _simMessages.SCPlusMassPropsSimMsg_ISC_PntB_B_set
    __swig_getmethods__["ISC_PntB_B"] = _simMessages.SCPlusMassPropsSimMsg_ISC_PntB_B_get
    if _newclass:
        ISC_PntB_B = _swig_property(_simMessages.SCPlusMassPropsSimMsg_ISC_PntB_B_get, _simMessages.SCPlusMassPropsSimMsg_ISC_PntB_B_set)

    def __init__(self, *args):
        this = _simMessages.new_SCPlusMassPropsSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SCPlusMassPropsSimMsg
    __del__ = lambda self: None
SCPlusMassPropsSimMsg_swigregister = _simMessages.SCPlusMassPropsSimMsg_swigregister
SCPlusMassPropsSimMsg_swigregister(SCPlusMassPropsSimMsg)

sizeof_SCPlusMassPropsSimMsg = _simMessages.sizeof_SCPlusMassPropsSimMsg
class SCPlusStatesSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCPlusStatesSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCPlusStatesSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BN_N"] = _simMessages.SCPlusStatesSimMsg_r_BN_N_set
    __swig_getmethods__["r_BN_N"] = _simMessages.SCPlusStatesSimMsg_r_BN_N_get
    if _newclass:
        r_BN_N = _swig_property(_simMessages.SCPlusStatesSimMsg_r_BN_N_get, _simMessages.SCPlusStatesSimMsg_r_BN_N_set)
    __swig_setmethods__["v_BN_N"] = _simMessages.SCPlusStatesSimMsg_v_BN_N_set
    __swig_getmethods__["v_BN_N"] = _simMessages.SCPlusStatesSimMsg_v_BN_N_get
    if _newclass:
        v_BN_N = _swig_property(_simMessages.SCPlusStatesSimMsg_v_BN_N_get, _simMessages.SCPlusStatesSimMsg_v_BN_N_set)
    __swig_setmethods__["r_CN_N"] = _simMessages.SCPlusStatesSimMsg_r_CN_N_set
    __swig_getmethods__["r_CN_N"] = _simMessages.SCPlusStatesSimMsg_r_CN_N_get
    if _newclass:
        r_CN_N = _swig_property(_simMessages.SCPlusStatesSimMsg_r_CN_N_get, _simMessages.SCPlusStatesSimMsg_r_CN_N_set)
    __swig_setmethods__["v_CN_N"] = _simMessages.SCPlusStatesSimMsg_v_CN_N_set
    __swig_getmethods__["v_CN_N"] = _simMessages.SCPlusStatesSimMsg_v_CN_N_get
    if _newclass:
        v_CN_N = _swig_property(_simMessages.SCPlusStatesSimMsg_v_CN_N_get, _simMessages.SCPlusStatesSimMsg_v_CN_N_set)
    __swig_setmethods__["sigma_BN"] = _simMessages.SCPlusStatesSimMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _simMessages.SCPlusStatesSimMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_simMessages.SCPlusStatesSimMsg_sigma_BN_get, _simMessages.SCPlusStatesSimMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _simMessages.SCPlusStatesSimMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _simMessages.SCPlusStatesSimMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_simMessages.SCPlusStatesSimMsg_omega_BN_B_get, _simMessages.SCPlusStatesSimMsg_omega_BN_B_set)
    __swig_setmethods__["omegaDot_BN_B"] = _simMessages.SCPlusStatesSimMsg_omegaDot_BN_B_set
    __swig_getmethods__["omegaDot_BN_B"] = _simMessages.SCPlusStatesSimMsg_omegaDot_BN_B_get
    if _newclass:
        omegaDot_BN_B = _swig_property(_simMessages.SCPlusStatesSimMsg_omegaDot_BN_B_get, _simMessages.SCPlusStatesSimMsg_omegaDot_BN_B_set)
    __swig_setmethods__["TotalAccumDVBdy"] = _simMessages.SCPlusStatesSimMsg_TotalAccumDVBdy_set
    __swig_getmethods__["TotalAccumDVBdy"] = _simMessages.SCPlusStatesSimMsg_TotalAccumDVBdy_get
    if _newclass:
        TotalAccumDVBdy = _swig_property(_simMessages.SCPlusStatesSimMsg_TotalAccumDVBdy_get, _simMessages.SCPlusStatesSimMsg_TotalAccumDVBdy_set)
    __swig_setmethods__["TotalAccumDV_BN_B"] = _simMessages.SCPlusStatesSimMsg_TotalAccumDV_BN_B_set
    __swig_getmethods__["TotalAccumDV_BN_B"] = _simMessages.SCPlusStatesSimMsg_TotalAccumDV_BN_B_get
    if _newclass:
        TotalAccumDV_BN_B = _swig_property(_simMessages.SCPlusStatesSimMsg_TotalAccumDV_BN_B_get, _simMessages.SCPlusStatesSimMsg_TotalAccumDV_BN_B_set)
    __swig_setmethods__["nonConservativeAccelpntB_B"] = _simMessages.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_set
    __swig_getmethods__["nonConservativeAccelpntB_B"] = _simMessages.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_get
    if _newclass:
        nonConservativeAccelpntB_B = _swig_property(_simMessages.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_get, _simMessages.SCPlusStatesSimMsg_nonConservativeAccelpntB_B_set)
    __swig_setmethods__["MRPSwitchCount"] = _simMessages.SCPlusStatesSimMsg_MRPSwitchCount_set
    __swig_getmethods__["MRPSwitchCount"] = _simMessages.SCPlusStatesSimMsg_MRPSwitchCount_get
    if _newclass:
        MRPSwitchCount = _swig_property(_simMessages.SCPlusStatesSimMsg_MRPSwitchCount_get, _simMessages.SCPlusStatesSimMsg_MRPSwitchCount_set)

    def __init__(self, *args):
        this = _simMessages.new_SCPlusStatesSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SCPlusStatesSimMsg
    __del__ = lambda self: None
SCPlusStatesSimMsg_swigregister = _simMessages.SCPlusStatesSimMsg_swigregister
SCPlusStatesSimMsg_swigregister(SCPlusStatesSimMsg)

sizeof_SCPlusStatesSimMsg = _simMessages.sizeof_SCPlusStatesSimMsg
class SCMassPropsSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCMassPropsSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCMassPropsSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["massSC"] = _simMessages.SCMassPropsSimMsg_massSC_set
    __swig_getmethods__["massSC"] = _simMessages.SCMassPropsSimMsg_massSC_get
    if _newclass:
        massSC = _swig_property(_simMessages.SCMassPropsSimMsg_massSC_get, _simMessages.SCMassPropsSimMsg_massSC_set)
    __swig_setmethods__["c_B"] = _simMessages.SCMassPropsSimMsg_c_B_set
    __swig_getmethods__["c_B"] = _simMessages.SCMassPropsSimMsg_c_B_get
    if _newclass:
        c_B = _swig_property(_simMessages.SCMassPropsSimMsg_c_B_get, _simMessages.SCMassPropsSimMsg_c_B_set)
    __swig_setmethods__["ISC_PntB_B"] = _simMessages.SCMassPropsSimMsg_ISC_PntB_B_set
    __swig_getmethods__["ISC_PntB_B"] = _simMessages.SCMassPropsSimMsg_ISC_PntB_B_get
    if _newclass:
        ISC_PntB_B = _swig_property(_simMessages.SCMassPropsSimMsg_ISC_PntB_B_get, _simMessages.SCMassPropsSimMsg_ISC_PntB_B_set)

    def __init__(self, *args):
        this = _simMessages.new_SCMassPropsSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SCMassPropsSimMsg
    __del__ = lambda self: None
SCMassPropsSimMsg_swigregister = _simMessages.SCMassPropsSimMsg_swigregister
SCMassPropsSimMsg_swigregister(SCMassPropsSimMsg)

sizeof_SCMassPropsSimMsg = _simMessages.sizeof_SCMassPropsSimMsg
class SCStatesSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCStatesSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCStatesSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r_BN_N"] = _simMessages.SCStatesSimMsg_r_BN_N_set
    __swig_getmethods__["r_BN_N"] = _simMessages.SCStatesSimMsg_r_BN_N_get
    if _newclass:
        r_BN_N = _swig_property(_simMessages.SCStatesSimMsg_r_BN_N_get, _simMessages.SCStatesSimMsg_r_BN_N_set)
    __swig_setmethods__["v_BN_N"] = _simMessages.SCStatesSimMsg_v_BN_N_set
    __swig_getmethods__["v_BN_N"] = _simMessages.SCStatesSimMsg_v_BN_N_get
    if _newclass:
        v_BN_N = _swig_property(_simMessages.SCStatesSimMsg_v_BN_N_get, _simMessages.SCStatesSimMsg_v_BN_N_set)
    __swig_setmethods__["r_CN_N"] = _simMessages.SCStatesSimMsg_r_CN_N_set
    __swig_getmethods__["r_CN_N"] = _simMessages.SCStatesSimMsg_r_CN_N_get
    if _newclass:
        r_CN_N = _swig_property(_simMessages.SCStatesSimMsg_r_CN_N_get, _simMessages.SCStatesSimMsg_r_CN_N_set)
    __swig_setmethods__["v_CN_N"] = _simMessages.SCStatesSimMsg_v_CN_N_set
    __swig_getmethods__["v_CN_N"] = _simMessages.SCStatesSimMsg_v_CN_N_get
    if _newclass:
        v_CN_N = _swig_property(_simMessages.SCStatesSimMsg_v_CN_N_get, _simMessages.SCStatesSimMsg_v_CN_N_set)
    __swig_setmethods__["sigma_BN"] = _simMessages.SCStatesSimMsg_sigma_BN_set
    __swig_getmethods__["sigma_BN"] = _simMessages.SCStatesSimMsg_sigma_BN_get
    if _newclass:
        sigma_BN = _swig_property(_simMessages.SCStatesSimMsg_sigma_BN_get, _simMessages.SCStatesSimMsg_sigma_BN_set)
    __swig_setmethods__["omega_BN_B"] = _simMessages.SCStatesSimMsg_omega_BN_B_set
    __swig_getmethods__["omega_BN_B"] = _simMessages.SCStatesSimMsg_omega_BN_B_get
    if _newclass:
        omega_BN_B = _swig_property(_simMessages.SCStatesSimMsg_omega_BN_B_get, _simMessages.SCStatesSimMsg_omega_BN_B_set)
    __swig_setmethods__["omegaDot_BN_B"] = _simMessages.SCStatesSimMsg_omegaDot_BN_B_set
    __swig_getmethods__["omegaDot_BN_B"] = _simMessages.SCStatesSimMsg_omegaDot_BN_B_get
    if _newclass:
        omegaDot_BN_B = _swig_property(_simMessages.SCStatesSimMsg_omegaDot_BN_B_get, _simMessages.SCStatesSimMsg_omegaDot_BN_B_set)
    __swig_setmethods__["TotalAccumDVBdy"] = _simMessages.SCStatesSimMsg_TotalAccumDVBdy_set
    __swig_getmethods__["TotalAccumDVBdy"] = _simMessages.SCStatesSimMsg_TotalAccumDVBdy_get
    if _newclass:
        TotalAccumDVBdy = _swig_property(_simMessages.SCStatesSimMsg_TotalAccumDVBdy_get, _simMessages.SCStatesSimMsg_TotalAccumDVBdy_set)
    __swig_setmethods__["TotalAccumDV_BN_B"] = _simMessages.SCStatesSimMsg_TotalAccumDV_BN_B_set
    __swig_getmethods__["TotalAccumDV_BN_B"] = _simMessages.SCStatesSimMsg_TotalAccumDV_BN_B_get
    if _newclass:
        TotalAccumDV_BN_B = _swig_property(_simMessages.SCStatesSimMsg_TotalAccumDV_BN_B_get, _simMessages.SCStatesSimMsg_TotalAccumDV_BN_B_set)
    __swig_setmethods__["nonConservativeAccelpntB_B"] = _simMessages.SCStatesSimMsg_nonConservativeAccelpntB_B_set
    __swig_getmethods__["nonConservativeAccelpntB_B"] = _simMessages.SCStatesSimMsg_nonConservativeAccelpntB_B_get
    if _newclass:
        nonConservativeAccelpntB_B = _swig_property(_simMessages.SCStatesSimMsg_nonConservativeAccelpntB_B_get, _simMessages.SCStatesSimMsg_nonConservativeAccelpntB_B_set)
    __swig_setmethods__["MRPSwitchCount"] = _simMessages.SCStatesSimMsg_MRPSwitchCount_set
    __swig_getmethods__["MRPSwitchCount"] = _simMessages.SCStatesSimMsg_MRPSwitchCount_get
    if _newclass:
        MRPSwitchCount = _swig_property(_simMessages.SCStatesSimMsg_MRPSwitchCount_get, _simMessages.SCStatesSimMsg_MRPSwitchCount_set)

    def __init__(self, *args):
        this = _simMessages.new_SCStatesSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SCStatesSimMsg
    __del__ = lambda self: None
SCStatesSimMsg_swigregister = _simMessages.SCStatesSimMsg_swigregister
SCStatesSimMsg_swigregister(SCStatesSimMsg)

sizeof_SCStatesSimMsg = _simMessages.sizeof_SCStatesSimMsg
class SCEnergyMomentumSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCEnergyMomentumSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCEnergyMomentumSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spacecraftOrbEnergy"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbEnergy_set
    __swig_getmethods__["spacecraftOrbEnergy"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbEnergy_get
    if _newclass:
        spacecraftOrbEnergy = _swig_property(_simMessages.SCEnergyMomentumSimMsg_spacecraftOrbEnergy_get, _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbEnergy_set)
    __swig_setmethods__["spacecraftRotEnergy"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftRotEnergy_set
    __swig_getmethods__["spacecraftRotEnergy"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftRotEnergy_get
    if _newclass:
        spacecraftRotEnergy = _swig_property(_simMessages.SCEnergyMomentumSimMsg_spacecraftRotEnergy_get, _simMessages.SCEnergyMomentumSimMsg_spacecraftRotEnergy_set)
    __swig_setmethods__["spacecraftOrbAngMomPntN_N"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbAngMomPntN_N_set
    __swig_getmethods__["spacecraftOrbAngMomPntN_N"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbAngMomPntN_N_get
    if _newclass:
        spacecraftOrbAngMomPntN_N = _swig_property(_simMessages.SCEnergyMomentumSimMsg_spacecraftOrbAngMomPntN_N_get, _simMessages.SCEnergyMomentumSimMsg_spacecraftOrbAngMomPntN_N_set)
    __swig_setmethods__["spacecraftRotAngMomPntC_N"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftRotAngMomPntC_N_set
    __swig_getmethods__["spacecraftRotAngMomPntC_N"] = _simMessages.SCEnergyMomentumSimMsg_spacecraftRotAngMomPntC_N_get
    if _newclass:
        spacecraftRotAngMomPntC_N = _swig_property(_simMessages.SCEnergyMomentumSimMsg_spacecraftRotAngMomPntC_N_get, _simMessages.SCEnergyMomentumSimMsg_spacecraftRotAngMomPntC_N_set)

    def __init__(self, *args):
        this = _simMessages.new_SCEnergyMomentumSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SCEnergyMomentumSimMsg
    __del__ = lambda self: None
SCEnergyMomentumSimMsg_swigregister = _simMessages.SCEnergyMomentumSimMsg_swigregister
SCEnergyMomentumSimMsg_swigregister(SCEnergyMomentumSimMsg)

sizeof_SCEnergyMomentumSimMsg = _simMessages.sizeof_SCEnergyMomentumSimMsg
MAX_BODY_NAME_LENGTH = _simMessages.MAX_BODY_NAME_LENGTH
class SpicePlanetStateSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpicePlanetStateSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpicePlanetStateSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["J2000Current"] = _simMessages.SpicePlanetStateSimMsg_J2000Current_set
    __swig_getmethods__["J2000Current"] = _simMessages.SpicePlanetStateSimMsg_J2000Current_get
    if _newclass:
        J2000Current = _swig_property(_simMessages.SpicePlanetStateSimMsg_J2000Current_get, _simMessages.SpicePlanetStateSimMsg_J2000Current_set)
    __swig_setmethods__["PositionVector"] = _simMessages.SpicePlanetStateSimMsg_PositionVector_set
    __swig_getmethods__["PositionVector"] = _simMessages.SpicePlanetStateSimMsg_PositionVector_get
    if _newclass:
        PositionVector = _swig_property(_simMessages.SpicePlanetStateSimMsg_PositionVector_get, _simMessages.SpicePlanetStateSimMsg_PositionVector_set)
    __swig_setmethods__["VelocityVector"] = _simMessages.SpicePlanetStateSimMsg_VelocityVector_set
    __swig_getmethods__["VelocityVector"] = _simMessages.SpicePlanetStateSimMsg_VelocityVector_get
    if _newclass:
        VelocityVector = _swig_property(_simMessages.SpicePlanetStateSimMsg_VelocityVector_get, _simMessages.SpicePlanetStateSimMsg_VelocityVector_set)
    __swig_setmethods__["J20002Pfix"] = _simMessages.SpicePlanetStateSimMsg_J20002Pfix_set
    __swig_getmethods__["J20002Pfix"] = _simMessages.SpicePlanetStateSimMsg_J20002Pfix_get
    if _newclass:
        J20002Pfix = _swig_property(_simMessages.SpicePlanetStateSimMsg_J20002Pfix_get, _simMessages.SpicePlanetStateSimMsg_J20002Pfix_set)
    __swig_setmethods__["J20002Pfix_dot"] = _simMessages.SpicePlanetStateSimMsg_J20002Pfix_dot_set
    __swig_getmethods__["J20002Pfix_dot"] = _simMessages.SpicePlanetStateSimMsg_J20002Pfix_dot_get
    if _newclass:
        J20002Pfix_dot = _swig_property(_simMessages.SpicePlanetStateSimMsg_J20002Pfix_dot_get, _simMessages.SpicePlanetStateSimMsg_J20002Pfix_dot_set)
    __swig_setmethods__["computeOrient"] = _simMessages.SpicePlanetStateSimMsg_computeOrient_set
    __swig_getmethods__["computeOrient"] = _simMessages.SpicePlanetStateSimMsg_computeOrient_get
    if _newclass:
        computeOrient = _swig_property(_simMessages.SpicePlanetStateSimMsg_computeOrient_get, _simMessages.SpicePlanetStateSimMsg_computeOrient_set)
    __swig_setmethods__["PlanetName"] = _simMessages.SpicePlanetStateSimMsg_PlanetName_set
    __swig_getmethods__["PlanetName"] = _simMessages.SpicePlanetStateSimMsg_PlanetName_get
    if _newclass:
        PlanetName = _swig_property(_simMessages.SpicePlanetStateSimMsg_PlanetName_get, _simMessages.SpicePlanetStateSimMsg_PlanetName_set)

    def __init__(self, *args):
        this = _simMessages.new_SpicePlanetStateSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SpicePlanetStateSimMsg
    __del__ = lambda self: None
SpicePlanetStateSimMsg_swigregister = _simMessages.SpicePlanetStateSimMsg_swigregister
SpicePlanetStateSimMsg_swigregister(SpicePlanetStateSimMsg)

sizeof_SpicePlanetStateSimMsg = _simMessages.sizeof_SpicePlanetStateSimMsg
class SpiceTimeSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpiceTimeSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpiceTimeSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["J2000Current"] = _simMessages.SpiceTimeSimMsg_J2000Current_set
    __swig_getmethods__["J2000Current"] = _simMessages.SpiceTimeSimMsg_J2000Current_get
    if _newclass:
        J2000Current = _swig_property(_simMessages.SpiceTimeSimMsg_J2000Current_get, _simMessages.SpiceTimeSimMsg_J2000Current_set)
    __swig_setmethods__["JulianDateCurrent"] = _simMessages.SpiceTimeSimMsg_JulianDateCurrent_set
    __swig_getmethods__["JulianDateCurrent"] = _simMessages.SpiceTimeSimMsg_JulianDateCurrent_get
    if _newclass:
        JulianDateCurrent = _swig_property(_simMessages.SpiceTimeSimMsg_JulianDateCurrent_get, _simMessages.SpiceTimeSimMsg_JulianDateCurrent_set)
    __swig_setmethods__["GPSSeconds"] = _simMessages.SpiceTimeSimMsg_GPSSeconds_set
    __swig_getmethods__["GPSSeconds"] = _simMessages.SpiceTimeSimMsg_GPSSeconds_get
    if _newclass:
        GPSSeconds = _swig_property(_simMessages.SpiceTimeSimMsg_GPSSeconds_get, _simMessages.SpiceTimeSimMsg_GPSSeconds_set)
    __swig_setmethods__["GPSWeek"] = _simMessages.SpiceTimeSimMsg_GPSWeek_set
    __swig_getmethods__["GPSWeek"] = _simMessages.SpiceTimeSimMsg_GPSWeek_get
    if _newclass:
        GPSWeek = _swig_property(_simMessages.SpiceTimeSimMsg_GPSWeek_get, _simMessages.SpiceTimeSimMsg_GPSWeek_set)
    __swig_setmethods__["GPSRollovers"] = _simMessages.SpiceTimeSimMsg_GPSRollovers_set
    __swig_getmethods__["GPSRollovers"] = _simMessages.SpiceTimeSimMsg_GPSRollovers_get
    if _newclass:
        GPSRollovers = _swig_property(_simMessages.SpiceTimeSimMsg_GPSRollovers_get, _simMessages.SpiceTimeSimMsg_GPSRollovers_set)

    def __init__(self, *args):
        this = _simMessages.new_SpiceTimeSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SpiceTimeSimMsg
    __del__ = lambda self: None
SpiceTimeSimMsg_swigregister = _simMessages.SpiceTimeSimMsg_swigregister
SpiceTimeSimMsg_swigregister(SpiceTimeSimMsg)

sizeof_SpiceTimeSimMsg = _simMessages.sizeof_SpiceTimeSimMsg
class SynchClockSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchClockSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynchClockSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["initTimeDelta"] = _simMessages.SynchClockSimMsg_initTimeDelta_set
    __swig_getmethods__["initTimeDelta"] = _simMessages.SynchClockSimMsg_initTimeDelta_get
    if _newclass:
        initTimeDelta = _swig_property(_simMessages.SynchClockSimMsg_initTimeDelta_get, _simMessages.SynchClockSimMsg_initTimeDelta_set)
    __swig_setmethods__["finalTimeDelta"] = _simMessages.SynchClockSimMsg_finalTimeDelta_set
    __swig_getmethods__["finalTimeDelta"] = _simMessages.SynchClockSimMsg_finalTimeDelta_get
    if _newclass:
        finalTimeDelta = _swig_property(_simMessages.SynchClockSimMsg_finalTimeDelta_get, _simMessages.SynchClockSimMsg_finalTimeDelta_set)
    __swig_setmethods__["overrunCounter"] = _simMessages.SynchClockSimMsg_overrunCounter_set
    __swig_getmethods__["overrunCounter"] = _simMessages.SynchClockSimMsg_overrunCounter_get
    if _newclass:
        overrunCounter = _swig_property(_simMessages.SynchClockSimMsg_overrunCounter_get, _simMessages.SynchClockSimMsg_overrunCounter_set)

    def __init__(self, *args):
        this = _simMessages.new_SynchClockSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_SynchClockSimMsg
    __del__ = lambda self: None
SynchClockSimMsg_swigregister = _simMessages.SynchClockSimMsg_swigregister
SynchClockSimMsg_swigregister(SynchClockSimMsg)

sizeof_SynchClockSimMsg = _simMessages.sizeof_SynchClockSimMsg
class THRConfigSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRConfigSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRConfigSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thrLoc_B"] = _simMessages.THRConfigSimMsg_thrLoc_B_set
    __swig_getmethods__["thrLoc_B"] = _simMessages.THRConfigSimMsg_thrLoc_B_get
    if _newclass:
        thrLoc_B = _swig_property(_simMessages.THRConfigSimMsg_thrLoc_B_get, _simMessages.THRConfigSimMsg_thrLoc_B_set)
    __swig_setmethods__["thrDir_B"] = _simMessages.THRConfigSimMsg_thrDir_B_set
    __swig_getmethods__["thrDir_B"] = _simMessages.THRConfigSimMsg_thrDir_B_get
    if _newclass:
        thrDir_B = _swig_property(_simMessages.THRConfigSimMsg_thrDir_B_get, _simMessages.THRConfigSimMsg_thrDir_B_set)
    __swig_setmethods__["ThrusterOnRamp"] = _simMessages.THRConfigSimMsg_ThrusterOnRamp_set
    __swig_getmethods__["ThrusterOnRamp"] = _simMessages.THRConfigSimMsg_ThrusterOnRamp_get
    if _newclass:
        ThrusterOnRamp = _swig_property(_simMessages.THRConfigSimMsg_ThrusterOnRamp_get, _simMessages.THRConfigSimMsg_ThrusterOnRamp_set)
    __swig_setmethods__["ThrusterOffRamp"] = _simMessages.THRConfigSimMsg_ThrusterOffRamp_set
    __swig_getmethods__["ThrusterOffRamp"] = _simMessages.THRConfigSimMsg_ThrusterOffRamp_get
    if _newclass:
        ThrusterOffRamp = _swig_property(_simMessages.THRConfigSimMsg_ThrusterOffRamp_get, _simMessages.THRConfigSimMsg_ThrusterOffRamp_set)
    __swig_setmethods__["areaNozzle"] = _simMessages.THRConfigSimMsg_areaNozzle_set
    __swig_getmethods__["areaNozzle"] = _simMessages.THRConfigSimMsg_areaNozzle_get
    if _newclass:
        areaNozzle = _swig_property(_simMessages.THRConfigSimMsg_areaNozzle_get, _simMessages.THRConfigSimMsg_areaNozzle_set)
    __swig_setmethods__["MaxThrust"] = _simMessages.THRConfigSimMsg_MaxThrust_set
    __swig_getmethods__["MaxThrust"] = _simMessages.THRConfigSimMsg_MaxThrust_get
    if _newclass:
        MaxThrust = _swig_property(_simMessages.THRConfigSimMsg_MaxThrust_get, _simMessages.THRConfigSimMsg_MaxThrust_set)
    __swig_setmethods__["steadyIsp"] = _simMessages.THRConfigSimMsg_steadyIsp_set
    __swig_getmethods__["steadyIsp"] = _simMessages.THRConfigSimMsg_steadyIsp_get
    if _newclass:
        steadyIsp = _swig_property(_simMessages.THRConfigSimMsg_steadyIsp_get, _simMessages.THRConfigSimMsg_steadyIsp_set)
    __swig_setmethods__["MinOnTime"] = _simMessages.THRConfigSimMsg_MinOnTime_set
    __swig_getmethods__["MinOnTime"] = _simMessages.THRConfigSimMsg_MinOnTime_get
    if _newclass:
        MinOnTime = _swig_property(_simMessages.THRConfigSimMsg_MinOnTime_get, _simMessages.THRConfigSimMsg_MinOnTime_set)
    __swig_setmethods__["ThrustOps"] = _simMessages.THRConfigSimMsg_ThrustOps_set
    __swig_getmethods__["ThrustOps"] = _simMessages.THRConfigSimMsg_ThrustOps_get
    if _newclass:
        ThrustOps = _swig_property(_simMessages.THRConfigSimMsg_ThrustOps_get, _simMessages.THRConfigSimMsg_ThrustOps_set)
    __swig_setmethods__["thrusterMagDisp"] = _simMessages.THRConfigSimMsg_thrusterMagDisp_set
    __swig_getmethods__["thrusterMagDisp"] = _simMessages.THRConfigSimMsg_thrusterMagDisp_get
    if _newclass:
        thrusterMagDisp = _swig_property(_simMessages.THRConfigSimMsg_thrusterMagDisp_get, _simMessages.THRConfigSimMsg_thrusterMagDisp_set)
    __swig_setmethods__["thrusterDirectionDisp"] = _simMessages.THRConfigSimMsg_thrusterDirectionDisp_set
    __swig_getmethods__["thrusterDirectionDisp"] = _simMessages.THRConfigSimMsg_thrusterDirectionDisp_get
    if _newclass:
        thrusterDirectionDisp = _swig_property(_simMessages.THRConfigSimMsg_thrusterDirectionDisp_get, _simMessages.THRConfigSimMsg_thrusterDirectionDisp_set)
    __swig_setmethods__["updateOnly"] = _simMessages.THRConfigSimMsg_updateOnly_set
    __swig_getmethods__["updateOnly"] = _simMessages.THRConfigSimMsg_updateOnly_get
    if _newclass:
        updateOnly = _swig_property(_simMessages.THRConfigSimMsg_updateOnly_get, _simMessages.THRConfigSimMsg_updateOnly_set)
    __swig_setmethods__["label"] = _simMessages.THRConfigSimMsg_label_set
    __swig_getmethods__["label"] = _simMessages.THRConfigSimMsg_label_get
    if _newclass:
        label = _swig_property(_simMessages.THRConfigSimMsg_label_get, _simMessages.THRConfigSimMsg_label_set)

    def __init__(self, *args):
        this = _simMessages.new_THRConfigSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_THRConfigSimMsg
    __del__ = lambda self: None
THRConfigSimMsg_swigregister = _simMessages.THRConfigSimMsg_swigregister
THRConfigSimMsg_swigregister(THRConfigSimMsg)

sizeof_THRConfigSimMsg = _simMessages.sizeof_THRConfigSimMsg
class THROperationSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THROperationSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THROperationSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fireCounter"] = _simMessages.THROperationSimMsg_fireCounter_set
    __swig_getmethods__["fireCounter"] = _simMessages.THROperationSimMsg_fireCounter_get
    if _newclass:
        fireCounter = _swig_property(_simMessages.THROperationSimMsg_fireCounter_get, _simMessages.THROperationSimMsg_fireCounter_set)
    __swig_setmethods__["ThrustFactor"] = _simMessages.THROperationSimMsg_ThrustFactor_set
    __swig_getmethods__["ThrustFactor"] = _simMessages.THROperationSimMsg_ThrustFactor_get
    if _newclass:
        ThrustFactor = _swig_property(_simMessages.THROperationSimMsg_ThrustFactor_get, _simMessages.THROperationSimMsg_ThrustFactor_set)
    __swig_setmethods__["IspFactor"] = _simMessages.THROperationSimMsg_IspFactor_set
    __swig_getmethods__["IspFactor"] = _simMessages.THROperationSimMsg_IspFactor_get
    if _newclass:
        IspFactor = _swig_property(_simMessages.THROperationSimMsg_IspFactor_get, _simMessages.THROperationSimMsg_IspFactor_set)
    __swig_setmethods__["ThrustOnRampTime"] = _simMessages.THROperationSimMsg_ThrustOnRampTime_set
    __swig_getmethods__["ThrustOnRampTime"] = _simMessages.THROperationSimMsg_ThrustOnRampTime_get
    if _newclass:
        ThrustOnRampTime = _swig_property(_simMessages.THROperationSimMsg_ThrustOnRampTime_get, _simMessages.THROperationSimMsg_ThrustOnRampTime_set)
    __swig_setmethods__["ThrustOnSteadyTime"] = _simMessages.THROperationSimMsg_ThrustOnSteadyTime_set
    __swig_getmethods__["ThrustOnSteadyTime"] = _simMessages.THROperationSimMsg_ThrustOnSteadyTime_get
    if _newclass:
        ThrustOnSteadyTime = _swig_property(_simMessages.THROperationSimMsg_ThrustOnSteadyTime_get, _simMessages.THROperationSimMsg_ThrustOnSteadyTime_set)
    __swig_setmethods__["ThrustOffRampTime"] = _simMessages.THROperationSimMsg_ThrustOffRampTime_set
    __swig_getmethods__["ThrustOffRampTime"] = _simMessages.THROperationSimMsg_ThrustOffRampTime_get
    if _newclass:
        ThrustOffRampTime = _swig_property(_simMessages.THROperationSimMsg_ThrustOffRampTime_get, _simMessages.THROperationSimMsg_ThrustOffRampTime_set)
    __swig_setmethods__["ThrusterStartTime"] = _simMessages.THROperationSimMsg_ThrusterStartTime_set
    __swig_getmethods__["ThrusterStartTime"] = _simMessages.THROperationSimMsg_ThrusterStartTime_get
    if _newclass:
        ThrusterStartTime = _swig_property(_simMessages.THROperationSimMsg_ThrusterStartTime_get, _simMessages.THROperationSimMsg_ThrusterStartTime_set)
    __swig_setmethods__["ThrustOnCmd"] = _simMessages.THROperationSimMsg_ThrustOnCmd_set
    __swig_getmethods__["ThrustOnCmd"] = _simMessages.THROperationSimMsg_ThrustOnCmd_get
    if _newclass:
        ThrustOnCmd = _swig_property(_simMessages.THROperationSimMsg_ThrustOnCmd_get, _simMessages.THROperationSimMsg_ThrustOnCmd_set)
    __swig_setmethods__["PreviousIterTime"] = _simMessages.THROperationSimMsg_PreviousIterTime_set
    __swig_getmethods__["PreviousIterTime"] = _simMessages.THROperationSimMsg_PreviousIterTime_get
    if _newclass:
        PreviousIterTime = _swig_property(_simMessages.THROperationSimMsg_PreviousIterTime_get, _simMessages.THROperationSimMsg_PreviousIterTime_set)
    __swig_setmethods__["totalOnTime"] = _simMessages.THROperationSimMsg_totalOnTime_set
    __swig_getmethods__["totalOnTime"] = _simMessages.THROperationSimMsg_totalOnTime_get
    if _newclass:
        totalOnTime = _swig_property(_simMessages.THROperationSimMsg_totalOnTime_get, _simMessages.THROperationSimMsg_totalOnTime_set)
    __swig_setmethods__["opThrustForce_B"] = _simMessages.THROperationSimMsg_opThrustForce_B_set
    __swig_getmethods__["opThrustForce_B"] = _simMessages.THROperationSimMsg_opThrustForce_B_get
    if _newclass:
        opThrustForce_B = _swig_property(_simMessages.THROperationSimMsg_opThrustForce_B_get, _simMessages.THROperationSimMsg_opThrustForce_B_set)
    __swig_setmethods__["opThrustTorquePntB_B"] = _simMessages.THROperationSimMsg_opThrustTorquePntB_B_set
    __swig_getmethods__["opThrustTorquePntB_B"] = _simMessages.THROperationSimMsg_opThrustTorquePntB_B_get
    if _newclass:
        opThrustTorquePntB_B = _swig_property(_simMessages.THROperationSimMsg_opThrustTorquePntB_B_get, _simMessages.THROperationSimMsg_opThrustTorquePntB_B_set)

    def __init__(self, *args):
        this = _simMessages.new_THROperationSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_THROperationSimMsg
    __del__ = lambda self: None
THROperationSimMsg_swigregister = _simMessages.THROperationSimMsg_swigregister
THROperationSimMsg_swigregister(THROperationSimMsg)

sizeof_THROperationSimMsg = _simMessages.sizeof_THROperationSimMsg
class THROutputSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THROutputSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THROutputSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxThrust"] = _simMessages.THROutputSimMsg_maxThrust_set
    __swig_getmethods__["maxThrust"] = _simMessages.THROutputSimMsg_maxThrust_get
    if _newclass:
        maxThrust = _swig_property(_simMessages.THROutputSimMsg_maxThrust_get, _simMessages.THROutputSimMsg_maxThrust_set)
    __swig_setmethods__["thrustFactor"] = _simMessages.THROutputSimMsg_thrustFactor_set
    __swig_getmethods__["thrustFactor"] = _simMessages.THROutputSimMsg_thrustFactor_get
    if _newclass:
        thrustFactor = _swig_property(_simMessages.THROutputSimMsg_thrustFactor_get, _simMessages.THROutputSimMsg_thrustFactor_set)
    __swig_setmethods__["thrustForce"] = _simMessages.THROutputSimMsg_thrustForce_set
    __swig_getmethods__["thrustForce"] = _simMessages.THROutputSimMsg_thrustForce_get
    if _newclass:
        thrustForce = _swig_property(_simMessages.THROutputSimMsg_thrustForce_get, _simMessages.THROutputSimMsg_thrustForce_set)
    __swig_setmethods__["thrustForce_B"] = _simMessages.THROutputSimMsg_thrustForce_B_set
    __swig_getmethods__["thrustForce_B"] = _simMessages.THROutputSimMsg_thrustForce_B_get
    if _newclass:
        thrustForce_B = _swig_property(_simMessages.THROutputSimMsg_thrustForce_B_get, _simMessages.THROutputSimMsg_thrustForce_B_set)
    __swig_setmethods__["thrustTorquePntB_B"] = _simMessages.THROutputSimMsg_thrustTorquePntB_B_set
    __swig_getmethods__["thrustTorquePntB_B"] = _simMessages.THROutputSimMsg_thrustTorquePntB_B_get
    if _newclass:
        thrustTorquePntB_B = _swig_property(_simMessages.THROutputSimMsg_thrustTorquePntB_B_get, _simMessages.THROutputSimMsg_thrustTorquePntB_B_set)
    __swig_setmethods__["thrusterLocation"] = _simMessages.THROutputSimMsg_thrusterLocation_set
    __swig_getmethods__["thrusterLocation"] = _simMessages.THROutputSimMsg_thrusterLocation_get
    if _newclass:
        thrusterLocation = _swig_property(_simMessages.THROutputSimMsg_thrusterLocation_get, _simMessages.THROutputSimMsg_thrusterLocation_set)
    __swig_setmethods__["thrusterDirection"] = _simMessages.THROutputSimMsg_thrusterDirection_set
    __swig_getmethods__["thrusterDirection"] = _simMessages.THROutputSimMsg_thrusterDirection_get
    if _newclass:
        thrusterDirection = _swig_property(_simMessages.THROutputSimMsg_thrusterDirection_get, _simMessages.THROutputSimMsg_thrusterDirection_set)

    def __init__(self, *args):
        this = _simMessages.new_THROutputSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_THROutputSimMsg
    __del__ = lambda self: None
THROutputSimMsg_swigregister = _simMessages.THROutputSimMsg_swigregister
THROutputSimMsg_swigregister(THROutputSimMsg)

sizeof_THROutputSimMsg = _simMessages.sizeof_THROutputSimMsg
class THRTimePairSimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, THRTimePairSimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, THRTimePairSimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ThrustFactor"] = _simMessages.THRTimePairSimMsg_ThrustFactor_set
    __swig_getmethods__["ThrustFactor"] = _simMessages.THRTimePairSimMsg_ThrustFactor_get
    if _newclass:
        ThrustFactor = _swig_property(_simMessages.THRTimePairSimMsg_ThrustFactor_get, _simMessages.THRTimePairSimMsg_ThrustFactor_set)
    __swig_setmethods__["IspFactor"] = _simMessages.THRTimePairSimMsg_IspFactor_set
    __swig_getmethods__["IspFactor"] = _simMessages.THRTimePairSimMsg_IspFactor_get
    if _newclass:
        IspFactor = _swig_property(_simMessages.THRTimePairSimMsg_IspFactor_get, _simMessages.THRTimePairSimMsg_IspFactor_set)
    __swig_setmethods__["TimeDelta"] = _simMessages.THRTimePairSimMsg_TimeDelta_set
    __swig_getmethods__["TimeDelta"] = _simMessages.THRTimePairSimMsg_TimeDelta_get
    if _newclass:
        TimeDelta = _swig_property(_simMessages.THRTimePairSimMsg_TimeDelta_get, _simMessages.THRTimePairSimMsg_TimeDelta_set)

    def __init__(self, *args):
        this = _simMessages.new_THRTimePairSimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_THRTimePairSimMsg
    __del__ = lambda self: None
THRTimePairSimMsg_swigregister = _simMessages.THRTimePairSimMsg_swigregister
THRTimePairSimMsg_swigregister(THRTimePairSimMsg)

sizeof_THRTimePairSimMsg = _simMessages.sizeof_THRTimePairSimMsg
class HingedRigidBodySimMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HingedRigidBodySimMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HingedRigidBodySimMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theta"] = _simMessages.HingedRigidBodySimMsg_theta_set
    __swig_getmethods__["theta"] = _simMessages.HingedRigidBodySimMsg_theta_get
    if _newclass:
        theta = _swig_property(_simMessages.HingedRigidBodySimMsg_theta_get, _simMessages.HingedRigidBodySimMsg_theta_set)
    __swig_setmethods__["thetaDot"] = _simMessages.HingedRigidBodySimMsg_thetaDot_set
    __swig_getmethods__["thetaDot"] = _simMessages.HingedRigidBodySimMsg_thetaDot_get
    if _newclass:
        thetaDot = _swig_property(_simMessages.HingedRigidBodySimMsg_thetaDot_get, _simMessages.HingedRigidBodySimMsg_thetaDot_set)

    def __init__(self, *args):
        this = _simMessages.new_HingedRigidBodySimMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_HingedRigidBodySimMsg
    __del__ = lambda self: None
HingedRigidBodySimMsg_swigregister = _simMessages.HingedRigidBodySimMsg_swigregister
HingedRigidBodySimMsg_swigregister(HingedRigidBodySimMsg)

sizeof_HingedRigidBodySimMsg = _simMessages.sizeof_HingedRigidBodySimMsg
class PyBatteryOutMsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyBatteryOutMsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyBatteryOutMsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stateOfCharge"] = _simMessages.PyBatteryOutMsg_stateOfCharge_set
    __swig_getmethods__["stateOfCharge"] = _simMessages.PyBatteryOutMsg_stateOfCharge_get
    if _newclass:
        stateOfCharge = _swig_property(_simMessages.PyBatteryOutMsg_stateOfCharge_get, _simMessages.PyBatteryOutMsg_stateOfCharge_set)
    __swig_setmethods__["stateOfChargeAh"] = _simMessages.PyBatteryOutMsg_stateOfChargeAh_set
    __swig_getmethods__["stateOfChargeAh"] = _simMessages.PyBatteryOutMsg_stateOfChargeAh_get
    if _newclass:
        stateOfChargeAh = _swig_property(_simMessages.PyBatteryOutMsg_stateOfChargeAh_get, _simMessages.PyBatteryOutMsg_stateOfChargeAh_set)
    __swig_setmethods__["solarArrayTemperature"] = _simMessages.PyBatteryOutMsg_solarArrayTemperature_set
    __swig_getmethods__["solarArrayTemperature"] = _simMessages.PyBatteryOutMsg_solarArrayTemperature_get
    if _newclass:
        solarArrayTemperature = _swig_property(_simMessages.PyBatteryOutMsg_solarArrayTemperature_get, _simMessages.PyBatteryOutMsg_solarArrayTemperature_set)
    __swig_setmethods__["busVoltage"] = _simMessages.PyBatteryOutMsg_busVoltage_set
    __swig_getmethods__["busVoltage"] = _simMessages.PyBatteryOutMsg_busVoltage_get
    if _newclass:
        busVoltage = _swig_property(_simMessages.PyBatteryOutMsg_busVoltage_get, _simMessages.PyBatteryOutMsg_busVoltage_set)
    __swig_setmethods__["batteryCurrent"] = _simMessages.PyBatteryOutMsg_batteryCurrent_set
    __swig_getmethods__["batteryCurrent"] = _simMessages.PyBatteryOutMsg_batteryCurrent_get
    if _newclass:
        batteryCurrent = _swig_property(_simMessages.PyBatteryOutMsg_batteryCurrent_get, _simMessages.PyBatteryOutMsg_batteryCurrent_set)
    __swig_setmethods__["solarArrayCurrent"] = _simMessages.PyBatteryOutMsg_solarArrayCurrent_set
    __swig_getmethods__["solarArrayCurrent"] = _simMessages.PyBatteryOutMsg_solarArrayCurrent_get
    if _newclass:
        solarArrayCurrent = _swig_property(_simMessages.PyBatteryOutMsg_solarArrayCurrent_get, _simMessages.PyBatteryOutMsg_solarArrayCurrent_set)
    __swig_setmethods__["batteryEMF"] = _simMessages.PyBatteryOutMsg_batteryEMF_set
    __swig_getmethods__["batteryEMF"] = _simMessages.PyBatteryOutMsg_batteryEMF_get
    if _newclass:
        batteryEMF = _swig_property(_simMessages.PyBatteryOutMsg_batteryEMF_get, _simMessages.PyBatteryOutMsg_batteryEMF_set)
    __swig_setmethods__["batteryESR"] = _simMessages.PyBatteryOutMsg_batteryESR_set
    __swig_getmethods__["batteryESR"] = _simMessages.PyBatteryOutMsg_batteryESR_get
    if _newclass:
        batteryESR = _swig_property(_simMessages.PyBatteryOutMsg_batteryESR_get, _simMessages.PyBatteryOutMsg_batteryESR_set)
    __swig_setmethods__["batteryVoltage"] = _simMessages.PyBatteryOutMsg_batteryVoltage_set
    __swig_getmethods__["batteryVoltage"] = _simMessages.PyBatteryOutMsg_batteryVoltage_get
    if _newclass:
        batteryVoltage = _swig_property(_simMessages.PyBatteryOutMsg_batteryVoltage_get, _simMessages.PyBatteryOutMsg_batteryVoltage_set)

    def __init__(self, *args):
        this = _simMessages.new_PyBatteryOutMsg(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _simMessages.delete_PyBatteryOutMsg
    __del__ = lambda self: None
PyBatteryOutMsg_swigregister = _simMessages.PyBatteryOutMsg_swigregister
PyBatteryOutMsg_swigregister(PyBatteryOutMsg)

sizeof_PyBatteryOutMsg = _simMessages.sizeof_PyBatteryOutMsg

import sys
protectAllClasses(sys.modules[__name__])

# This file is compatible with both classic and new-style classes.


